"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.se_DeleteLoadBalancerCommand = exports.se_DeleteKnownHostKeysCommand = exports.se_DeleteKeyPairCommand = exports.se_DeleteInstanceSnapshotCommand = exports.se_DeleteInstanceCommand = exports.se_DeleteDomainEntryCommand = exports.se_DeleteDomainCommand = exports.se_DeleteDistributionCommand = exports.se_DeleteDiskSnapshotCommand = exports.se_DeleteDiskCommand = exports.se_DeleteContainerServiceCommand = exports.se_DeleteContainerImageCommand = exports.se_DeleteContactMethodCommand = exports.se_DeleteCertificateCommand = exports.se_DeleteBucketAccessKeyCommand = exports.se_DeleteBucketCommand = exports.se_DeleteAutoSnapshotCommand = exports.se_DeleteAlarmCommand = exports.se_CreateRelationalDatabaseSnapshotCommand = exports.se_CreateRelationalDatabaseFromSnapshotCommand = exports.se_CreateRelationalDatabaseCommand = exports.se_CreateLoadBalancerTlsCertificateCommand = exports.se_CreateLoadBalancerCommand = exports.se_CreateKeyPairCommand = exports.se_CreateInstanceSnapshotCommand = exports.se_CreateInstancesFromSnapshotCommand = exports.se_CreateInstancesCommand = exports.se_CreateGUISessionAccessDetailsCommand = exports.se_CreateDomainEntryCommand = exports.se_CreateDomainCommand = exports.se_CreateDistributionCommand = exports.se_CreateDiskSnapshotCommand = exports.se_CreateDiskFromSnapshotCommand = exports.se_CreateDiskCommand = exports.se_CreateContainerServiceRegistryLoginCommand = exports.se_CreateContainerServiceDeploymentCommand = exports.se_CreateContainerServiceCommand = exports.se_CreateContactMethodCommand = exports.se_CreateCloudFormationStackCommand = exports.se_CreateCertificateCommand = exports.se_CreateBucketAccessKeyCommand = exports.se_CreateBucketCommand = exports.se_CopySnapshotCommand = exports.se_CloseInstancePublicPortsCommand = exports.se_AttachStaticIpCommand = exports.se_AttachLoadBalancerTlsCertificateCommand = exports.se_AttachInstancesToLoadBalancerCommand = exports.se_AttachDiskCommand = exports.se_AttachCertificateToDistributionCommand = exports.se_AllocateStaticIpCommand = void 0;
exports.se_GetInstanceStateCommand = exports.se_GetInstanceSnapshotsCommand = exports.se_GetInstanceSnapshotCommand = exports.se_GetInstancesCommand = exports.se_GetInstancePortStatesCommand = exports.se_GetInstanceMetricDataCommand = exports.se_GetInstanceAccessDetailsCommand = exports.se_GetInstanceCommand = exports.se_GetExportSnapshotRecordsCommand = exports.se_GetDomainsCommand = exports.se_GetDomainCommand = exports.se_GetDistributionsCommand = exports.se_GetDistributionMetricDataCommand = exports.se_GetDistributionLatestCacheResetCommand = exports.se_GetDistributionBundlesCommand = exports.se_GetDiskSnapshotsCommand = exports.se_GetDiskSnapshotCommand = exports.se_GetDisksCommand = exports.se_GetDiskCommand = exports.se_GetCostEstimateCommand = exports.se_GetContainerServicesCommand = exports.se_GetContainerServicePowersCommand = exports.se_GetContainerServiceMetricDataCommand = exports.se_GetContainerServiceDeploymentsCommand = exports.se_GetContainerLogCommand = exports.se_GetContainerImagesCommand = exports.se_GetContainerAPIMetadataCommand = exports.se_GetContactMethodsCommand = exports.se_GetCloudFormationStackRecordsCommand = exports.se_GetCertificatesCommand = exports.se_GetBundlesCommand = exports.se_GetBucketsCommand = exports.se_GetBucketMetricDataCommand = exports.se_GetBucketBundlesCommand = exports.se_GetBucketAccessKeysCommand = exports.se_GetBlueprintsCommand = exports.se_GetAutoSnapshotsCommand = exports.se_GetAlarmsCommand = exports.se_GetActiveNamesCommand = exports.se_ExportSnapshotCommand = exports.se_EnableAddOnCommand = exports.se_DownloadDefaultKeyPairCommand = exports.se_DisableAddOnCommand = exports.se_DetachStaticIpCommand = exports.se_DetachInstancesFromLoadBalancerCommand = exports.se_DetachDiskCommand = exports.se_DetachCertificateFromDistributionCommand = exports.se_DeleteRelationalDatabaseSnapshotCommand = exports.se_DeleteRelationalDatabaseCommand = exports.se_DeleteLoadBalancerTlsCertificateCommand = void 0;
exports.se_UpdateBucketCommand = exports.se_UntagResourceCommand = exports.se_UnpeerVpcCommand = exports.se_TestAlarmCommand = exports.se_TagResourceCommand = exports.se_StopRelationalDatabaseCommand = exports.se_StopInstanceCommand = exports.se_StopGUISessionCommand = exports.se_StartRelationalDatabaseCommand = exports.se_StartInstanceCommand = exports.se_StartGUISessionCommand = exports.se_SetResourceAccessForBucketCommand = exports.se_SetIpAddressTypeCommand = exports.se_SendContactMethodVerificationCommand = exports.se_ResetDistributionCacheCommand = exports.se_ReleaseStaticIpCommand = exports.se_RegisterContainerImageCommand = exports.se_RebootRelationalDatabaseCommand = exports.se_RebootInstanceCommand = exports.se_PutInstancePublicPortsCommand = exports.se_PutAlarmCommand = exports.se_PeerVpcCommand = exports.se_OpenInstancePublicPortsCommand = exports.se_IsVpcPeeredCommand = exports.se_ImportKeyPairCommand = exports.se_GetStaticIpsCommand = exports.se_GetStaticIpCommand = exports.se_GetRelationalDatabaseSnapshotsCommand = exports.se_GetRelationalDatabaseSnapshotCommand = exports.se_GetRelationalDatabasesCommand = exports.se_GetRelationalDatabaseParametersCommand = exports.se_GetRelationalDatabaseMetricDataCommand = exports.se_GetRelationalDatabaseMasterUserPasswordCommand = exports.se_GetRelationalDatabaseLogStreamsCommand = exports.se_GetRelationalDatabaseLogEventsCommand = exports.se_GetRelationalDatabaseEventsCommand = exports.se_GetRelationalDatabaseBundlesCommand = exports.se_GetRelationalDatabaseBlueprintsCommand = exports.se_GetRelationalDatabaseCommand = exports.se_GetRegionsCommand = exports.se_GetOperationsForResourceCommand = exports.se_GetOperationsCommand = exports.se_GetOperationCommand = exports.se_GetLoadBalancerTlsPoliciesCommand = exports.se_GetLoadBalancerTlsCertificatesCommand = exports.se_GetLoadBalancersCommand = exports.se_GetLoadBalancerMetricDataCommand = exports.se_GetLoadBalancerCommand = exports.se_GetKeyPairsCommand = exports.se_GetKeyPairCommand = void 0;
exports.de_DeleteDiskCommand = exports.de_DeleteContainerServiceCommand = exports.de_DeleteContainerImageCommand = exports.de_DeleteContactMethodCommand = exports.de_DeleteCertificateCommand = exports.de_DeleteBucketAccessKeyCommand = exports.de_DeleteBucketCommand = exports.de_DeleteAutoSnapshotCommand = exports.de_DeleteAlarmCommand = exports.de_CreateRelationalDatabaseSnapshotCommand = exports.de_CreateRelationalDatabaseFromSnapshotCommand = exports.de_CreateRelationalDatabaseCommand = exports.de_CreateLoadBalancerTlsCertificateCommand = exports.de_CreateLoadBalancerCommand = exports.de_CreateKeyPairCommand = exports.de_CreateInstanceSnapshotCommand = exports.de_CreateInstancesFromSnapshotCommand = exports.de_CreateInstancesCommand = exports.de_CreateGUISessionAccessDetailsCommand = exports.de_CreateDomainEntryCommand = exports.de_CreateDomainCommand = exports.de_CreateDistributionCommand = exports.de_CreateDiskSnapshotCommand = exports.de_CreateDiskFromSnapshotCommand = exports.de_CreateDiskCommand = exports.de_CreateContainerServiceRegistryLoginCommand = exports.de_CreateContainerServiceDeploymentCommand = exports.de_CreateContainerServiceCommand = exports.de_CreateContactMethodCommand = exports.de_CreateCloudFormationStackCommand = exports.de_CreateCertificateCommand = exports.de_CreateBucketAccessKeyCommand = exports.de_CreateBucketCommand = exports.de_CopySnapshotCommand = exports.de_CloseInstancePublicPortsCommand = exports.de_AttachStaticIpCommand = exports.de_AttachLoadBalancerTlsCertificateCommand = exports.de_AttachInstancesToLoadBalancerCommand = exports.de_AttachDiskCommand = exports.de_AttachCertificateToDistributionCommand = exports.de_AllocateStaticIpCommand = exports.se_UpdateRelationalDatabaseParametersCommand = exports.se_UpdateRelationalDatabaseCommand = exports.se_UpdateLoadBalancerAttributeCommand = exports.se_UpdateInstanceMetadataOptionsCommand = exports.se_UpdateDomainEntryCommand = exports.se_UpdateDistributionBundleCommand = exports.se_UpdateDistributionCommand = exports.se_UpdateContainerServiceCommand = exports.se_UpdateBucketBundleCommand = void 0;
exports.de_GetDomainsCommand = exports.de_GetDomainCommand = exports.de_GetDistributionsCommand = exports.de_GetDistributionMetricDataCommand = exports.de_GetDistributionLatestCacheResetCommand = exports.de_GetDistributionBundlesCommand = exports.de_GetDiskSnapshotsCommand = exports.de_GetDiskSnapshotCommand = exports.de_GetDisksCommand = exports.de_GetDiskCommand = exports.de_GetCostEstimateCommand = exports.de_GetContainerServicesCommand = exports.de_GetContainerServicePowersCommand = exports.de_GetContainerServiceMetricDataCommand = exports.de_GetContainerServiceDeploymentsCommand = exports.de_GetContainerLogCommand = exports.de_GetContainerImagesCommand = exports.de_GetContainerAPIMetadataCommand = exports.de_GetContactMethodsCommand = exports.de_GetCloudFormationStackRecordsCommand = exports.de_GetCertificatesCommand = exports.de_GetBundlesCommand = exports.de_GetBucketsCommand = exports.de_GetBucketMetricDataCommand = exports.de_GetBucketBundlesCommand = exports.de_GetBucketAccessKeysCommand = exports.de_GetBlueprintsCommand = exports.de_GetAutoSnapshotsCommand = exports.de_GetAlarmsCommand = exports.de_GetActiveNamesCommand = exports.de_ExportSnapshotCommand = exports.de_EnableAddOnCommand = exports.de_DownloadDefaultKeyPairCommand = exports.de_DisableAddOnCommand = exports.de_DetachStaticIpCommand = exports.de_DetachInstancesFromLoadBalancerCommand = exports.de_DetachDiskCommand = exports.de_DetachCertificateFromDistributionCommand = exports.de_DeleteRelationalDatabaseSnapshotCommand = exports.de_DeleteRelationalDatabaseCommand = exports.de_DeleteLoadBalancerTlsCertificateCommand = exports.de_DeleteLoadBalancerCommand = exports.de_DeleteKnownHostKeysCommand = exports.de_DeleteKeyPairCommand = exports.de_DeleteInstanceSnapshotCommand = exports.de_DeleteInstanceCommand = exports.de_DeleteDomainEntryCommand = exports.de_DeleteDomainCommand = exports.de_DeleteDistributionCommand = exports.de_DeleteDiskSnapshotCommand = void 0;
exports.de_StartInstanceCommand = exports.de_StartGUISessionCommand = exports.de_SetResourceAccessForBucketCommand = exports.de_SetIpAddressTypeCommand = exports.de_SendContactMethodVerificationCommand = exports.de_ResetDistributionCacheCommand = exports.de_ReleaseStaticIpCommand = exports.de_RegisterContainerImageCommand = exports.de_RebootRelationalDatabaseCommand = exports.de_RebootInstanceCommand = exports.de_PutInstancePublicPortsCommand = exports.de_PutAlarmCommand = exports.de_PeerVpcCommand = exports.de_OpenInstancePublicPortsCommand = exports.de_IsVpcPeeredCommand = exports.de_ImportKeyPairCommand = exports.de_GetStaticIpsCommand = exports.de_GetStaticIpCommand = exports.de_GetRelationalDatabaseSnapshotsCommand = exports.de_GetRelationalDatabaseSnapshotCommand = exports.de_GetRelationalDatabasesCommand = exports.de_GetRelationalDatabaseParametersCommand = exports.de_GetRelationalDatabaseMetricDataCommand = exports.de_GetRelationalDatabaseMasterUserPasswordCommand = exports.de_GetRelationalDatabaseLogStreamsCommand = exports.de_GetRelationalDatabaseLogEventsCommand = exports.de_GetRelationalDatabaseEventsCommand = exports.de_GetRelationalDatabaseBundlesCommand = exports.de_GetRelationalDatabaseBlueprintsCommand = exports.de_GetRelationalDatabaseCommand = exports.de_GetRegionsCommand = exports.de_GetOperationsForResourceCommand = exports.de_GetOperationsCommand = exports.de_GetOperationCommand = exports.de_GetLoadBalancerTlsPoliciesCommand = exports.de_GetLoadBalancerTlsCertificatesCommand = exports.de_GetLoadBalancersCommand = exports.de_GetLoadBalancerMetricDataCommand = exports.de_GetLoadBalancerCommand = exports.de_GetKeyPairsCommand = exports.de_GetKeyPairCommand = exports.de_GetInstanceStateCommand = exports.de_GetInstanceSnapshotsCommand = exports.de_GetInstanceSnapshotCommand = exports.de_GetInstancesCommand = exports.de_GetInstancePortStatesCommand = exports.de_GetInstanceMetricDataCommand = exports.de_GetInstanceAccessDetailsCommand = exports.de_GetInstanceCommand = exports.de_GetExportSnapshotRecordsCommand = void 0;
exports.de_UpdateRelationalDatabaseParametersCommand = exports.de_UpdateRelationalDatabaseCommand = exports.de_UpdateLoadBalancerAttributeCommand = exports.de_UpdateInstanceMetadataOptionsCommand = exports.de_UpdateDomainEntryCommand = exports.de_UpdateDistributionBundleCommand = exports.de_UpdateDistributionCommand = exports.de_UpdateContainerServiceCommand = exports.de_UpdateBucketBundleCommand = exports.de_UpdateBucketCommand = exports.de_UntagResourceCommand = exports.de_UnpeerVpcCommand = exports.de_TestAlarmCommand = exports.de_TagResourceCommand = exports.de_StopRelationalDatabaseCommand = exports.de_StopInstanceCommand = exports.de_StopGUISessionCommand = exports.de_StartRelationalDatabaseCommand = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const smithy_client_1 = require("@aws-sdk/smithy-client");
const LightsailServiceException_1 = require("../models/LightsailServiceException");
const models_0_1 = require("../models/models_0");
const se_AllocateStaticIpCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.AllocateStaticIp",
    };
    let body;
    body = JSON.stringify(se_AllocateStaticIpRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_AllocateStaticIpCommand = se_AllocateStaticIpCommand;
const se_AttachCertificateToDistributionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.AttachCertificateToDistribution",
    };
    let body;
    body = JSON.stringify(se_AttachCertificateToDistributionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_AttachCertificateToDistributionCommand = se_AttachCertificateToDistributionCommand;
const se_AttachDiskCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.AttachDisk",
    };
    let body;
    body = JSON.stringify(se_AttachDiskRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_AttachDiskCommand = se_AttachDiskCommand;
const se_AttachInstancesToLoadBalancerCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.AttachInstancesToLoadBalancer",
    };
    let body;
    body = JSON.stringify(se_AttachInstancesToLoadBalancerRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_AttachInstancesToLoadBalancerCommand = se_AttachInstancesToLoadBalancerCommand;
const se_AttachLoadBalancerTlsCertificateCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.AttachLoadBalancerTlsCertificate",
    };
    let body;
    body = JSON.stringify(se_AttachLoadBalancerTlsCertificateRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_AttachLoadBalancerTlsCertificateCommand = se_AttachLoadBalancerTlsCertificateCommand;
const se_AttachStaticIpCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.AttachStaticIp",
    };
    let body;
    body = JSON.stringify(se_AttachStaticIpRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_AttachStaticIpCommand = se_AttachStaticIpCommand;
const se_CloseInstancePublicPortsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.CloseInstancePublicPorts",
    };
    let body;
    body = JSON.stringify(se_CloseInstancePublicPortsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CloseInstancePublicPortsCommand = se_CloseInstancePublicPortsCommand;
const se_CopySnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.CopySnapshot",
    };
    let body;
    body = JSON.stringify(se_CopySnapshotRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CopySnapshotCommand = se_CopySnapshotCommand;
const se_CreateBucketCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.CreateBucket",
    };
    let body;
    body = JSON.stringify(se_CreateBucketRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateBucketCommand = se_CreateBucketCommand;
const se_CreateBucketAccessKeyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.CreateBucketAccessKey",
    };
    let body;
    body = JSON.stringify(se_CreateBucketAccessKeyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateBucketAccessKeyCommand = se_CreateBucketAccessKeyCommand;
const se_CreateCertificateCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.CreateCertificate",
    };
    let body;
    body = JSON.stringify(se_CreateCertificateRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateCertificateCommand = se_CreateCertificateCommand;
const se_CreateCloudFormationStackCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.CreateCloudFormationStack",
    };
    let body;
    body = JSON.stringify(se_CreateCloudFormationStackRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateCloudFormationStackCommand = se_CreateCloudFormationStackCommand;
const se_CreateContactMethodCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.CreateContactMethod",
    };
    let body;
    body = JSON.stringify(se_CreateContactMethodRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateContactMethodCommand = se_CreateContactMethodCommand;
const se_CreateContainerServiceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.CreateContainerService",
    };
    let body;
    body = JSON.stringify(se_CreateContainerServiceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateContainerServiceCommand = se_CreateContainerServiceCommand;
const se_CreateContainerServiceDeploymentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.CreateContainerServiceDeployment",
    };
    let body;
    body = JSON.stringify(se_CreateContainerServiceDeploymentRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateContainerServiceDeploymentCommand = se_CreateContainerServiceDeploymentCommand;
const se_CreateContainerServiceRegistryLoginCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.CreateContainerServiceRegistryLogin",
    };
    let body;
    body = JSON.stringify(se_CreateContainerServiceRegistryLoginRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateContainerServiceRegistryLoginCommand = se_CreateContainerServiceRegistryLoginCommand;
const se_CreateDiskCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.CreateDisk",
    };
    let body;
    body = JSON.stringify(se_CreateDiskRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateDiskCommand = se_CreateDiskCommand;
const se_CreateDiskFromSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.CreateDiskFromSnapshot",
    };
    let body;
    body = JSON.stringify(se_CreateDiskFromSnapshotRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateDiskFromSnapshotCommand = se_CreateDiskFromSnapshotCommand;
const se_CreateDiskSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.CreateDiskSnapshot",
    };
    let body;
    body = JSON.stringify(se_CreateDiskSnapshotRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateDiskSnapshotCommand = se_CreateDiskSnapshotCommand;
const se_CreateDistributionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.CreateDistribution",
    };
    let body;
    body = JSON.stringify(se_CreateDistributionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateDistributionCommand = se_CreateDistributionCommand;
const se_CreateDomainCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.CreateDomain",
    };
    let body;
    body = JSON.stringify(se_CreateDomainRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateDomainCommand = se_CreateDomainCommand;
const se_CreateDomainEntryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.CreateDomainEntry",
    };
    let body;
    body = JSON.stringify(se_CreateDomainEntryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateDomainEntryCommand = se_CreateDomainEntryCommand;
const se_CreateGUISessionAccessDetailsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.CreateGUISessionAccessDetails",
    };
    let body;
    body = JSON.stringify(se_CreateGUISessionAccessDetailsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateGUISessionAccessDetailsCommand = se_CreateGUISessionAccessDetailsCommand;
const se_CreateInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.CreateInstances",
    };
    let body;
    body = JSON.stringify(se_CreateInstancesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateInstancesCommand = se_CreateInstancesCommand;
const se_CreateInstancesFromSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.CreateInstancesFromSnapshot",
    };
    let body;
    body = JSON.stringify(se_CreateInstancesFromSnapshotRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateInstancesFromSnapshotCommand = se_CreateInstancesFromSnapshotCommand;
const se_CreateInstanceSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.CreateInstanceSnapshot",
    };
    let body;
    body = JSON.stringify(se_CreateInstanceSnapshotRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateInstanceSnapshotCommand = se_CreateInstanceSnapshotCommand;
const se_CreateKeyPairCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.CreateKeyPair",
    };
    let body;
    body = JSON.stringify(se_CreateKeyPairRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateKeyPairCommand = se_CreateKeyPairCommand;
const se_CreateLoadBalancerCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.CreateLoadBalancer",
    };
    let body;
    body = JSON.stringify(se_CreateLoadBalancerRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateLoadBalancerCommand = se_CreateLoadBalancerCommand;
const se_CreateLoadBalancerTlsCertificateCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.CreateLoadBalancerTlsCertificate",
    };
    let body;
    body = JSON.stringify(se_CreateLoadBalancerTlsCertificateRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateLoadBalancerTlsCertificateCommand = se_CreateLoadBalancerTlsCertificateCommand;
const se_CreateRelationalDatabaseCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.CreateRelationalDatabase",
    };
    let body;
    body = JSON.stringify(se_CreateRelationalDatabaseRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateRelationalDatabaseCommand = se_CreateRelationalDatabaseCommand;
const se_CreateRelationalDatabaseFromSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.CreateRelationalDatabaseFromSnapshot",
    };
    let body;
    body = JSON.stringify(se_CreateRelationalDatabaseFromSnapshotRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateRelationalDatabaseFromSnapshotCommand = se_CreateRelationalDatabaseFromSnapshotCommand;
const se_CreateRelationalDatabaseSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.CreateRelationalDatabaseSnapshot",
    };
    let body;
    body = JSON.stringify(se_CreateRelationalDatabaseSnapshotRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_CreateRelationalDatabaseSnapshotCommand = se_CreateRelationalDatabaseSnapshotCommand;
const se_DeleteAlarmCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.DeleteAlarm",
    };
    let body;
    body = JSON.stringify(se_DeleteAlarmRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteAlarmCommand = se_DeleteAlarmCommand;
const se_DeleteAutoSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.DeleteAutoSnapshot",
    };
    let body;
    body = JSON.stringify(se_DeleteAutoSnapshotRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteAutoSnapshotCommand = se_DeleteAutoSnapshotCommand;
const se_DeleteBucketCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.DeleteBucket",
    };
    let body;
    body = JSON.stringify(se_DeleteBucketRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteBucketCommand = se_DeleteBucketCommand;
const se_DeleteBucketAccessKeyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.DeleteBucketAccessKey",
    };
    let body;
    body = JSON.stringify(se_DeleteBucketAccessKeyRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteBucketAccessKeyCommand = se_DeleteBucketAccessKeyCommand;
const se_DeleteCertificateCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.DeleteCertificate",
    };
    let body;
    body = JSON.stringify(se_DeleteCertificateRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteCertificateCommand = se_DeleteCertificateCommand;
const se_DeleteContactMethodCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.DeleteContactMethod",
    };
    let body;
    body = JSON.stringify(se_DeleteContactMethodRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteContactMethodCommand = se_DeleteContactMethodCommand;
const se_DeleteContainerImageCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.DeleteContainerImage",
    };
    let body;
    body = JSON.stringify(se_DeleteContainerImageRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteContainerImageCommand = se_DeleteContainerImageCommand;
const se_DeleteContainerServiceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.DeleteContainerService",
    };
    let body;
    body = JSON.stringify(se_DeleteContainerServiceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteContainerServiceCommand = se_DeleteContainerServiceCommand;
const se_DeleteDiskCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.DeleteDisk",
    };
    let body;
    body = JSON.stringify(se_DeleteDiskRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteDiskCommand = se_DeleteDiskCommand;
const se_DeleteDiskSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.DeleteDiskSnapshot",
    };
    let body;
    body = JSON.stringify(se_DeleteDiskSnapshotRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteDiskSnapshotCommand = se_DeleteDiskSnapshotCommand;
const se_DeleteDistributionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.DeleteDistribution",
    };
    let body;
    body = JSON.stringify(se_DeleteDistributionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteDistributionCommand = se_DeleteDistributionCommand;
const se_DeleteDomainCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.DeleteDomain",
    };
    let body;
    body = JSON.stringify(se_DeleteDomainRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteDomainCommand = se_DeleteDomainCommand;
const se_DeleteDomainEntryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.DeleteDomainEntry",
    };
    let body;
    body = JSON.stringify(se_DeleteDomainEntryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteDomainEntryCommand = se_DeleteDomainEntryCommand;
const se_DeleteInstanceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.DeleteInstance",
    };
    let body;
    body = JSON.stringify(se_DeleteInstanceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteInstanceCommand = se_DeleteInstanceCommand;
const se_DeleteInstanceSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.DeleteInstanceSnapshot",
    };
    let body;
    body = JSON.stringify(se_DeleteInstanceSnapshotRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteInstanceSnapshotCommand = se_DeleteInstanceSnapshotCommand;
const se_DeleteKeyPairCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.DeleteKeyPair",
    };
    let body;
    body = JSON.stringify(se_DeleteKeyPairRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteKeyPairCommand = se_DeleteKeyPairCommand;
const se_DeleteKnownHostKeysCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.DeleteKnownHostKeys",
    };
    let body;
    body = JSON.stringify(se_DeleteKnownHostKeysRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteKnownHostKeysCommand = se_DeleteKnownHostKeysCommand;
const se_DeleteLoadBalancerCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.DeleteLoadBalancer",
    };
    let body;
    body = JSON.stringify(se_DeleteLoadBalancerRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteLoadBalancerCommand = se_DeleteLoadBalancerCommand;
const se_DeleteLoadBalancerTlsCertificateCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.DeleteLoadBalancerTlsCertificate",
    };
    let body;
    body = JSON.stringify(se_DeleteLoadBalancerTlsCertificateRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteLoadBalancerTlsCertificateCommand = se_DeleteLoadBalancerTlsCertificateCommand;
const se_DeleteRelationalDatabaseCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.DeleteRelationalDatabase",
    };
    let body;
    body = JSON.stringify(se_DeleteRelationalDatabaseRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteRelationalDatabaseCommand = se_DeleteRelationalDatabaseCommand;
const se_DeleteRelationalDatabaseSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.DeleteRelationalDatabaseSnapshot",
    };
    let body;
    body = JSON.stringify(se_DeleteRelationalDatabaseSnapshotRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DeleteRelationalDatabaseSnapshotCommand = se_DeleteRelationalDatabaseSnapshotCommand;
const se_DetachCertificateFromDistributionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.DetachCertificateFromDistribution",
    };
    let body;
    body = JSON.stringify(se_DetachCertificateFromDistributionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DetachCertificateFromDistributionCommand = se_DetachCertificateFromDistributionCommand;
const se_DetachDiskCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.DetachDisk",
    };
    let body;
    body = JSON.stringify(se_DetachDiskRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DetachDiskCommand = se_DetachDiskCommand;
const se_DetachInstancesFromLoadBalancerCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.DetachInstancesFromLoadBalancer",
    };
    let body;
    body = JSON.stringify(se_DetachInstancesFromLoadBalancerRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DetachInstancesFromLoadBalancerCommand = se_DetachInstancesFromLoadBalancerCommand;
const se_DetachStaticIpCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.DetachStaticIp",
    };
    let body;
    body = JSON.stringify(se_DetachStaticIpRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DetachStaticIpCommand = se_DetachStaticIpCommand;
const se_DisableAddOnCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.DisableAddOn",
    };
    let body;
    body = JSON.stringify(se_DisableAddOnRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DisableAddOnCommand = se_DisableAddOnCommand;
const se_DownloadDefaultKeyPairCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.DownloadDefaultKeyPair",
    };
    let body;
    body = JSON.stringify(se_DownloadDefaultKeyPairRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DownloadDefaultKeyPairCommand = se_DownloadDefaultKeyPairCommand;
const se_EnableAddOnCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.EnableAddOn",
    };
    let body;
    body = JSON.stringify(se_EnableAddOnRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_EnableAddOnCommand = se_EnableAddOnCommand;
const se_ExportSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.ExportSnapshot",
    };
    let body;
    body = JSON.stringify(se_ExportSnapshotRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ExportSnapshotCommand = se_ExportSnapshotCommand;
const se_GetActiveNamesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetActiveNames",
    };
    let body;
    body = JSON.stringify(se_GetActiveNamesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetActiveNamesCommand = se_GetActiveNamesCommand;
const se_GetAlarmsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetAlarms",
    };
    let body;
    body = JSON.stringify(se_GetAlarmsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetAlarmsCommand = se_GetAlarmsCommand;
const se_GetAutoSnapshotsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetAutoSnapshots",
    };
    let body;
    body = JSON.stringify(se_GetAutoSnapshotsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetAutoSnapshotsCommand = se_GetAutoSnapshotsCommand;
const se_GetBlueprintsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetBlueprints",
    };
    let body;
    body = JSON.stringify(se_GetBlueprintsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetBlueprintsCommand = se_GetBlueprintsCommand;
const se_GetBucketAccessKeysCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetBucketAccessKeys",
    };
    let body;
    body = JSON.stringify(se_GetBucketAccessKeysRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetBucketAccessKeysCommand = se_GetBucketAccessKeysCommand;
const se_GetBucketBundlesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetBucketBundles",
    };
    let body;
    body = JSON.stringify(se_GetBucketBundlesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetBucketBundlesCommand = se_GetBucketBundlesCommand;
const se_GetBucketMetricDataCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetBucketMetricData",
    };
    let body;
    body = JSON.stringify(se_GetBucketMetricDataRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetBucketMetricDataCommand = se_GetBucketMetricDataCommand;
const se_GetBucketsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetBuckets",
    };
    let body;
    body = JSON.stringify(se_GetBucketsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetBucketsCommand = se_GetBucketsCommand;
const se_GetBundlesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetBundles",
    };
    let body;
    body = JSON.stringify(se_GetBundlesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetBundlesCommand = se_GetBundlesCommand;
const se_GetCertificatesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetCertificates",
    };
    let body;
    body = JSON.stringify(se_GetCertificatesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetCertificatesCommand = se_GetCertificatesCommand;
const se_GetCloudFormationStackRecordsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetCloudFormationStackRecords",
    };
    let body;
    body = JSON.stringify(se_GetCloudFormationStackRecordsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetCloudFormationStackRecordsCommand = se_GetCloudFormationStackRecordsCommand;
const se_GetContactMethodsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetContactMethods",
    };
    let body;
    body = JSON.stringify(se_GetContactMethodsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetContactMethodsCommand = se_GetContactMethodsCommand;
const se_GetContainerAPIMetadataCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetContainerAPIMetadata",
    };
    let body;
    body = JSON.stringify(se_GetContainerAPIMetadataRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetContainerAPIMetadataCommand = se_GetContainerAPIMetadataCommand;
const se_GetContainerImagesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetContainerImages",
    };
    let body;
    body = JSON.stringify(se_GetContainerImagesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetContainerImagesCommand = se_GetContainerImagesCommand;
const se_GetContainerLogCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetContainerLog",
    };
    let body;
    body = JSON.stringify(se_GetContainerLogRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetContainerLogCommand = se_GetContainerLogCommand;
const se_GetContainerServiceDeploymentsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetContainerServiceDeployments",
    };
    let body;
    body = JSON.stringify(se_GetContainerServiceDeploymentsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetContainerServiceDeploymentsCommand = se_GetContainerServiceDeploymentsCommand;
const se_GetContainerServiceMetricDataCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetContainerServiceMetricData",
    };
    let body;
    body = JSON.stringify(se_GetContainerServiceMetricDataRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetContainerServiceMetricDataCommand = se_GetContainerServiceMetricDataCommand;
const se_GetContainerServicePowersCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetContainerServicePowers",
    };
    let body;
    body = JSON.stringify(se_GetContainerServicePowersRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetContainerServicePowersCommand = se_GetContainerServicePowersCommand;
const se_GetContainerServicesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetContainerServices",
    };
    let body;
    body = JSON.stringify(se_GetContainerServicesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetContainerServicesCommand = se_GetContainerServicesCommand;
const se_GetCostEstimateCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetCostEstimate",
    };
    let body;
    body = JSON.stringify(se_GetCostEstimateRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetCostEstimateCommand = se_GetCostEstimateCommand;
const se_GetDiskCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetDisk",
    };
    let body;
    body = JSON.stringify(se_GetDiskRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDiskCommand = se_GetDiskCommand;
const se_GetDisksCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetDisks",
    };
    let body;
    body = JSON.stringify(se_GetDisksRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDisksCommand = se_GetDisksCommand;
const se_GetDiskSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetDiskSnapshot",
    };
    let body;
    body = JSON.stringify(se_GetDiskSnapshotRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDiskSnapshotCommand = se_GetDiskSnapshotCommand;
const se_GetDiskSnapshotsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetDiskSnapshots",
    };
    let body;
    body = JSON.stringify(se_GetDiskSnapshotsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDiskSnapshotsCommand = se_GetDiskSnapshotsCommand;
const se_GetDistributionBundlesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetDistributionBundles",
    };
    let body;
    body = JSON.stringify(se_GetDistributionBundlesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDistributionBundlesCommand = se_GetDistributionBundlesCommand;
const se_GetDistributionLatestCacheResetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetDistributionLatestCacheReset",
    };
    let body;
    body = JSON.stringify(se_GetDistributionLatestCacheResetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDistributionLatestCacheResetCommand = se_GetDistributionLatestCacheResetCommand;
const se_GetDistributionMetricDataCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetDistributionMetricData",
    };
    let body;
    body = JSON.stringify(se_GetDistributionMetricDataRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDistributionMetricDataCommand = se_GetDistributionMetricDataCommand;
const se_GetDistributionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetDistributions",
    };
    let body;
    body = JSON.stringify(se_GetDistributionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDistributionsCommand = se_GetDistributionsCommand;
const se_GetDomainCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetDomain",
    };
    let body;
    body = JSON.stringify(se_GetDomainRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDomainCommand = se_GetDomainCommand;
const se_GetDomainsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetDomains",
    };
    let body;
    body = JSON.stringify(se_GetDomainsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetDomainsCommand = se_GetDomainsCommand;
const se_GetExportSnapshotRecordsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetExportSnapshotRecords",
    };
    let body;
    body = JSON.stringify(se_GetExportSnapshotRecordsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetExportSnapshotRecordsCommand = se_GetExportSnapshotRecordsCommand;
const se_GetInstanceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetInstance",
    };
    let body;
    body = JSON.stringify(se_GetInstanceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetInstanceCommand = se_GetInstanceCommand;
const se_GetInstanceAccessDetailsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetInstanceAccessDetails",
    };
    let body;
    body = JSON.stringify(se_GetInstanceAccessDetailsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetInstanceAccessDetailsCommand = se_GetInstanceAccessDetailsCommand;
const se_GetInstanceMetricDataCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetInstanceMetricData",
    };
    let body;
    body = JSON.stringify(se_GetInstanceMetricDataRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetInstanceMetricDataCommand = se_GetInstanceMetricDataCommand;
const se_GetInstancePortStatesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetInstancePortStates",
    };
    let body;
    body = JSON.stringify(se_GetInstancePortStatesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetInstancePortStatesCommand = se_GetInstancePortStatesCommand;
const se_GetInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetInstances",
    };
    let body;
    body = JSON.stringify(se_GetInstancesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetInstancesCommand = se_GetInstancesCommand;
const se_GetInstanceSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetInstanceSnapshot",
    };
    let body;
    body = JSON.stringify(se_GetInstanceSnapshotRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetInstanceSnapshotCommand = se_GetInstanceSnapshotCommand;
const se_GetInstanceSnapshotsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetInstanceSnapshots",
    };
    let body;
    body = JSON.stringify(se_GetInstanceSnapshotsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetInstanceSnapshotsCommand = se_GetInstanceSnapshotsCommand;
const se_GetInstanceStateCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetInstanceState",
    };
    let body;
    body = JSON.stringify(se_GetInstanceStateRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetInstanceStateCommand = se_GetInstanceStateCommand;
const se_GetKeyPairCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetKeyPair",
    };
    let body;
    body = JSON.stringify(se_GetKeyPairRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetKeyPairCommand = se_GetKeyPairCommand;
const se_GetKeyPairsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetKeyPairs",
    };
    let body;
    body = JSON.stringify(se_GetKeyPairsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetKeyPairsCommand = se_GetKeyPairsCommand;
const se_GetLoadBalancerCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetLoadBalancer",
    };
    let body;
    body = JSON.stringify(se_GetLoadBalancerRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetLoadBalancerCommand = se_GetLoadBalancerCommand;
const se_GetLoadBalancerMetricDataCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetLoadBalancerMetricData",
    };
    let body;
    body = JSON.stringify(se_GetLoadBalancerMetricDataRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetLoadBalancerMetricDataCommand = se_GetLoadBalancerMetricDataCommand;
const se_GetLoadBalancersCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetLoadBalancers",
    };
    let body;
    body = JSON.stringify(se_GetLoadBalancersRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetLoadBalancersCommand = se_GetLoadBalancersCommand;
const se_GetLoadBalancerTlsCertificatesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetLoadBalancerTlsCertificates",
    };
    let body;
    body = JSON.stringify(se_GetLoadBalancerTlsCertificatesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetLoadBalancerTlsCertificatesCommand = se_GetLoadBalancerTlsCertificatesCommand;
const se_GetLoadBalancerTlsPoliciesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetLoadBalancerTlsPolicies",
    };
    let body;
    body = JSON.stringify(se_GetLoadBalancerTlsPoliciesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetLoadBalancerTlsPoliciesCommand = se_GetLoadBalancerTlsPoliciesCommand;
const se_GetOperationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetOperation",
    };
    let body;
    body = JSON.stringify(se_GetOperationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetOperationCommand = se_GetOperationCommand;
const se_GetOperationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetOperations",
    };
    let body;
    body = JSON.stringify(se_GetOperationsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetOperationsCommand = se_GetOperationsCommand;
const se_GetOperationsForResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetOperationsForResource",
    };
    let body;
    body = JSON.stringify(se_GetOperationsForResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetOperationsForResourceCommand = se_GetOperationsForResourceCommand;
const se_GetRegionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetRegions",
    };
    let body;
    body = JSON.stringify(se_GetRegionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetRegionsCommand = se_GetRegionsCommand;
const se_GetRelationalDatabaseCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetRelationalDatabase",
    };
    let body;
    body = JSON.stringify(se_GetRelationalDatabaseRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetRelationalDatabaseCommand = se_GetRelationalDatabaseCommand;
const se_GetRelationalDatabaseBlueprintsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetRelationalDatabaseBlueprints",
    };
    let body;
    body = JSON.stringify(se_GetRelationalDatabaseBlueprintsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetRelationalDatabaseBlueprintsCommand = se_GetRelationalDatabaseBlueprintsCommand;
const se_GetRelationalDatabaseBundlesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetRelationalDatabaseBundles",
    };
    let body;
    body = JSON.stringify(se_GetRelationalDatabaseBundlesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetRelationalDatabaseBundlesCommand = se_GetRelationalDatabaseBundlesCommand;
const se_GetRelationalDatabaseEventsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetRelationalDatabaseEvents",
    };
    let body;
    body = JSON.stringify(se_GetRelationalDatabaseEventsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetRelationalDatabaseEventsCommand = se_GetRelationalDatabaseEventsCommand;
const se_GetRelationalDatabaseLogEventsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetRelationalDatabaseLogEvents",
    };
    let body;
    body = JSON.stringify(se_GetRelationalDatabaseLogEventsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetRelationalDatabaseLogEventsCommand = se_GetRelationalDatabaseLogEventsCommand;
const se_GetRelationalDatabaseLogStreamsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetRelationalDatabaseLogStreams",
    };
    let body;
    body = JSON.stringify(se_GetRelationalDatabaseLogStreamsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetRelationalDatabaseLogStreamsCommand = se_GetRelationalDatabaseLogStreamsCommand;
const se_GetRelationalDatabaseMasterUserPasswordCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetRelationalDatabaseMasterUserPassword",
    };
    let body;
    body = JSON.stringify(se_GetRelationalDatabaseMasterUserPasswordRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetRelationalDatabaseMasterUserPasswordCommand = se_GetRelationalDatabaseMasterUserPasswordCommand;
const se_GetRelationalDatabaseMetricDataCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetRelationalDatabaseMetricData",
    };
    let body;
    body = JSON.stringify(se_GetRelationalDatabaseMetricDataRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetRelationalDatabaseMetricDataCommand = se_GetRelationalDatabaseMetricDataCommand;
const se_GetRelationalDatabaseParametersCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetRelationalDatabaseParameters",
    };
    let body;
    body = JSON.stringify(se_GetRelationalDatabaseParametersRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetRelationalDatabaseParametersCommand = se_GetRelationalDatabaseParametersCommand;
const se_GetRelationalDatabasesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetRelationalDatabases",
    };
    let body;
    body = JSON.stringify(se_GetRelationalDatabasesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetRelationalDatabasesCommand = se_GetRelationalDatabasesCommand;
const se_GetRelationalDatabaseSnapshotCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetRelationalDatabaseSnapshot",
    };
    let body;
    body = JSON.stringify(se_GetRelationalDatabaseSnapshotRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetRelationalDatabaseSnapshotCommand = se_GetRelationalDatabaseSnapshotCommand;
const se_GetRelationalDatabaseSnapshotsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetRelationalDatabaseSnapshots",
    };
    let body;
    body = JSON.stringify(se_GetRelationalDatabaseSnapshotsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetRelationalDatabaseSnapshotsCommand = se_GetRelationalDatabaseSnapshotsCommand;
const se_GetStaticIpCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetStaticIp",
    };
    let body;
    body = JSON.stringify(se_GetStaticIpRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetStaticIpCommand = se_GetStaticIpCommand;
const se_GetStaticIpsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.GetStaticIps",
    };
    let body;
    body = JSON.stringify(se_GetStaticIpsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetStaticIpsCommand = se_GetStaticIpsCommand;
const se_ImportKeyPairCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.ImportKeyPair",
    };
    let body;
    body = JSON.stringify(se_ImportKeyPairRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ImportKeyPairCommand = se_ImportKeyPairCommand;
const se_IsVpcPeeredCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.IsVpcPeered",
    };
    let body;
    body = JSON.stringify(se_IsVpcPeeredRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_IsVpcPeeredCommand = se_IsVpcPeeredCommand;
const se_OpenInstancePublicPortsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.OpenInstancePublicPorts",
    };
    let body;
    body = JSON.stringify(se_OpenInstancePublicPortsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_OpenInstancePublicPortsCommand = se_OpenInstancePublicPortsCommand;
const se_PeerVpcCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.PeerVpc",
    };
    let body;
    body = JSON.stringify(se_PeerVpcRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PeerVpcCommand = se_PeerVpcCommand;
const se_PutAlarmCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.PutAlarm",
    };
    let body;
    body = JSON.stringify(se_PutAlarmRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutAlarmCommand = se_PutAlarmCommand;
const se_PutInstancePublicPortsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.PutInstancePublicPorts",
    };
    let body;
    body = JSON.stringify(se_PutInstancePublicPortsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_PutInstancePublicPortsCommand = se_PutInstancePublicPortsCommand;
const se_RebootInstanceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.RebootInstance",
    };
    let body;
    body = JSON.stringify(se_RebootInstanceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RebootInstanceCommand = se_RebootInstanceCommand;
const se_RebootRelationalDatabaseCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.RebootRelationalDatabase",
    };
    let body;
    body = JSON.stringify(se_RebootRelationalDatabaseRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RebootRelationalDatabaseCommand = se_RebootRelationalDatabaseCommand;
const se_RegisterContainerImageCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.RegisterContainerImage",
    };
    let body;
    body = JSON.stringify(se_RegisterContainerImageRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_RegisterContainerImageCommand = se_RegisterContainerImageCommand;
const se_ReleaseStaticIpCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.ReleaseStaticIp",
    };
    let body;
    body = JSON.stringify(se_ReleaseStaticIpRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ReleaseStaticIpCommand = se_ReleaseStaticIpCommand;
const se_ResetDistributionCacheCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.ResetDistributionCache",
    };
    let body;
    body = JSON.stringify(se_ResetDistributionCacheRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ResetDistributionCacheCommand = se_ResetDistributionCacheCommand;
const se_SendContactMethodVerificationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.SendContactMethodVerification",
    };
    let body;
    body = JSON.stringify(se_SendContactMethodVerificationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_SendContactMethodVerificationCommand = se_SendContactMethodVerificationCommand;
const se_SetIpAddressTypeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.SetIpAddressType",
    };
    let body;
    body = JSON.stringify(se_SetIpAddressTypeRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_SetIpAddressTypeCommand = se_SetIpAddressTypeCommand;
const se_SetResourceAccessForBucketCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.SetResourceAccessForBucket",
    };
    let body;
    body = JSON.stringify(se_SetResourceAccessForBucketRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_SetResourceAccessForBucketCommand = se_SetResourceAccessForBucketCommand;
const se_StartGUISessionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.StartGUISession",
    };
    let body;
    body = JSON.stringify(se_StartGUISessionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartGUISessionCommand = se_StartGUISessionCommand;
const se_StartInstanceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.StartInstance",
    };
    let body;
    body = JSON.stringify(se_StartInstanceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartInstanceCommand = se_StartInstanceCommand;
const se_StartRelationalDatabaseCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.StartRelationalDatabase",
    };
    let body;
    body = JSON.stringify(se_StartRelationalDatabaseRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StartRelationalDatabaseCommand = se_StartRelationalDatabaseCommand;
const se_StopGUISessionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.StopGUISession",
    };
    let body;
    body = JSON.stringify(se_StopGUISessionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StopGUISessionCommand = se_StopGUISessionCommand;
const se_StopInstanceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.StopInstance",
    };
    let body;
    body = JSON.stringify(se_StopInstanceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StopInstanceCommand = se_StopInstanceCommand;
const se_StopRelationalDatabaseCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.StopRelationalDatabase",
    };
    let body;
    body = JSON.stringify(se_StopRelationalDatabaseRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_StopRelationalDatabaseCommand = se_StopRelationalDatabaseCommand;
const se_TagResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.TagResource",
    };
    let body;
    body = JSON.stringify(se_TagResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_TagResourceCommand = se_TagResourceCommand;
const se_TestAlarmCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.TestAlarm",
    };
    let body;
    body = JSON.stringify(se_TestAlarmRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_TestAlarmCommand = se_TestAlarmCommand;
const se_UnpeerVpcCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.UnpeerVpc",
    };
    let body;
    body = JSON.stringify(se_UnpeerVpcRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UnpeerVpcCommand = se_UnpeerVpcCommand;
const se_UntagResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.UntagResource",
    };
    let body;
    body = JSON.stringify(se_UntagResourceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UntagResourceCommand = se_UntagResourceCommand;
const se_UpdateBucketCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.UpdateBucket",
    };
    let body;
    body = JSON.stringify(se_UpdateBucketRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateBucketCommand = se_UpdateBucketCommand;
const se_UpdateBucketBundleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.UpdateBucketBundle",
    };
    let body;
    body = JSON.stringify(se_UpdateBucketBundleRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateBucketBundleCommand = se_UpdateBucketBundleCommand;
const se_UpdateContainerServiceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.UpdateContainerService",
    };
    let body;
    body = JSON.stringify(se_UpdateContainerServiceRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateContainerServiceCommand = se_UpdateContainerServiceCommand;
const se_UpdateDistributionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.UpdateDistribution",
    };
    let body;
    body = JSON.stringify(se_UpdateDistributionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateDistributionCommand = se_UpdateDistributionCommand;
const se_UpdateDistributionBundleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.UpdateDistributionBundle",
    };
    let body;
    body = JSON.stringify(se_UpdateDistributionBundleRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateDistributionBundleCommand = se_UpdateDistributionBundleCommand;
const se_UpdateDomainEntryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.UpdateDomainEntry",
    };
    let body;
    body = JSON.stringify(se_UpdateDomainEntryRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateDomainEntryCommand = se_UpdateDomainEntryCommand;
const se_UpdateInstanceMetadataOptionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.UpdateInstanceMetadataOptions",
    };
    let body;
    body = JSON.stringify(se_UpdateInstanceMetadataOptionsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateInstanceMetadataOptionsCommand = se_UpdateInstanceMetadataOptionsCommand;
const se_UpdateLoadBalancerAttributeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.UpdateLoadBalancerAttribute",
    };
    let body;
    body = JSON.stringify(se_UpdateLoadBalancerAttributeRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateLoadBalancerAttributeCommand = se_UpdateLoadBalancerAttributeCommand;
const se_UpdateRelationalDatabaseCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.UpdateRelationalDatabase",
    };
    let body;
    body = JSON.stringify(se_UpdateRelationalDatabaseRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateRelationalDatabaseCommand = se_UpdateRelationalDatabaseCommand;
const se_UpdateRelationalDatabaseParametersCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "Lightsail_20161128.UpdateRelationalDatabaseParameters",
    };
    let body;
    body = JSON.stringify(se_UpdateRelationalDatabaseParametersRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_UpdateRelationalDatabaseParametersCommand = se_UpdateRelationalDatabaseParametersCommand;
const de_AllocateStaticIpCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AllocateStaticIpCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AllocateStaticIpResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_AllocateStaticIpCommand = de_AllocateStaticIpCommand;
const de_AllocateStaticIpCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_AttachCertificateToDistributionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AttachCertificateToDistributionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AttachCertificateToDistributionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_AttachCertificateToDistributionCommand = de_AttachCertificateToDistributionCommand;
const de_AttachCertificateToDistributionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_AttachDiskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AttachDiskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AttachDiskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_AttachDiskCommand = de_AttachDiskCommand;
const de_AttachDiskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_AttachInstancesToLoadBalancerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AttachInstancesToLoadBalancerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AttachInstancesToLoadBalancerResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_AttachInstancesToLoadBalancerCommand = de_AttachInstancesToLoadBalancerCommand;
const de_AttachInstancesToLoadBalancerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_AttachLoadBalancerTlsCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AttachLoadBalancerTlsCertificateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AttachLoadBalancerTlsCertificateResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_AttachLoadBalancerTlsCertificateCommand = de_AttachLoadBalancerTlsCertificateCommand;
const de_AttachLoadBalancerTlsCertificateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_AttachStaticIpCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AttachStaticIpCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AttachStaticIpResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_AttachStaticIpCommand = de_AttachStaticIpCommand;
const de_AttachStaticIpCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_CloseInstancePublicPortsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CloseInstancePublicPortsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CloseInstancePublicPortsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_CloseInstancePublicPortsCommand = de_CloseInstancePublicPortsCommand;
const de_CloseInstancePublicPortsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_CopySnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CopySnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CopySnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_CopySnapshotCommand = de_CopySnapshotCommand;
const de_CopySnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_CreateBucketCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateBucketCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateBucketResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_CreateBucketCommand = de_CreateBucketCommand;
const de_CreateBucketCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_CreateBucketAccessKeyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateBucketAccessKeyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateBucketAccessKeyResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_CreateBucketAccessKeyCommand = de_CreateBucketAccessKeyCommand;
const de_CreateBucketAccessKeyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_CreateCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateCertificateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateCertificateResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_CreateCertificateCommand = de_CreateCertificateCommand;
const de_CreateCertificateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_CreateCloudFormationStackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateCloudFormationStackCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateCloudFormationStackResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_CreateCloudFormationStackCommand = de_CreateCloudFormationStackCommand;
const de_CreateCloudFormationStackCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_CreateContactMethodCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateContactMethodCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateContactMethodResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_CreateContactMethodCommand = de_CreateContactMethodCommand;
const de_CreateContactMethodCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_CreateContainerServiceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateContainerServiceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateContainerServiceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_CreateContainerServiceCommand = de_CreateContainerServiceCommand;
const de_CreateContainerServiceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_CreateContainerServiceDeploymentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateContainerServiceDeploymentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateContainerServiceDeploymentResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_CreateContainerServiceDeploymentCommand = de_CreateContainerServiceDeploymentCommand;
const de_CreateContainerServiceDeploymentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_CreateContainerServiceRegistryLoginCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateContainerServiceRegistryLoginCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateContainerServiceRegistryLoginResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_CreateContainerServiceRegistryLoginCommand = de_CreateContainerServiceRegistryLoginCommand;
const de_CreateContainerServiceRegistryLoginCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_CreateDiskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDiskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDiskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_CreateDiskCommand = de_CreateDiskCommand;
const de_CreateDiskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_CreateDiskFromSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDiskFromSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDiskFromSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_CreateDiskFromSnapshotCommand = de_CreateDiskFromSnapshotCommand;
const de_CreateDiskFromSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_CreateDiskSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDiskSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDiskSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_CreateDiskSnapshotCommand = de_CreateDiskSnapshotCommand;
const de_CreateDiskSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_CreateDistributionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDistributionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDistributionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_CreateDistributionCommand = de_CreateDistributionCommand;
const de_CreateDistributionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_CreateDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDomainCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDomainResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_CreateDomainCommand = de_CreateDomainCommand;
const de_CreateDomainCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_CreateDomainEntryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateDomainEntryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateDomainEntryResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_CreateDomainEntryCommand = de_CreateDomainEntryCommand;
const de_CreateDomainEntryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_CreateGUISessionAccessDetailsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateGUISessionAccessDetailsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateGUISessionAccessDetailsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_CreateGUISessionAccessDetailsCommand = de_CreateGUISessionAccessDetailsCommand;
const de_CreateGUISessionAccessDetailsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_CreateInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_CreateInstancesCommand = de_CreateInstancesCommand;
const de_CreateInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_CreateInstancesFromSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateInstancesFromSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateInstancesFromSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_CreateInstancesFromSnapshotCommand = de_CreateInstancesFromSnapshotCommand;
const de_CreateInstancesFromSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_CreateInstanceSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateInstanceSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateInstanceSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_CreateInstanceSnapshotCommand = de_CreateInstanceSnapshotCommand;
const de_CreateInstanceSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_CreateKeyPairCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateKeyPairCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateKeyPairResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_CreateKeyPairCommand = de_CreateKeyPairCommand;
const de_CreateKeyPairCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_CreateLoadBalancerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateLoadBalancerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateLoadBalancerResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_CreateLoadBalancerCommand = de_CreateLoadBalancerCommand;
const de_CreateLoadBalancerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_CreateLoadBalancerTlsCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateLoadBalancerTlsCertificateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateLoadBalancerTlsCertificateResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_CreateLoadBalancerTlsCertificateCommand = de_CreateLoadBalancerTlsCertificateCommand;
const de_CreateLoadBalancerTlsCertificateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_CreateRelationalDatabaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateRelationalDatabaseCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateRelationalDatabaseResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_CreateRelationalDatabaseCommand = de_CreateRelationalDatabaseCommand;
const de_CreateRelationalDatabaseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_CreateRelationalDatabaseFromSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateRelationalDatabaseFromSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateRelationalDatabaseFromSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_CreateRelationalDatabaseFromSnapshotCommand = de_CreateRelationalDatabaseFromSnapshotCommand;
const de_CreateRelationalDatabaseFromSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_CreateRelationalDatabaseSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateRelationalDatabaseSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateRelationalDatabaseSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_CreateRelationalDatabaseSnapshotCommand = de_CreateRelationalDatabaseSnapshotCommand;
const de_CreateRelationalDatabaseSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_DeleteAlarmCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteAlarmCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteAlarmResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteAlarmCommand = de_DeleteAlarmCommand;
const de_DeleteAlarmCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_DeleteAutoSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteAutoSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteAutoSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteAutoSnapshotCommand = de_DeleteAutoSnapshotCommand;
const de_DeleteAutoSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_DeleteBucketCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteBucketCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteBucketResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteBucketCommand = de_DeleteBucketCommand;
const de_DeleteBucketCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_DeleteBucketAccessKeyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteBucketAccessKeyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteBucketAccessKeyResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteBucketAccessKeyCommand = de_DeleteBucketAccessKeyCommand;
const de_DeleteBucketAccessKeyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_DeleteCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteCertificateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteCertificateResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteCertificateCommand = de_DeleteCertificateCommand;
const de_DeleteCertificateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_DeleteContactMethodCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteContactMethodCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteContactMethodResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteContactMethodCommand = de_DeleteContactMethodCommand;
const de_DeleteContactMethodCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_DeleteContainerImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteContainerImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteContainerImageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteContainerImageCommand = de_DeleteContainerImageCommand;
const de_DeleteContainerImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_DeleteContainerServiceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteContainerServiceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteContainerServiceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteContainerServiceCommand = de_DeleteContainerServiceCommand;
const de_DeleteContainerServiceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_DeleteDiskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDiskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteDiskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteDiskCommand = de_DeleteDiskCommand;
const de_DeleteDiskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_DeleteDiskSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDiskSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteDiskSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteDiskSnapshotCommand = de_DeleteDiskSnapshotCommand;
const de_DeleteDiskSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_DeleteDistributionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDistributionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteDistributionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteDistributionCommand = de_DeleteDistributionCommand;
const de_DeleteDistributionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_DeleteDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDomainCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteDomainResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteDomainCommand = de_DeleteDomainCommand;
const de_DeleteDomainCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_DeleteDomainEntryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteDomainEntryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteDomainEntryResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteDomainEntryCommand = de_DeleteDomainEntryCommand;
const de_DeleteDomainEntryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_DeleteInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteInstanceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteInstanceCommand = de_DeleteInstanceCommand;
const de_DeleteInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_DeleteInstanceSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteInstanceSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteInstanceSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteInstanceSnapshotCommand = de_DeleteInstanceSnapshotCommand;
const de_DeleteInstanceSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_DeleteKeyPairCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteKeyPairCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteKeyPairResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteKeyPairCommand = de_DeleteKeyPairCommand;
const de_DeleteKeyPairCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_DeleteKnownHostKeysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteKnownHostKeysCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteKnownHostKeysResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteKnownHostKeysCommand = de_DeleteKnownHostKeysCommand;
const de_DeleteKnownHostKeysCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_DeleteLoadBalancerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteLoadBalancerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteLoadBalancerResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteLoadBalancerCommand = de_DeleteLoadBalancerCommand;
const de_DeleteLoadBalancerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_DeleteLoadBalancerTlsCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteLoadBalancerTlsCertificateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteLoadBalancerTlsCertificateResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteLoadBalancerTlsCertificateCommand = de_DeleteLoadBalancerTlsCertificateCommand;
const de_DeleteLoadBalancerTlsCertificateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_DeleteRelationalDatabaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteRelationalDatabaseCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteRelationalDatabaseResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteRelationalDatabaseCommand = de_DeleteRelationalDatabaseCommand;
const de_DeleteRelationalDatabaseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_DeleteRelationalDatabaseSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteRelationalDatabaseSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteRelationalDatabaseSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DeleteRelationalDatabaseSnapshotCommand = de_DeleteRelationalDatabaseSnapshotCommand;
const de_DeleteRelationalDatabaseSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_DetachCertificateFromDistributionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DetachCertificateFromDistributionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DetachCertificateFromDistributionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DetachCertificateFromDistributionCommand = de_DetachCertificateFromDistributionCommand;
const de_DetachCertificateFromDistributionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_DetachDiskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DetachDiskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DetachDiskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DetachDiskCommand = de_DetachDiskCommand;
const de_DetachDiskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_DetachInstancesFromLoadBalancerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DetachInstancesFromLoadBalancerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DetachInstancesFromLoadBalancerResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DetachInstancesFromLoadBalancerCommand = de_DetachInstancesFromLoadBalancerCommand;
const de_DetachInstancesFromLoadBalancerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_DetachStaticIpCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DetachStaticIpCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DetachStaticIpResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DetachStaticIpCommand = de_DetachStaticIpCommand;
const de_DetachStaticIpCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_DisableAddOnCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisableAddOnCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DisableAddOnResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DisableAddOnCommand = de_DisableAddOnCommand;
const de_DisableAddOnCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_DownloadDefaultKeyPairCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DownloadDefaultKeyPairCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DownloadDefaultKeyPairResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_DownloadDefaultKeyPairCommand = de_DownloadDefaultKeyPairCommand;
const de_DownloadDefaultKeyPairCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_EnableAddOnCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_EnableAddOnCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EnableAddOnResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_EnableAddOnCommand = de_EnableAddOnCommand;
const de_EnableAddOnCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_ExportSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ExportSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ExportSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_ExportSnapshotCommand = de_ExportSnapshotCommand;
const de_ExportSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetActiveNamesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetActiveNamesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetActiveNamesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetActiveNamesCommand = de_GetActiveNamesCommand;
const de_GetActiveNamesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetAlarmsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetAlarmsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAlarmsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetAlarmsCommand = de_GetAlarmsCommand;
const de_GetAlarmsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetAutoSnapshotsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetAutoSnapshotsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAutoSnapshotsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetAutoSnapshotsCommand = de_GetAutoSnapshotsCommand;
const de_GetAutoSnapshotsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetBlueprintsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetBlueprintsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetBlueprintsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetBlueprintsCommand = de_GetBlueprintsCommand;
const de_GetBlueprintsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetBucketAccessKeysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetBucketAccessKeysCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetBucketAccessKeysResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetBucketAccessKeysCommand = de_GetBucketAccessKeysCommand;
const de_GetBucketAccessKeysCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetBucketBundlesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetBucketBundlesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetBucketBundlesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetBucketBundlesCommand = de_GetBucketBundlesCommand;
const de_GetBucketBundlesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetBucketMetricDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetBucketMetricDataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetBucketMetricDataResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetBucketMetricDataCommand = de_GetBucketMetricDataCommand;
const de_GetBucketMetricDataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetBucketsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetBucketsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetBucketsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetBucketsCommand = de_GetBucketsCommand;
const de_GetBucketsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetBundlesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetBundlesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetBundlesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetBundlesCommand = de_GetBundlesCommand;
const de_GetBundlesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetCertificatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetCertificatesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetCertificatesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetCertificatesCommand = de_GetCertificatesCommand;
const de_GetCertificatesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetCloudFormationStackRecordsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetCloudFormationStackRecordsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetCloudFormationStackRecordsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetCloudFormationStackRecordsCommand = de_GetCloudFormationStackRecordsCommand;
const de_GetCloudFormationStackRecordsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetContactMethodsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetContactMethodsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetContactMethodsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetContactMethodsCommand = de_GetContactMethodsCommand;
const de_GetContactMethodsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetContainerAPIMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetContainerAPIMetadataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetContainerAPIMetadataResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetContainerAPIMetadataCommand = de_GetContainerAPIMetadataCommand;
const de_GetContainerAPIMetadataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetContainerImagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetContainerImagesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetContainerImagesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetContainerImagesCommand = de_GetContainerImagesCommand;
const de_GetContainerImagesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetContainerLogCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetContainerLogCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetContainerLogResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetContainerLogCommand = de_GetContainerLogCommand;
const de_GetContainerLogCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetContainerServiceDeploymentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetContainerServiceDeploymentsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetContainerServiceDeploymentsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetContainerServiceDeploymentsCommand = de_GetContainerServiceDeploymentsCommand;
const de_GetContainerServiceDeploymentsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetContainerServiceMetricDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetContainerServiceMetricDataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetContainerServiceMetricDataResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetContainerServiceMetricDataCommand = de_GetContainerServiceMetricDataCommand;
const de_GetContainerServiceMetricDataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetContainerServicePowersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetContainerServicePowersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetContainerServicePowersResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetContainerServicePowersCommand = de_GetContainerServicePowersCommand;
const de_GetContainerServicePowersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetContainerServicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetContainerServicesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ContainerServicesListResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetContainerServicesCommand = de_GetContainerServicesCommand;
const de_GetContainerServicesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetCostEstimateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetCostEstimateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetCostEstimateResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetCostEstimateCommand = de_GetCostEstimateCommand;
const de_GetCostEstimateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetDiskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDiskCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDiskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetDiskCommand = de_GetDiskCommand;
const de_GetDiskCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetDisksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDisksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDisksResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetDisksCommand = de_GetDisksCommand;
const de_GetDisksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetDiskSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDiskSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDiskSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetDiskSnapshotCommand = de_GetDiskSnapshotCommand;
const de_GetDiskSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetDiskSnapshotsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDiskSnapshotsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDiskSnapshotsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetDiskSnapshotsCommand = de_GetDiskSnapshotsCommand;
const de_GetDiskSnapshotsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetDistributionBundlesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDistributionBundlesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDistributionBundlesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetDistributionBundlesCommand = de_GetDistributionBundlesCommand;
const de_GetDistributionBundlesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetDistributionLatestCacheResetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDistributionLatestCacheResetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDistributionLatestCacheResetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetDistributionLatestCacheResetCommand = de_GetDistributionLatestCacheResetCommand;
const de_GetDistributionLatestCacheResetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetDistributionMetricDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDistributionMetricDataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDistributionMetricDataResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetDistributionMetricDataCommand = de_GetDistributionMetricDataCommand;
const de_GetDistributionMetricDataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetDistributionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDistributionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDistributionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetDistributionsCommand = de_GetDistributionsCommand;
const de_GetDistributionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDomainCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDomainResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetDomainCommand = de_GetDomainCommand;
const de_GetDomainCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetDomainsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetDomainsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDomainsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetDomainsCommand = de_GetDomainsCommand;
const de_GetDomainsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetExportSnapshotRecordsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetExportSnapshotRecordsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetExportSnapshotRecordsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetExportSnapshotRecordsCommand = de_GetExportSnapshotRecordsCommand;
const de_GetExportSnapshotRecordsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetInstanceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetInstanceCommand = de_GetInstanceCommand;
const de_GetInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetInstanceAccessDetailsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetInstanceAccessDetailsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetInstanceAccessDetailsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetInstanceAccessDetailsCommand = de_GetInstanceAccessDetailsCommand;
const de_GetInstanceAccessDetailsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetInstanceMetricDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetInstanceMetricDataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetInstanceMetricDataResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetInstanceMetricDataCommand = de_GetInstanceMetricDataCommand;
const de_GetInstanceMetricDataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetInstancePortStatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetInstancePortStatesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetInstancePortStatesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetInstancePortStatesCommand = de_GetInstancePortStatesCommand;
const de_GetInstancePortStatesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetInstancesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetInstancesCommand = de_GetInstancesCommand;
const de_GetInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetInstanceSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetInstanceSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetInstanceSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetInstanceSnapshotCommand = de_GetInstanceSnapshotCommand;
const de_GetInstanceSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetInstanceSnapshotsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetInstanceSnapshotsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetInstanceSnapshotsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetInstanceSnapshotsCommand = de_GetInstanceSnapshotsCommand;
const de_GetInstanceSnapshotsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetInstanceStateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetInstanceStateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetInstanceStateResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetInstanceStateCommand = de_GetInstanceStateCommand;
const de_GetInstanceStateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetKeyPairCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetKeyPairCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetKeyPairResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetKeyPairCommand = de_GetKeyPairCommand;
const de_GetKeyPairCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetKeyPairsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetKeyPairsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetKeyPairsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetKeyPairsCommand = de_GetKeyPairsCommand;
const de_GetKeyPairsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetLoadBalancerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetLoadBalancerCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetLoadBalancerResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetLoadBalancerCommand = de_GetLoadBalancerCommand;
const de_GetLoadBalancerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetLoadBalancerMetricDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetLoadBalancerMetricDataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetLoadBalancerMetricDataResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetLoadBalancerMetricDataCommand = de_GetLoadBalancerMetricDataCommand;
const de_GetLoadBalancerMetricDataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetLoadBalancersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetLoadBalancersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetLoadBalancersResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetLoadBalancersCommand = de_GetLoadBalancersCommand;
const de_GetLoadBalancersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetLoadBalancerTlsCertificatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetLoadBalancerTlsCertificatesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetLoadBalancerTlsCertificatesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetLoadBalancerTlsCertificatesCommand = de_GetLoadBalancerTlsCertificatesCommand;
const de_GetLoadBalancerTlsCertificatesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetLoadBalancerTlsPoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetLoadBalancerTlsPoliciesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetLoadBalancerTlsPoliciesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetLoadBalancerTlsPoliciesCommand = de_GetLoadBalancerTlsPoliciesCommand;
const de_GetLoadBalancerTlsPoliciesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetOperationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetOperationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetOperationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetOperationCommand = de_GetOperationCommand;
const de_GetOperationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetOperationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetOperationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetOperationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetOperationsCommand = de_GetOperationsCommand;
const de_GetOperationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetOperationsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetOperationsForResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetOperationsForResourceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetOperationsForResourceCommand = de_GetOperationsForResourceCommand;
const de_GetOperationsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetRegionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRegionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRegionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetRegionsCommand = de_GetRegionsCommand;
const de_GetRegionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetRelationalDatabaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRelationalDatabaseCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRelationalDatabaseResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetRelationalDatabaseCommand = de_GetRelationalDatabaseCommand;
const de_GetRelationalDatabaseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetRelationalDatabaseBlueprintsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRelationalDatabaseBlueprintsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRelationalDatabaseBlueprintsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetRelationalDatabaseBlueprintsCommand = de_GetRelationalDatabaseBlueprintsCommand;
const de_GetRelationalDatabaseBlueprintsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetRelationalDatabaseBundlesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRelationalDatabaseBundlesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRelationalDatabaseBundlesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetRelationalDatabaseBundlesCommand = de_GetRelationalDatabaseBundlesCommand;
const de_GetRelationalDatabaseBundlesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetRelationalDatabaseEventsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRelationalDatabaseEventsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRelationalDatabaseEventsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetRelationalDatabaseEventsCommand = de_GetRelationalDatabaseEventsCommand;
const de_GetRelationalDatabaseEventsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetRelationalDatabaseLogEventsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRelationalDatabaseLogEventsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRelationalDatabaseLogEventsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetRelationalDatabaseLogEventsCommand = de_GetRelationalDatabaseLogEventsCommand;
const de_GetRelationalDatabaseLogEventsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetRelationalDatabaseLogStreamsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRelationalDatabaseLogStreamsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRelationalDatabaseLogStreamsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetRelationalDatabaseLogStreamsCommand = de_GetRelationalDatabaseLogStreamsCommand;
const de_GetRelationalDatabaseLogStreamsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetRelationalDatabaseMasterUserPasswordCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRelationalDatabaseMasterUserPasswordCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRelationalDatabaseMasterUserPasswordResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetRelationalDatabaseMasterUserPasswordCommand = de_GetRelationalDatabaseMasterUserPasswordCommand;
const de_GetRelationalDatabaseMasterUserPasswordCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetRelationalDatabaseMetricDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRelationalDatabaseMetricDataCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRelationalDatabaseMetricDataResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetRelationalDatabaseMetricDataCommand = de_GetRelationalDatabaseMetricDataCommand;
const de_GetRelationalDatabaseMetricDataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetRelationalDatabaseParametersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRelationalDatabaseParametersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRelationalDatabaseParametersResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetRelationalDatabaseParametersCommand = de_GetRelationalDatabaseParametersCommand;
const de_GetRelationalDatabaseParametersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetRelationalDatabasesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRelationalDatabasesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRelationalDatabasesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetRelationalDatabasesCommand = de_GetRelationalDatabasesCommand;
const de_GetRelationalDatabasesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetRelationalDatabaseSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRelationalDatabaseSnapshotCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRelationalDatabaseSnapshotResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetRelationalDatabaseSnapshotCommand = de_GetRelationalDatabaseSnapshotCommand;
const de_GetRelationalDatabaseSnapshotCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetRelationalDatabaseSnapshotsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRelationalDatabaseSnapshotsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRelationalDatabaseSnapshotsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetRelationalDatabaseSnapshotsCommand = de_GetRelationalDatabaseSnapshotsCommand;
const de_GetRelationalDatabaseSnapshotsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetStaticIpCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetStaticIpCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetStaticIpResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetStaticIpCommand = de_GetStaticIpCommand;
const de_GetStaticIpCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_GetStaticIpsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetStaticIpsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetStaticIpsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_GetStaticIpsCommand = de_GetStaticIpsCommand;
const de_GetStaticIpsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_ImportKeyPairCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ImportKeyPairCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ImportKeyPairResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_ImportKeyPairCommand = de_ImportKeyPairCommand;
const de_ImportKeyPairCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_IsVpcPeeredCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_IsVpcPeeredCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_IsVpcPeeredResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_IsVpcPeeredCommand = de_IsVpcPeeredCommand;
const de_IsVpcPeeredCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_OpenInstancePublicPortsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_OpenInstancePublicPortsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_OpenInstancePublicPortsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_OpenInstancePublicPortsCommand = de_OpenInstancePublicPortsCommand;
const de_OpenInstancePublicPortsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_PeerVpcCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PeerVpcCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PeerVpcResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_PeerVpcCommand = de_PeerVpcCommand;
const de_PeerVpcCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_PutAlarmCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutAlarmCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutAlarmResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_PutAlarmCommand = de_PutAlarmCommand;
const de_PutAlarmCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_PutInstancePublicPortsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_PutInstancePublicPortsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutInstancePublicPortsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_PutInstancePublicPortsCommand = de_PutInstancePublicPortsCommand;
const de_PutInstancePublicPortsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_RebootInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RebootInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RebootInstanceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_RebootInstanceCommand = de_RebootInstanceCommand;
const de_RebootInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_RebootRelationalDatabaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RebootRelationalDatabaseCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RebootRelationalDatabaseResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_RebootRelationalDatabaseCommand = de_RebootRelationalDatabaseCommand;
const de_RebootRelationalDatabaseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_RegisterContainerImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RegisterContainerImageCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RegisterContainerImageResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_RegisterContainerImageCommand = de_RegisterContainerImageCommand;
const de_RegisterContainerImageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_ReleaseStaticIpCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ReleaseStaticIpCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ReleaseStaticIpResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_ReleaseStaticIpCommand = de_ReleaseStaticIpCommand;
const de_ReleaseStaticIpCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_ResetDistributionCacheCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ResetDistributionCacheCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ResetDistributionCacheResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_ResetDistributionCacheCommand = de_ResetDistributionCacheCommand;
const de_ResetDistributionCacheCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_SendContactMethodVerificationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_SendContactMethodVerificationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SendContactMethodVerificationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_SendContactMethodVerificationCommand = de_SendContactMethodVerificationCommand;
const de_SendContactMethodVerificationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_SetIpAddressTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_SetIpAddressTypeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SetIpAddressTypeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_SetIpAddressTypeCommand = de_SetIpAddressTypeCommand;
const de_SetIpAddressTypeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_SetResourceAccessForBucketCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_SetResourceAccessForBucketCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SetResourceAccessForBucketResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_SetResourceAccessForBucketCommand = de_SetResourceAccessForBucketCommand;
const de_SetResourceAccessForBucketCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_StartGUISessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartGUISessionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartGUISessionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_StartGUISessionCommand = de_StartGUISessionCommand;
const de_StartGUISessionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_StartInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartInstanceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_StartInstanceCommand = de_StartInstanceCommand;
const de_StartInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_StartRelationalDatabaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StartRelationalDatabaseCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartRelationalDatabaseResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_StartRelationalDatabaseCommand = de_StartRelationalDatabaseCommand;
const de_StartRelationalDatabaseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_StopGUISessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopGUISessionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StopGUISessionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_StopGUISessionCommand = de_StopGUISessionCommand;
const de_StopGUISessionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_StopInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StopInstanceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_StopInstanceCommand = de_StopInstanceCommand;
const de_StopInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_StopRelationalDatabaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_StopRelationalDatabaseCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StopRelationalDatabaseResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_StopRelationalDatabaseCommand = de_StopRelationalDatabaseCommand;
const de_StopRelationalDatabaseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_TagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_TagResourceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_TagResourceCommand = de_TagResourceCommand;
const de_TagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_TestAlarmCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_TestAlarmCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_TestAlarmResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_TestAlarmCommand = de_TestAlarmCommand;
const de_TestAlarmCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_UnpeerVpcCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UnpeerVpcCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UnpeerVpcResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_UnpeerVpcCommand = de_UnpeerVpcCommand;
const de_UnpeerVpcCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UntagResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UntagResourceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_UntagResourceCommand = de_UntagResourceCommand;
const de_UntagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_UpdateBucketCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateBucketCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateBucketResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_UpdateBucketCommand = de_UpdateBucketCommand;
const de_UpdateBucketCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_UpdateBucketBundleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateBucketBundleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateBucketBundleResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_UpdateBucketBundleCommand = de_UpdateBucketBundleCommand;
const de_UpdateBucketBundleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_UpdateContainerServiceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateContainerServiceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateContainerServiceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_UpdateContainerServiceCommand = de_UpdateContainerServiceCommand;
const de_UpdateContainerServiceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_UpdateDistributionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateDistributionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateDistributionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_UpdateDistributionCommand = de_UpdateDistributionCommand;
const de_UpdateDistributionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_UpdateDistributionBundleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateDistributionBundleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateDistributionBundleResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_UpdateDistributionBundleCommand = de_UpdateDistributionBundleCommand;
const de_UpdateDistributionBundleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_UpdateDomainEntryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateDomainEntryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateDomainEntryResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_UpdateDomainEntryCommand = de_UpdateDomainEntryCommand;
const de_UpdateDomainEntryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_UpdateInstanceMetadataOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateInstanceMetadataOptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateInstanceMetadataOptionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_UpdateInstanceMetadataOptionsCommand = de_UpdateInstanceMetadataOptionsCommand;
const de_UpdateInstanceMetadataOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_UpdateLoadBalancerAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateLoadBalancerAttributeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateLoadBalancerAttributeResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_UpdateLoadBalancerAttributeCommand = de_UpdateLoadBalancerAttributeCommand;
const de_UpdateLoadBalancerAttributeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_UpdateRelationalDatabaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateRelationalDatabaseCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateRelationalDatabaseResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_UpdateRelationalDatabaseCommand = de_UpdateRelationalDatabaseCommand;
const de_UpdateRelationalDatabaseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_UpdateRelationalDatabaseParametersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateRelationalDatabaseParametersCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateRelationalDatabaseParametersResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.de_UpdateRelationalDatabaseParametersCommand = de_UpdateRelationalDatabaseParametersCommand;
const de_UpdateRelationalDatabaseParametersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.lightsail#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "AccountSetupInProgressException":
        case "com.amazonaws.lightsail#AccountSetupInProgressException":
            throw await de_AccountSetupInProgressExceptionRes(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.lightsail#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.lightsail#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "OperationFailureException":
        case "com.amazonaws.lightsail#OperationFailureException":
            throw await de_OperationFailureExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.lightsail#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "UnauthenticatedException":
        case "com.amazonaws.lightsail#UnauthenticatedException":
            throw await de_UnauthenticatedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: LightsailServiceException_1.LightsailServiceException,
                errorCode,
            });
    }
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_AccessDeniedException(body, context);
    const exception = new models_0_1.AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_AccountSetupInProgressExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_AccountSetupInProgressException(body, context);
    const exception = new models_0_1.AccountSetupInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InvalidInputExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidInputException(body, context);
    const exception = new models_0_1.InvalidInputException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_NotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_NotFoundException(body, context);
    const exception = new models_0_1.NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_OperationFailureExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_OperationFailureException(body, context);
    const exception = new models_0_1.OperationFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ServiceExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ServiceException(body, context);
    const exception = new models_0_1.ServiceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_UnauthenticatedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_UnauthenticatedException(body, context);
    const exception = new models_0_1.UnauthenticatedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const se_AccessRules = (input, context) => {
    return {
        ...(input.allowPublicOverrides != null && { allowPublicOverrides: input.allowPublicOverrides }),
        ...(input.getObject != null && { getObject: input.getObject }),
    };
};
const se_AddOnRequest = (input, context) => {
    return {
        ...(input.addOnType != null && { addOnType: input.addOnType }),
        ...(input.autoSnapshotAddOnRequest != null && {
            autoSnapshotAddOnRequest: se_AutoSnapshotAddOnRequest(input.autoSnapshotAddOnRequest, context),
        }),
        ...(input.stopInstanceOnIdleRequest != null && {
            stopInstanceOnIdleRequest: se_StopInstanceOnIdleRequest(input.stopInstanceOnIdleRequest, context),
        }),
    };
};
const se_AddOnRequestList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AddOnRequest(entry, context);
    });
};
const se_AllocateStaticIpRequest = (input, context) => {
    return {
        ...(input.staticIpName != null && { staticIpName: input.staticIpName }),
    };
};
const se_AttachCertificateToDistributionRequest = (input, context) => {
    return {
        ...(input.certificateName != null && { certificateName: input.certificateName }),
        ...(input.distributionName != null && { distributionName: input.distributionName }),
    };
};
const se_AttachDiskRequest = (input, context) => {
    return {
        ...(input.autoMounting != null && { autoMounting: input.autoMounting }),
        ...(input.diskName != null && { diskName: input.diskName }),
        ...(input.diskPath != null && { diskPath: input.diskPath }),
        ...(input.instanceName != null && { instanceName: input.instanceName }),
    };
};
const se_AttachedDiskMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_DiskMapList(value, context);
        return acc;
    }, {});
};
const se_AttachInstancesToLoadBalancerRequest = (input, context) => {
    return {
        ...(input.instanceNames != null && { instanceNames: se_ResourceNameList(input.instanceNames, context) }),
        ...(input.loadBalancerName != null && { loadBalancerName: input.loadBalancerName }),
    };
};
const se_AttachLoadBalancerTlsCertificateRequest = (input, context) => {
    return {
        ...(input.certificateName != null && { certificateName: input.certificateName }),
        ...(input.loadBalancerName != null && { loadBalancerName: input.loadBalancerName }),
    };
};
const se_AttachStaticIpRequest = (input, context) => {
    return {
        ...(input.instanceName != null && { instanceName: input.instanceName }),
        ...(input.staticIpName != null && { staticIpName: input.staticIpName }),
    };
};
const se_AutoSnapshotAddOnRequest = (input, context) => {
    return {
        ...(input.snapshotTimeOfDay != null && { snapshotTimeOfDay: input.snapshotTimeOfDay }),
    };
};
const se_BucketAccessLogConfig = (input, context) => {
    return {
        ...(input.destination != null && { destination: input.destination }),
        ...(input.enabled != null && { enabled: input.enabled }),
        ...(input.prefix != null && { prefix: input.prefix }),
    };
};
const se_CacheBehavior = (input, context) => {
    return {
        ...(input.behavior != null && { behavior: input.behavior }),
    };
};
const se_CacheBehaviorList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_CacheBehaviorPerPath(entry, context);
    });
};
const se_CacheBehaviorPerPath = (input, context) => {
    return {
        ...(input.behavior != null && { behavior: input.behavior }),
        ...(input.path != null && { path: input.path }),
    };
};
const se_CacheSettings = (input, context) => {
    return {
        ...(input.allowedHTTPMethods != null && { allowedHTTPMethods: input.allowedHTTPMethods }),
        ...(input.cachedHTTPMethods != null && { cachedHTTPMethods: input.cachedHTTPMethods }),
        ...(input.defaultTTL != null && { defaultTTL: input.defaultTTL }),
        ...(input.forwardedCookies != null && { forwardedCookies: se_CookieObject(input.forwardedCookies, context) }),
        ...(input.forwardedHeaders != null && { forwardedHeaders: se_HeaderObject(input.forwardedHeaders, context) }),
        ...(input.forwardedQueryStrings != null && {
            forwardedQueryStrings: se_QueryStringObject(input.forwardedQueryStrings, context),
        }),
        ...(input.maximumTTL != null && { maximumTTL: input.maximumTTL }),
        ...(input.minimumTTL != null && { minimumTTL: input.minimumTTL }),
    };
};
const se_CertificateStatusList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_CloseInstancePublicPortsRequest = (input, context) => {
    return {
        ...(input.instanceName != null && { instanceName: input.instanceName }),
        ...(input.portInfo != null && { portInfo: se_PortInfo(input.portInfo, context) }),
    };
};
const se_ContactProtocolsList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_Container = (input, context) => {
    return {
        ...(input.command != null && { command: se_StringList(input.command, context) }),
        ...(input.environment != null && { environment: se_Environment(input.environment, context) }),
        ...(input.image != null && { image: input.image }),
        ...(input.ports != null && { ports: se_PortMap(input.ports, context) }),
    };
};
const se_ContainerMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_Container(value, context);
        return acc;
    }, {});
};
const se_ContainerServiceDeploymentRequest = (input, context) => {
    return {
        ...(input.containers != null && { containers: se_ContainerMap(input.containers, context) }),
        ...(input.publicEndpoint != null && { publicEndpoint: se_EndpointRequest(input.publicEndpoint, context) }),
    };
};
const se_ContainerServiceECRImagePullerRoleRequest = (input, context) => {
    return {
        ...(input.isActive != null && { isActive: input.isActive }),
    };
};
const se_ContainerServiceHealthCheckConfig = (input, context) => {
    return {
        ...(input.healthyThreshold != null && { healthyThreshold: input.healthyThreshold }),
        ...(input.intervalSeconds != null && { intervalSeconds: input.intervalSeconds }),
        ...(input.path != null && { path: input.path }),
        ...(input.successCodes != null && { successCodes: input.successCodes }),
        ...(input.timeoutSeconds != null && { timeoutSeconds: input.timeoutSeconds }),
        ...(input.unhealthyThreshold != null && { unhealthyThreshold: input.unhealthyThreshold }),
    };
};
const se_ContainerServicePublicDomains = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_ContainerServicePublicDomainsList(value, context);
        return acc;
    }, {});
};
const se_ContainerServicePublicDomainsList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_CookieObject = (input, context) => {
    return {
        ...(input.cookiesAllowList != null && { cookiesAllowList: se_StringList(input.cookiesAllowList, context) }),
        ...(input.option != null && { option: input.option }),
    };
};
const se_CopySnapshotRequest = (input, context) => {
    return {
        ...(input.restoreDate != null && { restoreDate: input.restoreDate }),
        ...(input.sourceRegion != null && { sourceRegion: input.sourceRegion }),
        ...(input.sourceResourceName != null && { sourceResourceName: input.sourceResourceName }),
        ...(input.sourceSnapshotName != null && { sourceSnapshotName: input.sourceSnapshotName }),
        ...(input.targetSnapshotName != null && { targetSnapshotName: input.targetSnapshotName }),
        ...(input.useLatestRestorableAutoSnapshot != null && {
            useLatestRestorableAutoSnapshot: input.useLatestRestorableAutoSnapshot,
        }),
    };
};
const se_CreateBucketAccessKeyRequest = (input, context) => {
    return {
        ...(input.bucketName != null && { bucketName: input.bucketName }),
    };
};
const se_CreateBucketRequest = (input, context) => {
    return {
        ...(input.bucketName != null && { bucketName: input.bucketName }),
        ...(input.bundleId != null && { bundleId: input.bundleId }),
        ...(input.enableObjectVersioning != null && { enableObjectVersioning: input.enableObjectVersioning }),
        ...(input.tags != null && { tags: se_TagList(input.tags, context) }),
    };
};
const se_CreateCertificateRequest = (input, context) => {
    return {
        ...(input.certificateName != null && { certificateName: input.certificateName }),
        ...(input.domainName != null && { domainName: input.domainName }),
        ...(input.subjectAlternativeNames != null && {
            subjectAlternativeNames: se_SubjectAlternativeNameList(input.subjectAlternativeNames, context),
        }),
        ...(input.tags != null && { tags: se_TagList(input.tags, context) }),
    };
};
const se_CreateCloudFormationStackRequest = (input, context) => {
    return {
        ...(input.instances != null && { instances: se_InstanceEntryList(input.instances, context) }),
    };
};
const se_CreateContactMethodRequest = (input, context) => {
    return {
        ...(input.contactEndpoint != null && { contactEndpoint: input.contactEndpoint }),
        ...(input.protocol != null && { protocol: input.protocol }),
    };
};
const se_CreateContainerServiceDeploymentRequest = (input, context) => {
    return {
        ...(input.containers != null && { containers: se_ContainerMap(input.containers, context) }),
        ...(input.publicEndpoint != null && { publicEndpoint: se_EndpointRequest(input.publicEndpoint, context) }),
        ...(input.serviceName != null && { serviceName: input.serviceName }),
    };
};
const se_CreateContainerServiceRegistryLoginRequest = (input, context) => {
    return {};
};
const se_CreateContainerServiceRequest = (input, context) => {
    return {
        ...(input.deployment != null && { deployment: se_ContainerServiceDeploymentRequest(input.deployment, context) }),
        ...(input.power != null && { power: input.power }),
        ...(input.privateRegistryAccess != null && {
            privateRegistryAccess: se_PrivateRegistryAccessRequest(input.privateRegistryAccess, context),
        }),
        ...(input.publicDomainNames != null && {
            publicDomainNames: se_ContainerServicePublicDomains(input.publicDomainNames, context),
        }),
        ...(input.scale != null && { scale: input.scale }),
        ...(input.serviceName != null && { serviceName: input.serviceName }),
        ...(input.tags != null && { tags: se_TagList(input.tags, context) }),
    };
};
const se_CreateDiskFromSnapshotRequest = (input, context) => {
    return {
        ...(input.addOns != null && { addOns: se_AddOnRequestList(input.addOns, context) }),
        ...(input.availabilityZone != null && { availabilityZone: input.availabilityZone }),
        ...(input.diskName != null && { diskName: input.diskName }),
        ...(input.diskSnapshotName != null && { diskSnapshotName: input.diskSnapshotName }),
        ...(input.restoreDate != null && { restoreDate: input.restoreDate }),
        ...(input.sizeInGb != null && { sizeInGb: input.sizeInGb }),
        ...(input.sourceDiskName != null && { sourceDiskName: input.sourceDiskName }),
        ...(input.tags != null && { tags: se_TagList(input.tags, context) }),
        ...(input.useLatestRestorableAutoSnapshot != null && {
            useLatestRestorableAutoSnapshot: input.useLatestRestorableAutoSnapshot,
        }),
    };
};
const se_CreateDiskRequest = (input, context) => {
    return {
        ...(input.addOns != null && { addOns: se_AddOnRequestList(input.addOns, context) }),
        ...(input.availabilityZone != null && { availabilityZone: input.availabilityZone }),
        ...(input.diskName != null && { diskName: input.diskName }),
        ...(input.sizeInGb != null && { sizeInGb: input.sizeInGb }),
        ...(input.tags != null && { tags: se_TagList(input.tags, context) }),
    };
};
const se_CreateDiskSnapshotRequest = (input, context) => {
    return {
        ...(input.diskName != null && { diskName: input.diskName }),
        ...(input.diskSnapshotName != null && { diskSnapshotName: input.diskSnapshotName }),
        ...(input.instanceName != null && { instanceName: input.instanceName }),
        ...(input.tags != null && { tags: se_TagList(input.tags, context) }),
    };
};
const se_CreateDistributionRequest = (input, context) => {
    return {
        ...(input.bundleId != null && { bundleId: input.bundleId }),
        ...(input.cacheBehaviorSettings != null && {
            cacheBehaviorSettings: se_CacheSettings(input.cacheBehaviorSettings, context),
        }),
        ...(input.cacheBehaviors != null && { cacheBehaviors: se_CacheBehaviorList(input.cacheBehaviors, context) }),
        ...(input.defaultCacheBehavior != null && {
            defaultCacheBehavior: se_CacheBehavior(input.defaultCacheBehavior, context),
        }),
        ...(input.distributionName != null && { distributionName: input.distributionName }),
        ...(input.ipAddressType != null && { ipAddressType: input.ipAddressType }),
        ...(input.origin != null && { origin: se_InputOrigin(input.origin, context) }),
        ...(input.tags != null && { tags: se_TagList(input.tags, context) }),
    };
};
const se_CreateDomainEntryRequest = (input, context) => {
    return {
        ...(input.domainEntry != null && { domainEntry: se_DomainEntry(input.domainEntry, context) }),
        ...(input.domainName != null && { domainName: input.domainName }),
    };
};
const se_CreateDomainRequest = (input, context) => {
    return {
        ...(input.domainName != null && { domainName: input.domainName }),
        ...(input.tags != null && { tags: se_TagList(input.tags, context) }),
    };
};
const se_CreateGUISessionAccessDetailsRequest = (input, context) => {
    return {
        ...(input.resourceName != null && { resourceName: input.resourceName }),
    };
};
const se_CreateInstancesFromSnapshotRequest = (input, context) => {
    return {
        ...(input.addOns != null && { addOns: se_AddOnRequestList(input.addOns, context) }),
        ...(input.attachedDiskMapping != null && {
            attachedDiskMapping: se_AttachedDiskMap(input.attachedDiskMapping, context),
        }),
        ...(input.availabilityZone != null && { availabilityZone: input.availabilityZone }),
        ...(input.bundleId != null && { bundleId: input.bundleId }),
        ...(input.instanceNames != null && { instanceNames: se_StringList(input.instanceNames, context) }),
        ...(input.instanceSnapshotName != null && { instanceSnapshotName: input.instanceSnapshotName }),
        ...(input.ipAddressType != null && { ipAddressType: input.ipAddressType }),
        ...(input.keyPairName != null && { keyPairName: input.keyPairName }),
        ...(input.restoreDate != null && { restoreDate: input.restoreDate }),
        ...(input.sourceInstanceName != null && { sourceInstanceName: input.sourceInstanceName }),
        ...(input.tags != null && { tags: se_TagList(input.tags, context) }),
        ...(input.useLatestRestorableAutoSnapshot != null && {
            useLatestRestorableAutoSnapshot: input.useLatestRestorableAutoSnapshot,
        }),
        ...(input.userData != null && { userData: input.userData }),
    };
};
const se_CreateInstanceSnapshotRequest = (input, context) => {
    return {
        ...(input.instanceName != null && { instanceName: input.instanceName }),
        ...(input.instanceSnapshotName != null && { instanceSnapshotName: input.instanceSnapshotName }),
        ...(input.tags != null && { tags: se_TagList(input.tags, context) }),
    };
};
const se_CreateInstancesRequest = (input, context) => {
    return {
        ...(input.addOns != null && { addOns: se_AddOnRequestList(input.addOns, context) }),
        ...(input.availabilityZone != null && { availabilityZone: input.availabilityZone }),
        ...(input.blueprintId != null && { blueprintId: input.blueprintId }),
        ...(input.bundleId != null && { bundleId: input.bundleId }),
        ...(input.customImageName != null && { customImageName: input.customImageName }),
        ...(input.instanceNames != null && { instanceNames: se_StringList(input.instanceNames, context) }),
        ...(input.ipAddressType != null && { ipAddressType: input.ipAddressType }),
        ...(input.keyPairName != null && { keyPairName: input.keyPairName }),
        ...(input.tags != null && { tags: se_TagList(input.tags, context) }),
        ...(input.userData != null && { userData: input.userData }),
    };
};
const se_CreateKeyPairRequest = (input, context) => {
    return {
        ...(input.keyPairName != null && { keyPairName: input.keyPairName }),
        ...(input.tags != null && { tags: se_TagList(input.tags, context) }),
    };
};
const se_CreateLoadBalancerRequest = (input, context) => {
    return {
        ...(input.certificateAlternativeNames != null && {
            certificateAlternativeNames: se_DomainNameList(input.certificateAlternativeNames, context),
        }),
        ...(input.certificateDomainName != null && { certificateDomainName: input.certificateDomainName }),
        ...(input.certificateName != null && { certificateName: input.certificateName }),
        ...(input.healthCheckPath != null && { healthCheckPath: input.healthCheckPath }),
        ...(input.instancePort != null && { instancePort: input.instancePort }),
        ...(input.ipAddressType != null && { ipAddressType: input.ipAddressType }),
        ...(input.loadBalancerName != null && { loadBalancerName: input.loadBalancerName }),
        ...(input.tags != null && { tags: se_TagList(input.tags, context) }),
        ...(input.tlsPolicyName != null && { tlsPolicyName: input.tlsPolicyName }),
    };
};
const se_CreateLoadBalancerTlsCertificateRequest = (input, context) => {
    return {
        ...(input.certificateAlternativeNames != null && {
            certificateAlternativeNames: se_DomainNameList(input.certificateAlternativeNames, context),
        }),
        ...(input.certificateDomainName != null && { certificateDomainName: input.certificateDomainName }),
        ...(input.certificateName != null && { certificateName: input.certificateName }),
        ...(input.loadBalancerName != null && { loadBalancerName: input.loadBalancerName }),
        ...(input.tags != null && { tags: se_TagList(input.tags, context) }),
    };
};
const se_CreateRelationalDatabaseFromSnapshotRequest = (input, context) => {
    return {
        ...(input.availabilityZone != null && { availabilityZone: input.availabilityZone }),
        ...(input.publiclyAccessible != null && { publiclyAccessible: input.publiclyAccessible }),
        ...(input.relationalDatabaseBundleId != null && { relationalDatabaseBundleId: input.relationalDatabaseBundleId }),
        ...(input.relationalDatabaseName != null && { relationalDatabaseName: input.relationalDatabaseName }),
        ...(input.relationalDatabaseSnapshotName != null && {
            relationalDatabaseSnapshotName: input.relationalDatabaseSnapshotName,
        }),
        ...(input.restoreTime != null && { restoreTime: Math.round(input.restoreTime.getTime() / 1000) }),
        ...(input.sourceRelationalDatabaseName != null && {
            sourceRelationalDatabaseName: input.sourceRelationalDatabaseName,
        }),
        ...(input.tags != null && { tags: se_TagList(input.tags, context) }),
        ...(input.useLatestRestorableTime != null && { useLatestRestorableTime: input.useLatestRestorableTime }),
    };
};
const se_CreateRelationalDatabaseRequest = (input, context) => {
    return {
        ...(input.availabilityZone != null && { availabilityZone: input.availabilityZone }),
        ...(input.masterDatabaseName != null && { masterDatabaseName: input.masterDatabaseName }),
        ...(input.masterUserPassword != null && { masterUserPassword: input.masterUserPassword }),
        ...(input.masterUsername != null && { masterUsername: input.masterUsername }),
        ...(input.preferredBackupWindow != null && { preferredBackupWindow: input.preferredBackupWindow }),
        ...(input.preferredMaintenanceWindow != null && { preferredMaintenanceWindow: input.preferredMaintenanceWindow }),
        ...(input.publiclyAccessible != null && { publiclyAccessible: input.publiclyAccessible }),
        ...(input.relationalDatabaseBlueprintId != null && {
            relationalDatabaseBlueprintId: input.relationalDatabaseBlueprintId,
        }),
        ...(input.relationalDatabaseBundleId != null && { relationalDatabaseBundleId: input.relationalDatabaseBundleId }),
        ...(input.relationalDatabaseName != null && { relationalDatabaseName: input.relationalDatabaseName }),
        ...(input.tags != null && { tags: se_TagList(input.tags, context) }),
    };
};
const se_CreateRelationalDatabaseSnapshotRequest = (input, context) => {
    return {
        ...(input.relationalDatabaseName != null && { relationalDatabaseName: input.relationalDatabaseName }),
        ...(input.relationalDatabaseSnapshotName != null && {
            relationalDatabaseSnapshotName: input.relationalDatabaseSnapshotName,
        }),
        ...(input.tags != null && { tags: se_TagList(input.tags, context) }),
    };
};
const se_DeleteAlarmRequest = (input, context) => {
    return {
        ...(input.alarmName != null && { alarmName: input.alarmName }),
    };
};
const se_DeleteAutoSnapshotRequest = (input, context) => {
    return {
        ...(input.date != null && { date: input.date }),
        ...(input.resourceName != null && { resourceName: input.resourceName }),
    };
};
const se_DeleteBucketAccessKeyRequest = (input, context) => {
    return {
        ...(input.accessKeyId != null && { accessKeyId: input.accessKeyId }),
        ...(input.bucketName != null && { bucketName: input.bucketName }),
    };
};
const se_DeleteBucketRequest = (input, context) => {
    return {
        ...(input.bucketName != null && { bucketName: input.bucketName }),
        ...(input.forceDelete != null && { forceDelete: input.forceDelete }),
    };
};
const se_DeleteCertificateRequest = (input, context) => {
    return {
        ...(input.certificateName != null && { certificateName: input.certificateName }),
    };
};
const se_DeleteContactMethodRequest = (input, context) => {
    return {
        ...(input.protocol != null && { protocol: input.protocol }),
    };
};
const se_DeleteContainerImageRequest = (input, context) => {
    return {
        ...(input.image != null && { image: input.image }),
        ...(input.serviceName != null && { serviceName: input.serviceName }),
    };
};
const se_DeleteContainerServiceRequest = (input, context) => {
    return {
        ...(input.serviceName != null && { serviceName: input.serviceName }),
    };
};
const se_DeleteDiskRequest = (input, context) => {
    return {
        ...(input.diskName != null && { diskName: input.diskName }),
        ...(input.forceDeleteAddOns != null && { forceDeleteAddOns: input.forceDeleteAddOns }),
    };
};
const se_DeleteDiskSnapshotRequest = (input, context) => {
    return {
        ...(input.diskSnapshotName != null && { diskSnapshotName: input.diskSnapshotName }),
    };
};
const se_DeleteDistributionRequest = (input, context) => {
    return {
        ...(input.distributionName != null && { distributionName: input.distributionName }),
    };
};
const se_DeleteDomainEntryRequest = (input, context) => {
    return {
        ...(input.domainEntry != null && { domainEntry: se_DomainEntry(input.domainEntry, context) }),
        ...(input.domainName != null && { domainName: input.domainName }),
    };
};
const se_DeleteDomainRequest = (input, context) => {
    return {
        ...(input.domainName != null && { domainName: input.domainName }),
    };
};
const se_DeleteInstanceRequest = (input, context) => {
    return {
        ...(input.forceDeleteAddOns != null && { forceDeleteAddOns: input.forceDeleteAddOns }),
        ...(input.instanceName != null && { instanceName: input.instanceName }),
    };
};
const se_DeleteInstanceSnapshotRequest = (input, context) => {
    return {
        ...(input.instanceSnapshotName != null && { instanceSnapshotName: input.instanceSnapshotName }),
    };
};
const se_DeleteKeyPairRequest = (input, context) => {
    return {
        ...(input.expectedFingerprint != null && { expectedFingerprint: input.expectedFingerprint }),
        ...(input.keyPairName != null && { keyPairName: input.keyPairName }),
    };
};
const se_DeleteKnownHostKeysRequest = (input, context) => {
    return {
        ...(input.instanceName != null && { instanceName: input.instanceName }),
    };
};
const se_DeleteLoadBalancerRequest = (input, context) => {
    return {
        ...(input.loadBalancerName != null && { loadBalancerName: input.loadBalancerName }),
    };
};
const se_DeleteLoadBalancerTlsCertificateRequest = (input, context) => {
    return {
        ...(input.certificateName != null && { certificateName: input.certificateName }),
        ...(input.force != null && { force: input.force }),
        ...(input.loadBalancerName != null && { loadBalancerName: input.loadBalancerName }),
    };
};
const se_DeleteRelationalDatabaseRequest = (input, context) => {
    return {
        ...(input.finalRelationalDatabaseSnapshotName != null && {
            finalRelationalDatabaseSnapshotName: input.finalRelationalDatabaseSnapshotName,
        }),
        ...(input.relationalDatabaseName != null && { relationalDatabaseName: input.relationalDatabaseName }),
        ...(input.skipFinalSnapshot != null && { skipFinalSnapshot: input.skipFinalSnapshot }),
    };
};
const se_DeleteRelationalDatabaseSnapshotRequest = (input, context) => {
    return {
        ...(input.relationalDatabaseSnapshotName != null && {
            relationalDatabaseSnapshotName: input.relationalDatabaseSnapshotName,
        }),
    };
};
const se_DetachCertificateFromDistributionRequest = (input, context) => {
    return {
        ...(input.distributionName != null && { distributionName: input.distributionName }),
    };
};
const se_DetachDiskRequest = (input, context) => {
    return {
        ...(input.diskName != null && { diskName: input.diskName }),
    };
};
const se_DetachInstancesFromLoadBalancerRequest = (input, context) => {
    return {
        ...(input.instanceNames != null && { instanceNames: se_ResourceNameList(input.instanceNames, context) }),
        ...(input.loadBalancerName != null && { loadBalancerName: input.loadBalancerName }),
    };
};
const se_DetachStaticIpRequest = (input, context) => {
    return {
        ...(input.staticIpName != null && { staticIpName: input.staticIpName }),
    };
};
const se_DisableAddOnRequest = (input, context) => {
    return {
        ...(input.addOnType != null && { addOnType: input.addOnType }),
        ...(input.resourceName != null && { resourceName: input.resourceName }),
    };
};
const se_DiskMap = (input, context) => {
    return {
        ...(input.newDiskName != null && { newDiskName: input.newDiskName }),
        ...(input.originalDiskPath != null && { originalDiskPath: input.originalDiskPath }),
    };
};
const se_DiskMapList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_DiskMap(entry, context);
    });
};
const se_DomainEntry = (input, context) => {
    return {
        ...(input.id != null && { id: input.id }),
        ...(input.isAlias != null && { isAlias: input.isAlias }),
        ...(input.name != null && { name: input.name }),
        ...(input.options != null && { options: se_DomainEntryOptions(input.options, context) }),
        ...(input.target != null && { target: input.target }),
        ...(input.type != null && { type: input.type }),
    };
};
const se_DomainEntryOptions = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = value;
        return acc;
    }, {});
};
const se_DomainNameList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_DownloadDefaultKeyPairRequest = (input, context) => {
    return {};
};
const se_EnableAddOnRequest = (input, context) => {
    return {
        ...(input.addOnRequest != null && { addOnRequest: se_AddOnRequest(input.addOnRequest, context) }),
        ...(input.resourceName != null && { resourceName: input.resourceName }),
    };
};
const se_EndpointRequest = (input, context) => {
    return {
        ...(input.containerName != null && { containerName: input.containerName }),
        ...(input.containerPort != null && { containerPort: input.containerPort }),
        ...(input.healthCheck != null && { healthCheck: se_ContainerServiceHealthCheckConfig(input.healthCheck, context) }),
    };
};
const se_Environment = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = value;
        return acc;
    }, {});
};
const se_ExportSnapshotRequest = (input, context) => {
    return {
        ...(input.sourceSnapshotName != null && { sourceSnapshotName: input.sourceSnapshotName }),
    };
};
const se_GetActiveNamesRequest = (input, context) => {
    return {
        ...(input.pageToken != null && { pageToken: input.pageToken }),
    };
};
const se_GetAlarmsRequest = (input, context) => {
    return {
        ...(input.alarmName != null && { alarmName: input.alarmName }),
        ...(input.monitoredResourceName != null && { monitoredResourceName: input.monitoredResourceName }),
        ...(input.pageToken != null && { pageToken: input.pageToken }),
    };
};
const se_GetAutoSnapshotsRequest = (input, context) => {
    return {
        ...(input.resourceName != null && { resourceName: input.resourceName }),
    };
};
const se_GetBlueprintsRequest = (input, context) => {
    return {
        ...(input.appCategory != null && { appCategory: input.appCategory }),
        ...(input.includeInactive != null && { includeInactive: input.includeInactive }),
        ...(input.pageToken != null && { pageToken: input.pageToken }),
    };
};
const se_GetBucketAccessKeysRequest = (input, context) => {
    return {
        ...(input.bucketName != null && { bucketName: input.bucketName }),
    };
};
const se_GetBucketBundlesRequest = (input, context) => {
    return {
        ...(input.includeInactive != null && { includeInactive: input.includeInactive }),
    };
};
const se_GetBucketMetricDataRequest = (input, context) => {
    return {
        ...(input.bucketName != null && { bucketName: input.bucketName }),
        ...(input.endTime != null && { endTime: Math.round(input.endTime.getTime() / 1000) }),
        ...(input.metricName != null && { metricName: input.metricName }),
        ...(input.period != null && { period: input.period }),
        ...(input.startTime != null && { startTime: Math.round(input.startTime.getTime() / 1000) }),
        ...(input.statistics != null && { statistics: se_MetricStatisticList(input.statistics, context) }),
        ...(input.unit != null && { unit: input.unit }),
    };
};
const se_GetBucketsRequest = (input, context) => {
    return {
        ...(input.bucketName != null && { bucketName: input.bucketName }),
        ...(input.includeConnectedResources != null && { includeConnectedResources: input.includeConnectedResources }),
        ...(input.pageToken != null && { pageToken: input.pageToken }),
    };
};
const se_GetBundlesRequest = (input, context) => {
    return {
        ...(input.appCategory != null && { appCategory: input.appCategory }),
        ...(input.includeInactive != null && { includeInactive: input.includeInactive }),
        ...(input.pageToken != null && { pageToken: input.pageToken }),
    };
};
const se_GetCertificatesRequest = (input, context) => {
    return {
        ...(input.certificateName != null && { certificateName: input.certificateName }),
        ...(input.certificateStatuses != null && {
            certificateStatuses: se_CertificateStatusList(input.certificateStatuses, context),
        }),
        ...(input.includeCertificateDetails != null && { includeCertificateDetails: input.includeCertificateDetails }),
    };
};
const se_GetCloudFormationStackRecordsRequest = (input, context) => {
    return {
        ...(input.pageToken != null && { pageToken: input.pageToken }),
    };
};
const se_GetContactMethodsRequest = (input, context) => {
    return {
        ...(input.protocols != null && { protocols: se_ContactProtocolsList(input.protocols, context) }),
    };
};
const se_GetContainerAPIMetadataRequest = (input, context) => {
    return {};
};
const se_GetContainerImagesRequest = (input, context) => {
    return {
        ...(input.serviceName != null && { serviceName: input.serviceName }),
    };
};
const se_GetContainerLogRequest = (input, context) => {
    return {
        ...(input.containerName != null && { containerName: input.containerName }),
        ...(input.endTime != null && { endTime: Math.round(input.endTime.getTime() / 1000) }),
        ...(input.filterPattern != null && { filterPattern: input.filterPattern }),
        ...(input.pageToken != null && { pageToken: input.pageToken }),
        ...(input.serviceName != null && { serviceName: input.serviceName }),
        ...(input.startTime != null && { startTime: Math.round(input.startTime.getTime() / 1000) }),
    };
};
const se_GetContainerServiceDeploymentsRequest = (input, context) => {
    return {
        ...(input.serviceName != null && { serviceName: input.serviceName }),
    };
};
const se_GetContainerServiceMetricDataRequest = (input, context) => {
    return {
        ...(input.endTime != null && { endTime: Math.round(input.endTime.getTime() / 1000) }),
        ...(input.metricName != null && { metricName: input.metricName }),
        ...(input.period != null && { period: input.period }),
        ...(input.serviceName != null && { serviceName: input.serviceName }),
        ...(input.startTime != null && { startTime: Math.round(input.startTime.getTime() / 1000) }),
        ...(input.statistics != null && { statistics: se_MetricStatisticList(input.statistics, context) }),
    };
};
const se_GetContainerServicePowersRequest = (input, context) => {
    return {};
};
const se_GetContainerServicesRequest = (input, context) => {
    return {
        ...(input.serviceName != null && { serviceName: input.serviceName }),
    };
};
const se_GetCostEstimateRequest = (input, context) => {
    return {
        ...(input.endTime != null && { endTime: Math.round(input.endTime.getTime() / 1000) }),
        ...(input.resourceName != null && { resourceName: input.resourceName }),
        ...(input.startTime != null && { startTime: Math.round(input.startTime.getTime() / 1000) }),
    };
};
const se_GetDiskRequest = (input, context) => {
    return {
        ...(input.diskName != null && { diskName: input.diskName }),
    };
};
const se_GetDiskSnapshotRequest = (input, context) => {
    return {
        ...(input.diskSnapshotName != null && { diskSnapshotName: input.diskSnapshotName }),
    };
};
const se_GetDiskSnapshotsRequest = (input, context) => {
    return {
        ...(input.pageToken != null && { pageToken: input.pageToken }),
    };
};
const se_GetDisksRequest = (input, context) => {
    return {
        ...(input.pageToken != null && { pageToken: input.pageToken }),
    };
};
const se_GetDistributionBundlesRequest = (input, context) => {
    return {};
};
const se_GetDistributionLatestCacheResetRequest = (input, context) => {
    return {
        ...(input.distributionName != null && { distributionName: input.distributionName }),
    };
};
const se_GetDistributionMetricDataRequest = (input, context) => {
    return {
        ...(input.distributionName != null && { distributionName: input.distributionName }),
        ...(input.endTime != null && { endTime: Math.round(input.endTime.getTime() / 1000) }),
        ...(input.metricName != null && { metricName: input.metricName }),
        ...(input.period != null && { period: input.period }),
        ...(input.startTime != null && { startTime: Math.round(input.startTime.getTime() / 1000) }),
        ...(input.statistics != null && { statistics: se_MetricStatisticList(input.statistics, context) }),
        ...(input.unit != null && { unit: input.unit }),
    };
};
const se_GetDistributionsRequest = (input, context) => {
    return {
        ...(input.distributionName != null && { distributionName: input.distributionName }),
        ...(input.pageToken != null && { pageToken: input.pageToken }),
    };
};
const se_GetDomainRequest = (input, context) => {
    return {
        ...(input.domainName != null && { domainName: input.domainName }),
    };
};
const se_GetDomainsRequest = (input, context) => {
    return {
        ...(input.pageToken != null && { pageToken: input.pageToken }),
    };
};
const se_GetExportSnapshotRecordsRequest = (input, context) => {
    return {
        ...(input.pageToken != null && { pageToken: input.pageToken }),
    };
};
const se_GetInstanceAccessDetailsRequest = (input, context) => {
    return {
        ...(input.instanceName != null && { instanceName: input.instanceName }),
        ...(input.protocol != null && { protocol: input.protocol }),
    };
};
const se_GetInstanceMetricDataRequest = (input, context) => {
    return {
        ...(input.endTime != null && { endTime: Math.round(input.endTime.getTime() / 1000) }),
        ...(input.instanceName != null && { instanceName: input.instanceName }),
        ...(input.metricName != null && { metricName: input.metricName }),
        ...(input.period != null && { period: input.period }),
        ...(input.startTime != null && { startTime: Math.round(input.startTime.getTime() / 1000) }),
        ...(input.statistics != null && { statistics: se_MetricStatisticList(input.statistics, context) }),
        ...(input.unit != null && { unit: input.unit }),
    };
};
const se_GetInstancePortStatesRequest = (input, context) => {
    return {
        ...(input.instanceName != null && { instanceName: input.instanceName }),
    };
};
const se_GetInstanceRequest = (input, context) => {
    return {
        ...(input.instanceName != null && { instanceName: input.instanceName }),
    };
};
const se_GetInstanceSnapshotRequest = (input, context) => {
    return {
        ...(input.instanceSnapshotName != null && { instanceSnapshotName: input.instanceSnapshotName }),
    };
};
const se_GetInstanceSnapshotsRequest = (input, context) => {
    return {
        ...(input.pageToken != null && { pageToken: input.pageToken }),
    };
};
const se_GetInstancesRequest = (input, context) => {
    return {
        ...(input.pageToken != null && { pageToken: input.pageToken }),
    };
};
const se_GetInstanceStateRequest = (input, context) => {
    return {
        ...(input.instanceName != null && { instanceName: input.instanceName }),
    };
};
const se_GetKeyPairRequest = (input, context) => {
    return {
        ...(input.keyPairName != null && { keyPairName: input.keyPairName }),
    };
};
const se_GetKeyPairsRequest = (input, context) => {
    return {
        ...(input.includeDefaultKeyPair != null && { includeDefaultKeyPair: input.includeDefaultKeyPair }),
        ...(input.pageToken != null && { pageToken: input.pageToken }),
    };
};
const se_GetLoadBalancerMetricDataRequest = (input, context) => {
    return {
        ...(input.endTime != null && { endTime: Math.round(input.endTime.getTime() / 1000) }),
        ...(input.loadBalancerName != null && { loadBalancerName: input.loadBalancerName }),
        ...(input.metricName != null && { metricName: input.metricName }),
        ...(input.period != null && { period: input.period }),
        ...(input.startTime != null && { startTime: Math.round(input.startTime.getTime() / 1000) }),
        ...(input.statistics != null && { statistics: se_MetricStatisticList(input.statistics, context) }),
        ...(input.unit != null && { unit: input.unit }),
    };
};
const se_GetLoadBalancerRequest = (input, context) => {
    return {
        ...(input.loadBalancerName != null && { loadBalancerName: input.loadBalancerName }),
    };
};
const se_GetLoadBalancersRequest = (input, context) => {
    return {
        ...(input.pageToken != null && { pageToken: input.pageToken }),
    };
};
const se_GetLoadBalancerTlsCertificatesRequest = (input, context) => {
    return {
        ...(input.loadBalancerName != null && { loadBalancerName: input.loadBalancerName }),
    };
};
const se_GetLoadBalancerTlsPoliciesRequest = (input, context) => {
    return {
        ...(input.pageToken != null && { pageToken: input.pageToken }),
    };
};
const se_GetOperationRequest = (input, context) => {
    return {
        ...(input.operationId != null && { operationId: input.operationId }),
    };
};
const se_GetOperationsForResourceRequest = (input, context) => {
    return {
        ...(input.pageToken != null && { pageToken: input.pageToken }),
        ...(input.resourceName != null && { resourceName: input.resourceName }),
    };
};
const se_GetOperationsRequest = (input, context) => {
    return {
        ...(input.pageToken != null && { pageToken: input.pageToken }),
    };
};
const se_GetRegionsRequest = (input, context) => {
    return {
        ...(input.includeAvailabilityZones != null && { includeAvailabilityZones: input.includeAvailabilityZones }),
        ...(input.includeRelationalDatabaseAvailabilityZones != null && {
            includeRelationalDatabaseAvailabilityZones: input.includeRelationalDatabaseAvailabilityZones,
        }),
    };
};
const se_GetRelationalDatabaseBlueprintsRequest = (input, context) => {
    return {
        ...(input.pageToken != null && { pageToken: input.pageToken }),
    };
};
const se_GetRelationalDatabaseBundlesRequest = (input, context) => {
    return {
        ...(input.includeInactive != null && { includeInactive: input.includeInactive }),
        ...(input.pageToken != null && { pageToken: input.pageToken }),
    };
};
const se_GetRelationalDatabaseEventsRequest = (input, context) => {
    return {
        ...(input.durationInMinutes != null && { durationInMinutes: input.durationInMinutes }),
        ...(input.pageToken != null && { pageToken: input.pageToken }),
        ...(input.relationalDatabaseName != null && { relationalDatabaseName: input.relationalDatabaseName }),
    };
};
const se_GetRelationalDatabaseLogEventsRequest = (input, context) => {
    return {
        ...(input.endTime != null && { endTime: Math.round(input.endTime.getTime() / 1000) }),
        ...(input.logStreamName != null && { logStreamName: input.logStreamName }),
        ...(input.pageToken != null && { pageToken: input.pageToken }),
        ...(input.relationalDatabaseName != null && { relationalDatabaseName: input.relationalDatabaseName }),
        ...(input.startFromHead != null && { startFromHead: input.startFromHead }),
        ...(input.startTime != null && { startTime: Math.round(input.startTime.getTime() / 1000) }),
    };
};
const se_GetRelationalDatabaseLogStreamsRequest = (input, context) => {
    return {
        ...(input.relationalDatabaseName != null && { relationalDatabaseName: input.relationalDatabaseName }),
    };
};
const se_GetRelationalDatabaseMasterUserPasswordRequest = (input, context) => {
    return {
        ...(input.passwordVersion != null && { passwordVersion: input.passwordVersion }),
        ...(input.relationalDatabaseName != null && { relationalDatabaseName: input.relationalDatabaseName }),
    };
};
const se_GetRelationalDatabaseMetricDataRequest = (input, context) => {
    return {
        ...(input.endTime != null && { endTime: Math.round(input.endTime.getTime() / 1000) }),
        ...(input.metricName != null && { metricName: input.metricName }),
        ...(input.period != null && { period: input.period }),
        ...(input.relationalDatabaseName != null && { relationalDatabaseName: input.relationalDatabaseName }),
        ...(input.startTime != null && { startTime: Math.round(input.startTime.getTime() / 1000) }),
        ...(input.statistics != null && { statistics: se_MetricStatisticList(input.statistics, context) }),
        ...(input.unit != null && { unit: input.unit }),
    };
};
const se_GetRelationalDatabaseParametersRequest = (input, context) => {
    return {
        ...(input.pageToken != null && { pageToken: input.pageToken }),
        ...(input.relationalDatabaseName != null && { relationalDatabaseName: input.relationalDatabaseName }),
    };
};
const se_GetRelationalDatabaseRequest = (input, context) => {
    return {
        ...(input.relationalDatabaseName != null && { relationalDatabaseName: input.relationalDatabaseName }),
    };
};
const se_GetRelationalDatabaseSnapshotRequest = (input, context) => {
    return {
        ...(input.relationalDatabaseSnapshotName != null && {
            relationalDatabaseSnapshotName: input.relationalDatabaseSnapshotName,
        }),
    };
};
const se_GetRelationalDatabaseSnapshotsRequest = (input, context) => {
    return {
        ...(input.pageToken != null && { pageToken: input.pageToken }),
    };
};
const se_GetRelationalDatabasesRequest = (input, context) => {
    return {
        ...(input.pageToken != null && { pageToken: input.pageToken }),
    };
};
const se_GetStaticIpRequest = (input, context) => {
    return {
        ...(input.staticIpName != null && { staticIpName: input.staticIpName }),
    };
};
const se_GetStaticIpsRequest = (input, context) => {
    return {
        ...(input.pageToken != null && { pageToken: input.pageToken }),
    };
};
const se_HeaderForwardList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_HeaderObject = (input, context) => {
    return {
        ...(input.headersAllowList != null && { headersAllowList: se_HeaderForwardList(input.headersAllowList, context) }),
        ...(input.option != null && { option: input.option }),
    };
};
const se_ImportKeyPairRequest = (input, context) => {
    return {
        ...(input.keyPairName != null && { keyPairName: input.keyPairName }),
        ...(input.publicKeyBase64 != null && { publicKeyBase64: input.publicKeyBase64 }),
    };
};
const se_InputOrigin = (input, context) => {
    return {
        ...(input.name != null && { name: input.name }),
        ...(input.protocolPolicy != null && { protocolPolicy: input.protocolPolicy }),
        ...(input.regionName != null && { regionName: input.regionName }),
    };
};
const se_InstanceEntry = (input, context) => {
    return {
        ...(input.availabilityZone != null && { availabilityZone: input.availabilityZone }),
        ...(input.instanceType != null && { instanceType: input.instanceType }),
        ...(input.portInfoSource != null && { portInfoSource: input.portInfoSource }),
        ...(input.sourceName != null && { sourceName: input.sourceName }),
        ...(input.userData != null && { userData: input.userData }),
    };
};
const se_InstanceEntryList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_InstanceEntry(entry, context);
    });
};
const se_IsVpcPeeredRequest = (input, context) => {
    return {};
};
const se_MetricStatisticList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_NotificationTriggerList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_OpenInstancePublicPortsRequest = (input, context) => {
    return {
        ...(input.instanceName != null && { instanceName: input.instanceName }),
        ...(input.portInfo != null && { portInfo: se_PortInfo(input.portInfo, context) }),
    };
};
const se_PartnerIdList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_PeerVpcRequest = (input, context) => {
    return {};
};
const se_PortInfo = (input, context) => {
    return {
        ...(input.cidrListAliases != null && { cidrListAliases: se_StringList(input.cidrListAliases, context) }),
        ...(input.cidrs != null && { cidrs: se_StringList(input.cidrs, context) }),
        ...(input.fromPort != null && { fromPort: input.fromPort }),
        ...(input.ipv6Cidrs != null && { ipv6Cidrs: se_StringList(input.ipv6Cidrs, context) }),
        ...(input.protocol != null && { protocol: input.protocol }),
        ...(input.toPort != null && { toPort: input.toPort }),
    };
};
const se_PortInfoList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_PortInfo(entry, context);
    });
};
const se_PortMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = value;
        return acc;
    }, {});
};
const se_PrivateRegistryAccessRequest = (input, context) => {
    return {
        ...(input.ecrImagePullerRole != null && {
            ecrImagePullerRole: se_ContainerServiceECRImagePullerRoleRequest(input.ecrImagePullerRole, context),
        }),
    };
};
const se_PutAlarmRequest = (input, context) => {
    return {
        ...(input.alarmName != null && { alarmName: input.alarmName }),
        ...(input.comparisonOperator != null && { comparisonOperator: input.comparisonOperator }),
        ...(input.contactProtocols != null && {
            contactProtocols: se_ContactProtocolsList(input.contactProtocols, context),
        }),
        ...(input.datapointsToAlarm != null && { datapointsToAlarm: input.datapointsToAlarm }),
        ...(input.evaluationPeriods != null && { evaluationPeriods: input.evaluationPeriods }),
        ...(input.metricName != null && { metricName: input.metricName }),
        ...(input.monitoredResourceName != null && { monitoredResourceName: input.monitoredResourceName }),
        ...(input.notificationEnabled != null && { notificationEnabled: input.notificationEnabled }),
        ...(input.notificationTriggers != null && {
            notificationTriggers: se_NotificationTriggerList(input.notificationTriggers, context),
        }),
        ...(input.threshold != null && { threshold: (0, smithy_client_1.serializeFloat)(input.threshold) }),
        ...(input.treatMissingData != null && { treatMissingData: input.treatMissingData }),
    };
};
const se_PutInstancePublicPortsRequest = (input, context) => {
    return {
        ...(input.instanceName != null && { instanceName: input.instanceName }),
        ...(input.portInfos != null && { portInfos: se_PortInfoList(input.portInfos, context) }),
    };
};
const se_QueryStringObject = (input, context) => {
    return {
        ...(input.option != null && { option: input.option }),
        ...(input.queryStringsAllowList != null && {
            queryStringsAllowList: se_StringList(input.queryStringsAllowList, context),
        }),
    };
};
const se_RebootInstanceRequest = (input, context) => {
    return {
        ...(input.instanceName != null && { instanceName: input.instanceName }),
    };
};
const se_RebootRelationalDatabaseRequest = (input, context) => {
    return {
        ...(input.relationalDatabaseName != null && { relationalDatabaseName: input.relationalDatabaseName }),
    };
};
const se_RegisterContainerImageRequest = (input, context) => {
    return {
        ...(input.digest != null && { digest: input.digest }),
        ...(input.label != null && { label: input.label }),
        ...(input.serviceName != null && { serviceName: input.serviceName }),
    };
};
const se_RelationalDatabaseParameter = (input, context) => {
    return {
        ...(input.allowedValues != null && { allowedValues: input.allowedValues }),
        ...(input.applyMethod != null && { applyMethod: input.applyMethod }),
        ...(input.applyType != null && { applyType: input.applyType }),
        ...(input.dataType != null && { dataType: input.dataType }),
        ...(input.description != null && { description: input.description }),
        ...(input.isModifiable != null && { isModifiable: input.isModifiable }),
        ...(input.parameterName != null && { parameterName: input.parameterName }),
        ...(input.parameterValue != null && { parameterValue: input.parameterValue }),
    };
};
const se_RelationalDatabaseParameterList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_RelationalDatabaseParameter(entry, context);
    });
};
const se_ReleaseStaticIpRequest = (input, context) => {
    return {
        ...(input.staticIpName != null && { staticIpName: input.staticIpName }),
    };
};
const se_ResetDistributionCacheRequest = (input, context) => {
    return {
        ...(input.distributionName != null && { distributionName: input.distributionName }),
    };
};
const se_ResourceNameList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_SendContactMethodVerificationRequest = (input, context) => {
    return {
        ...(input.protocol != null && { protocol: input.protocol }),
    };
};
const se_SetIpAddressTypeRequest = (input, context) => {
    return {
        ...(input.ipAddressType != null && { ipAddressType: input.ipAddressType }),
        ...(input.resourceName != null && { resourceName: input.resourceName }),
        ...(input.resourceType != null && { resourceType: input.resourceType }),
    };
};
const se_SetResourceAccessForBucketRequest = (input, context) => {
    return {
        ...(input.access != null && { access: input.access }),
        ...(input.bucketName != null && { bucketName: input.bucketName }),
        ...(input.resourceName != null && { resourceName: input.resourceName }),
    };
};
const se_StartGUISessionRequest = (input, context) => {
    return {
        ...(input.resourceName != null && { resourceName: input.resourceName }),
    };
};
const se_StartInstanceRequest = (input, context) => {
    return {
        ...(input.instanceName != null && { instanceName: input.instanceName }),
    };
};
const se_StartRelationalDatabaseRequest = (input, context) => {
    return {
        ...(input.relationalDatabaseName != null && { relationalDatabaseName: input.relationalDatabaseName }),
    };
};
const se_StopGUISessionRequest = (input, context) => {
    return {
        ...(input.resourceName != null && { resourceName: input.resourceName }),
    };
};
const se_StopInstanceOnIdleRequest = (input, context) => {
    return {
        ...(input.duration != null && { duration: input.duration }),
        ...(input.threshold != null && { threshold: input.threshold }),
    };
};
const se_StopInstanceRequest = (input, context) => {
    return {
        ...(input.force != null && { force: input.force }),
        ...(input.instanceName != null && { instanceName: input.instanceName }),
    };
};
const se_StopRelationalDatabaseRequest = (input, context) => {
    return {
        ...(input.relationalDatabaseName != null && { relationalDatabaseName: input.relationalDatabaseName }),
        ...(input.relationalDatabaseSnapshotName != null && {
            relationalDatabaseSnapshotName: input.relationalDatabaseSnapshotName,
        }),
    };
};
const se_StringList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_SubjectAlternativeNameList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_Tag = (input, context) => {
    return {
        ...(input.key != null && { key: input.key }),
        ...(input.value != null && { value: input.value }),
    };
};
const se_TagKeyList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const se_TagList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Tag(entry, context);
    });
};
const se_TagResourceRequest = (input, context) => {
    return {
        ...(input.resourceArn != null && { resourceArn: input.resourceArn }),
        ...(input.resourceName != null && { resourceName: input.resourceName }),
        ...(input.tags != null && { tags: se_TagList(input.tags, context) }),
    };
};
const se_TestAlarmRequest = (input, context) => {
    return {
        ...(input.alarmName != null && { alarmName: input.alarmName }),
        ...(input.state != null && { state: input.state }),
    };
};
const se_UnpeerVpcRequest = (input, context) => {
    return {};
};
const se_UntagResourceRequest = (input, context) => {
    return {
        ...(input.resourceArn != null && { resourceArn: input.resourceArn }),
        ...(input.resourceName != null && { resourceName: input.resourceName }),
        ...(input.tagKeys != null && { tagKeys: se_TagKeyList(input.tagKeys, context) }),
    };
};
const se_UpdateBucketBundleRequest = (input, context) => {
    return {
        ...(input.bucketName != null && { bucketName: input.bucketName }),
        ...(input.bundleId != null && { bundleId: input.bundleId }),
    };
};
const se_UpdateBucketRequest = (input, context) => {
    return {
        ...(input.accessLogConfig != null && { accessLogConfig: se_BucketAccessLogConfig(input.accessLogConfig, context) }),
        ...(input.accessRules != null && { accessRules: se_AccessRules(input.accessRules, context) }),
        ...(input.bucketName != null && { bucketName: input.bucketName }),
        ...(input.readonlyAccessAccounts != null && {
            readonlyAccessAccounts: se_PartnerIdList(input.readonlyAccessAccounts, context),
        }),
        ...(input.versioning != null && { versioning: input.versioning }),
    };
};
const se_UpdateContainerServiceRequest = (input, context) => {
    return {
        ...(input.isDisabled != null && { isDisabled: input.isDisabled }),
        ...(input.power != null && { power: input.power }),
        ...(input.privateRegistryAccess != null && {
            privateRegistryAccess: se_PrivateRegistryAccessRequest(input.privateRegistryAccess, context),
        }),
        ...(input.publicDomainNames != null && {
            publicDomainNames: se_ContainerServicePublicDomains(input.publicDomainNames, context),
        }),
        ...(input.scale != null && { scale: input.scale }),
        ...(input.serviceName != null && { serviceName: input.serviceName }),
    };
};
const se_UpdateDistributionBundleRequest = (input, context) => {
    return {
        ...(input.bundleId != null && { bundleId: input.bundleId }),
        ...(input.distributionName != null && { distributionName: input.distributionName }),
    };
};
const se_UpdateDistributionRequest = (input, context) => {
    return {
        ...(input.cacheBehaviorSettings != null && {
            cacheBehaviorSettings: se_CacheSettings(input.cacheBehaviorSettings, context),
        }),
        ...(input.cacheBehaviors != null && { cacheBehaviors: se_CacheBehaviorList(input.cacheBehaviors, context) }),
        ...(input.defaultCacheBehavior != null && {
            defaultCacheBehavior: se_CacheBehavior(input.defaultCacheBehavior, context),
        }),
        ...(input.distributionName != null && { distributionName: input.distributionName }),
        ...(input.isEnabled != null && { isEnabled: input.isEnabled }),
        ...(input.origin != null && { origin: se_InputOrigin(input.origin, context) }),
    };
};
const se_UpdateDomainEntryRequest = (input, context) => {
    return {
        ...(input.domainEntry != null && { domainEntry: se_DomainEntry(input.domainEntry, context) }),
        ...(input.domainName != null && { domainName: input.domainName }),
    };
};
const se_UpdateInstanceMetadataOptionsRequest = (input, context) => {
    return {
        ...(input.httpEndpoint != null && { httpEndpoint: input.httpEndpoint }),
        ...(input.httpProtocolIpv6 != null && { httpProtocolIpv6: input.httpProtocolIpv6 }),
        ...(input.httpPutResponseHopLimit != null && { httpPutResponseHopLimit: input.httpPutResponseHopLimit }),
        ...(input.httpTokens != null && { httpTokens: input.httpTokens }),
        ...(input.instanceName != null && { instanceName: input.instanceName }),
    };
};
const se_UpdateLoadBalancerAttributeRequest = (input, context) => {
    return {
        ...(input.attributeName != null && { attributeName: input.attributeName }),
        ...(input.attributeValue != null && { attributeValue: input.attributeValue }),
        ...(input.loadBalancerName != null && { loadBalancerName: input.loadBalancerName }),
    };
};
const se_UpdateRelationalDatabaseParametersRequest = (input, context) => {
    return {
        ...(input.parameters != null && { parameters: se_RelationalDatabaseParameterList(input.parameters, context) }),
        ...(input.relationalDatabaseName != null && { relationalDatabaseName: input.relationalDatabaseName }),
    };
};
const se_UpdateRelationalDatabaseRequest = (input, context) => {
    return {
        ...(input.applyImmediately != null && { applyImmediately: input.applyImmediately }),
        ...(input.caCertificateIdentifier != null && { caCertificateIdentifier: input.caCertificateIdentifier }),
        ...(input.disableBackupRetention != null && { disableBackupRetention: input.disableBackupRetention }),
        ...(input.enableBackupRetention != null && { enableBackupRetention: input.enableBackupRetention }),
        ...(input.masterUserPassword != null && { masterUserPassword: input.masterUserPassword }),
        ...(input.preferredBackupWindow != null && { preferredBackupWindow: input.preferredBackupWindow }),
        ...(input.preferredMaintenanceWindow != null && { preferredMaintenanceWindow: input.preferredMaintenanceWindow }),
        ...(input.publiclyAccessible != null && { publiclyAccessible: input.publiclyAccessible }),
        ...(input.relationalDatabaseName != null && { relationalDatabaseName: input.relationalDatabaseName }),
        ...(input.rotateMasterUserPassword != null && { rotateMasterUserPassword: input.rotateMasterUserPassword }),
    };
};
const de_AccessDeniedException = (output, context) => {
    return {
        code: (0, smithy_client_1.expectString)(output.code),
        docs: (0, smithy_client_1.expectString)(output.docs),
        message: (0, smithy_client_1.expectString)(output.message),
        tip: (0, smithy_client_1.expectString)(output.tip),
    };
};
const de_AccessKey = (output, context) => {
    return {
        accessKeyId: (0, smithy_client_1.expectString)(output.accessKeyId),
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        lastUsed: output.lastUsed != null ? de_AccessKeyLastUsed(output.lastUsed, context) : undefined,
        secretAccessKey: (0, smithy_client_1.expectString)(output.secretAccessKey),
        status: (0, smithy_client_1.expectString)(output.status),
    };
};
const de_AccessKeyLastUsed = (output, context) => {
    return {
        lastUsedDate: output.lastUsedDate != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.lastUsedDate)))
            : undefined,
        region: (0, smithy_client_1.expectString)(output.region),
        serviceName: (0, smithy_client_1.expectString)(output.serviceName),
    };
};
const de_AccessKeyList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_AccessKey(entry, context);
    });
    return retVal;
};
const de_AccessReceiverList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ResourceReceivingAccess(entry, context);
    });
    return retVal;
};
const de_AccessRules = (output, context) => {
    return {
        allowPublicOverrides: (0, smithy_client_1.expectBoolean)(output.allowPublicOverrides),
        getObject: (0, smithy_client_1.expectString)(output.getObject),
    };
};
const de_AccountLevelBpaSync = (output, context) => {
    return {
        bpaImpactsLightsail: (0, smithy_client_1.expectBoolean)(output.bpaImpactsLightsail),
        lastSyncedAt: output.lastSyncedAt != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.lastSyncedAt)))
            : undefined,
        message: (0, smithy_client_1.expectString)(output.message),
        status: (0, smithy_client_1.expectString)(output.status),
    };
};
const de_AccountSetupInProgressException = (output, context) => {
    return {
        code: (0, smithy_client_1.expectString)(output.code),
        docs: (0, smithy_client_1.expectString)(output.docs),
        message: (0, smithy_client_1.expectString)(output.message),
        tip: (0, smithy_client_1.expectString)(output.tip),
    };
};
const de_AddOn = (output, context) => {
    return {
        duration: (0, smithy_client_1.expectString)(output.duration),
        name: (0, smithy_client_1.expectString)(output.name),
        nextSnapshotTimeOfDay: (0, smithy_client_1.expectString)(output.nextSnapshotTimeOfDay),
        snapshotTimeOfDay: (0, smithy_client_1.expectString)(output.snapshotTimeOfDay),
        status: (0, smithy_client_1.expectString)(output.status),
        threshold: (0, smithy_client_1.expectString)(output.threshold),
    };
};
const de_AddOnList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_AddOn(entry, context);
    });
    return retVal;
};
const de_Alarm = (output, context) => {
    return {
        arn: (0, smithy_client_1.expectString)(output.arn),
        comparisonOperator: (0, smithy_client_1.expectString)(output.comparisonOperator),
        contactProtocols: output.contactProtocols != null ? de_ContactProtocolsList(output.contactProtocols, context) : undefined,
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        datapointsToAlarm: (0, smithy_client_1.expectInt32)(output.datapointsToAlarm),
        evaluationPeriods: (0, smithy_client_1.expectInt32)(output.evaluationPeriods),
        location: output.location != null ? de_ResourceLocation(output.location, context) : undefined,
        metricName: (0, smithy_client_1.expectString)(output.metricName),
        monitoredResourceInfo: output.monitoredResourceInfo != null
            ? de_MonitoredResourceInfo(output.monitoredResourceInfo, context)
            : undefined,
        name: (0, smithy_client_1.expectString)(output.name),
        notificationEnabled: (0, smithy_client_1.expectBoolean)(output.notificationEnabled),
        notificationTriggers: output.notificationTriggers != null
            ? de_NotificationTriggerList(output.notificationTriggers, context)
            : undefined,
        period: (0, smithy_client_1.expectInt32)(output.period),
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
        state: (0, smithy_client_1.expectString)(output.state),
        statistic: (0, smithy_client_1.expectString)(output.statistic),
        supportCode: (0, smithy_client_1.expectString)(output.supportCode),
        threshold: (0, smithy_client_1.limitedParseDouble)(output.threshold),
        treatMissingData: (0, smithy_client_1.expectString)(output.treatMissingData),
        unit: (0, smithy_client_1.expectString)(output.unit),
    };
};
const de_AlarmsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Alarm(entry, context);
    });
    return retVal;
};
const de_AllocateStaticIpResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_AppCategoryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const de_AttachCertificateToDistributionResult = (output, context) => {
    return {
        operation: output.operation != null ? de_Operation(output.operation, context) : undefined,
    };
};
const de_AttachDiskResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_AttachedDisk = (output, context) => {
    return {
        path: (0, smithy_client_1.expectString)(output.path),
        sizeInGb: (0, smithy_client_1.expectInt32)(output.sizeInGb),
    };
};
const de_AttachedDiskList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_AttachedDisk(entry, context);
    });
    return retVal;
};
const de_AttachInstancesToLoadBalancerResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_AttachLoadBalancerTlsCertificateResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_AttachStaticIpResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_AutoSnapshotDetails = (output, context) => {
    return {
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        date: (0, smithy_client_1.expectString)(output.date),
        fromAttachedDisks: output.fromAttachedDisks != null ? de_AttachedDiskList(output.fromAttachedDisks, context) : undefined,
        status: (0, smithy_client_1.expectString)(output.status),
    };
};
const de_AutoSnapshotDetailsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_AutoSnapshotDetails(entry, context);
    });
    return retVal;
};
const de_AvailabilityZone = (output, context) => {
    return {
        state: (0, smithy_client_1.expectString)(output.state),
        zoneName: (0, smithy_client_1.expectString)(output.zoneName),
    };
};
const de_AvailabilityZoneList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_AvailabilityZone(entry, context);
    });
    return retVal;
};
const de_Blueprint = (output, context) => {
    return {
        appCategory: (0, smithy_client_1.expectString)(output.appCategory),
        blueprintId: (0, smithy_client_1.expectString)(output.blueprintId),
        description: (0, smithy_client_1.expectString)(output.description),
        group: (0, smithy_client_1.expectString)(output.group),
        isActive: (0, smithy_client_1.expectBoolean)(output.isActive),
        licenseUrl: (0, smithy_client_1.expectString)(output.licenseUrl),
        minPower: (0, smithy_client_1.expectInt32)(output.minPower),
        name: (0, smithy_client_1.expectString)(output.name),
        platform: (0, smithy_client_1.expectString)(output.platform),
        productUrl: (0, smithy_client_1.expectString)(output.productUrl),
        type: (0, smithy_client_1.expectString)(output.type),
        version: (0, smithy_client_1.expectString)(output.version),
        versionCode: (0, smithy_client_1.expectString)(output.versionCode),
    };
};
const de_BlueprintList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Blueprint(entry, context);
    });
    return retVal;
};
const de_Bucket = (output, context) => {
    return {
        ableToUpdateBundle: (0, smithy_client_1.expectBoolean)(output.ableToUpdateBundle),
        accessLogConfig: output.accessLogConfig != null ? de_BucketAccessLogConfig(output.accessLogConfig, context) : undefined,
        accessRules: output.accessRules != null ? de_AccessRules(output.accessRules, context) : undefined,
        arn: (0, smithy_client_1.expectString)(output.arn),
        bundleId: (0, smithy_client_1.expectString)(output.bundleId),
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        location: output.location != null ? de_ResourceLocation(output.location, context) : undefined,
        name: (0, smithy_client_1.expectString)(output.name),
        objectVersioning: (0, smithy_client_1.expectString)(output.objectVersioning),
        readonlyAccessAccounts: output.readonlyAccessAccounts != null ? de_PartnerIdList(output.readonlyAccessAccounts, context) : undefined,
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
        resourcesReceivingAccess: output.resourcesReceivingAccess != null
            ? de_AccessReceiverList(output.resourcesReceivingAccess, context)
            : undefined,
        state: output.state != null ? de_BucketState(output.state, context) : undefined,
        supportCode: (0, smithy_client_1.expectString)(output.supportCode),
        tags: output.tags != null ? de_TagList(output.tags, context) : undefined,
        url: (0, smithy_client_1.expectString)(output.url),
    };
};
const de_BucketAccessLogConfig = (output, context) => {
    return {
        destination: (0, smithy_client_1.expectString)(output.destination),
        enabled: (0, smithy_client_1.expectBoolean)(output.enabled),
        prefix: (0, smithy_client_1.expectString)(output.prefix),
    };
};
const de_BucketBundle = (output, context) => {
    return {
        bundleId: (0, smithy_client_1.expectString)(output.bundleId),
        isActive: (0, smithy_client_1.expectBoolean)(output.isActive),
        name: (0, smithy_client_1.expectString)(output.name),
        price: (0, smithy_client_1.limitedParseFloat32)(output.price),
        storagePerMonthInGb: (0, smithy_client_1.expectInt32)(output.storagePerMonthInGb),
        transferPerMonthInGb: (0, smithy_client_1.expectInt32)(output.transferPerMonthInGb),
    };
};
const de_BucketBundleList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_BucketBundle(entry, context);
    });
    return retVal;
};
const de_BucketList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Bucket(entry, context);
    });
    return retVal;
};
const de_BucketState = (output, context) => {
    return {
        code: (0, smithy_client_1.expectString)(output.code),
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_Bundle = (output, context) => {
    return {
        bundleId: (0, smithy_client_1.expectString)(output.bundleId),
        cpuCount: (0, smithy_client_1.expectInt32)(output.cpuCount),
        diskSizeInGb: (0, smithy_client_1.expectInt32)(output.diskSizeInGb),
        instanceType: (0, smithy_client_1.expectString)(output.instanceType),
        isActive: (0, smithy_client_1.expectBoolean)(output.isActive),
        name: (0, smithy_client_1.expectString)(output.name),
        power: (0, smithy_client_1.expectInt32)(output.power),
        price: (0, smithy_client_1.limitedParseFloat32)(output.price),
        ramSizeInGb: (0, smithy_client_1.limitedParseFloat32)(output.ramSizeInGb),
        supportedAppCategories: output.supportedAppCategories != null ? de_AppCategoryList(output.supportedAppCategories, context) : undefined,
        supportedPlatforms: output.supportedPlatforms != null ? de_InstancePlatformList(output.supportedPlatforms, context) : undefined,
        transferPerMonthInGb: (0, smithy_client_1.expectInt32)(output.transferPerMonthInGb),
    };
};
const de_BundleList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Bundle(entry, context);
    });
    return retVal;
};
const de_CacheBehavior = (output, context) => {
    return {
        behavior: (0, smithy_client_1.expectString)(output.behavior),
    };
};
const de_CacheBehaviorList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_CacheBehaviorPerPath(entry, context);
    });
    return retVal;
};
const de_CacheBehaviorPerPath = (output, context) => {
    return {
        behavior: (0, smithy_client_1.expectString)(output.behavior),
        path: (0, smithy_client_1.expectString)(output.path),
    };
};
const de_CacheSettings = (output, context) => {
    return {
        allowedHTTPMethods: (0, smithy_client_1.expectString)(output.allowedHTTPMethods),
        cachedHTTPMethods: (0, smithy_client_1.expectString)(output.cachedHTTPMethods),
        defaultTTL: (0, smithy_client_1.expectLong)(output.defaultTTL),
        forwardedCookies: output.forwardedCookies != null ? de_CookieObject(output.forwardedCookies, context) : undefined,
        forwardedHeaders: output.forwardedHeaders != null ? de_HeaderObject(output.forwardedHeaders, context) : undefined,
        forwardedQueryStrings: output.forwardedQueryStrings != null ? de_QueryStringObject(output.forwardedQueryStrings, context) : undefined,
        maximumTTL: (0, smithy_client_1.expectLong)(output.maximumTTL),
        minimumTTL: (0, smithy_client_1.expectLong)(output.minimumTTL),
    };
};
const de_Certificate = (output, context) => {
    return {
        arn: (0, smithy_client_1.expectString)(output.arn),
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        domainName: (0, smithy_client_1.expectString)(output.domainName),
        domainValidationRecords: output.domainValidationRecords != null
            ? de_DomainValidationRecordList(output.domainValidationRecords, context)
            : undefined,
        eligibleToRenew: (0, smithy_client_1.expectString)(output.eligibleToRenew),
        inUseResourceCount: (0, smithy_client_1.expectInt32)(output.inUseResourceCount),
        issuedAt: output.issuedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.issuedAt))) : undefined,
        issuerCA: (0, smithy_client_1.expectString)(output.issuerCA),
        keyAlgorithm: (0, smithy_client_1.expectString)(output.keyAlgorithm),
        name: (0, smithy_client_1.expectString)(output.name),
        notAfter: output.notAfter != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.notAfter))) : undefined,
        notBefore: output.notBefore != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.notBefore))) : undefined,
        renewalSummary: output.renewalSummary != null ? de_RenewalSummary(output.renewalSummary, context) : undefined,
        requestFailureReason: (0, smithy_client_1.expectString)(output.requestFailureReason),
        revocationReason: (0, smithy_client_1.expectString)(output.revocationReason),
        revokedAt: output.revokedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.revokedAt))) : undefined,
        serialNumber: (0, smithy_client_1.expectString)(output.serialNumber),
        status: (0, smithy_client_1.expectString)(output.status),
        subjectAlternativeNames: output.subjectAlternativeNames != null
            ? de_SubjectAlternativeNameList(output.subjectAlternativeNames, context)
            : undefined,
        supportCode: (0, smithy_client_1.expectString)(output.supportCode),
        tags: output.tags != null ? de_TagList(output.tags, context) : undefined,
    };
};
const de_CertificateSummary = (output, context) => {
    return {
        certificateArn: (0, smithy_client_1.expectString)(output.certificateArn),
        certificateDetail: output.certificateDetail != null ? de_Certificate(output.certificateDetail, context) : undefined,
        certificateName: (0, smithy_client_1.expectString)(output.certificateName),
        domainName: (0, smithy_client_1.expectString)(output.domainName),
        tags: output.tags != null ? de_TagList(output.tags, context) : undefined,
    };
};
const de_CertificateSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_CertificateSummary(entry, context);
    });
    return retVal;
};
const de_CloseInstancePublicPortsResult = (output, context) => {
    return {
        operation: output.operation != null ? de_Operation(output.operation, context) : undefined,
    };
};
const de_CloudFormationStackRecord = (output, context) => {
    return {
        arn: (0, smithy_client_1.expectString)(output.arn),
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        destinationInfo: output.destinationInfo != null ? de_DestinationInfo(output.destinationInfo, context) : undefined,
        location: output.location != null ? de_ResourceLocation(output.location, context) : undefined,
        name: (0, smithy_client_1.expectString)(output.name),
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
        sourceInfo: output.sourceInfo != null ? de_CloudFormationStackRecordSourceInfoList(output.sourceInfo, context) : undefined,
        state: (0, smithy_client_1.expectString)(output.state),
    };
};
const de_CloudFormationStackRecordList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_CloudFormationStackRecord(entry, context);
    });
    return retVal;
};
const de_CloudFormationStackRecordSourceInfo = (output, context) => {
    return {
        arn: (0, smithy_client_1.expectString)(output.arn),
        name: (0, smithy_client_1.expectString)(output.name),
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
    };
};
const de_CloudFormationStackRecordSourceInfoList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_CloudFormationStackRecordSourceInfo(entry, context);
    });
    return retVal;
};
const de_ContactMethod = (output, context) => {
    return {
        arn: (0, smithy_client_1.expectString)(output.arn),
        contactEndpoint: (0, smithy_client_1.expectString)(output.contactEndpoint),
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        location: output.location != null ? de_ResourceLocation(output.location, context) : undefined,
        name: (0, smithy_client_1.expectString)(output.name),
        protocol: (0, smithy_client_1.expectString)(output.protocol),
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
        status: (0, smithy_client_1.expectString)(output.status),
        supportCode: (0, smithy_client_1.expectString)(output.supportCode),
    };
};
const de_ContactMethodsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ContactMethod(entry, context);
    });
    return retVal;
};
const de_ContactProtocolsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const de_Container = (output, context) => {
    return {
        command: output.command != null ? de_StringList(output.command, context) : undefined,
        environment: output.environment != null ? de_Environment(output.environment, context) : undefined,
        image: (0, smithy_client_1.expectString)(output.image),
        ports: output.ports != null ? de_PortMap(output.ports, context) : undefined,
    };
};
const de_ContainerImage = (output, context) => {
    return {
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        digest: (0, smithy_client_1.expectString)(output.digest),
        image: (0, smithy_client_1.expectString)(output.image),
    };
};
const de_ContainerImageList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ContainerImage(entry, context);
    });
    return retVal;
};
const de_ContainerMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_Container(value, context);
        return acc;
    }, {});
};
const de_ContainerService = (output, context) => {
    return {
        arn: (0, smithy_client_1.expectString)(output.arn),
        containerServiceName: (0, smithy_client_1.expectString)(output.containerServiceName),
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        currentDeployment: output.currentDeployment != null ? de_ContainerServiceDeployment(output.currentDeployment, context) : undefined,
        isDisabled: (0, smithy_client_1.expectBoolean)(output.isDisabled),
        location: output.location != null ? de_ResourceLocation(output.location, context) : undefined,
        nextDeployment: output.nextDeployment != null ? de_ContainerServiceDeployment(output.nextDeployment, context) : undefined,
        power: (0, smithy_client_1.expectString)(output.power),
        powerId: (0, smithy_client_1.expectString)(output.powerId),
        principalArn: (0, smithy_client_1.expectString)(output.principalArn),
        privateDomainName: (0, smithy_client_1.expectString)(output.privateDomainName),
        privateRegistryAccess: output.privateRegistryAccess != null
            ? de_PrivateRegistryAccess(output.privateRegistryAccess, context)
            : undefined,
        publicDomainNames: output.publicDomainNames != null
            ? de_ContainerServicePublicDomains(output.publicDomainNames, context)
            : undefined,
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
        scale: (0, smithy_client_1.expectInt32)(output.scale),
        state: (0, smithy_client_1.expectString)(output.state),
        stateDetail: output.stateDetail != null ? de_ContainerServiceStateDetail(output.stateDetail, context) : undefined,
        tags: output.tags != null ? de_TagList(output.tags, context) : undefined,
        url: (0, smithy_client_1.expectString)(output.url),
    };
};
const de_ContainerServiceDeployment = (output, context) => {
    return {
        containers: output.containers != null ? de_ContainerMap(output.containers, context) : undefined,
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        publicEndpoint: output.publicEndpoint != null ? de_ContainerServiceEndpoint(output.publicEndpoint, context) : undefined,
        state: (0, smithy_client_1.expectString)(output.state),
        version: (0, smithy_client_1.expectInt32)(output.version),
    };
};
const de_ContainerServiceDeploymentList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ContainerServiceDeployment(entry, context);
    });
    return retVal;
};
const de_ContainerServiceECRImagePullerRole = (output, context) => {
    return {
        isActive: (0, smithy_client_1.expectBoolean)(output.isActive),
        principalArn: (0, smithy_client_1.expectString)(output.principalArn),
    };
};
const de_ContainerServiceEndpoint = (output, context) => {
    return {
        containerName: (0, smithy_client_1.expectString)(output.containerName),
        containerPort: (0, smithy_client_1.expectInt32)(output.containerPort),
        healthCheck: output.healthCheck != null ? de_ContainerServiceHealthCheckConfig(output.healthCheck, context) : undefined,
    };
};
const de_ContainerServiceHealthCheckConfig = (output, context) => {
    return {
        healthyThreshold: (0, smithy_client_1.expectInt32)(output.healthyThreshold),
        intervalSeconds: (0, smithy_client_1.expectInt32)(output.intervalSeconds),
        path: (0, smithy_client_1.expectString)(output.path),
        successCodes: (0, smithy_client_1.expectString)(output.successCodes),
        timeoutSeconds: (0, smithy_client_1.expectInt32)(output.timeoutSeconds),
        unhealthyThreshold: (0, smithy_client_1.expectInt32)(output.unhealthyThreshold),
    };
};
const de_ContainerServiceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ContainerService(entry, context);
    });
    return retVal;
};
const de_ContainerServiceLogEvent = (output, context) => {
    return {
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_ContainerServiceLogEventList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ContainerServiceLogEvent(entry, context);
    });
    return retVal;
};
const de_ContainerServiceMetadataEntry = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = (0, smithy_client_1.expectString)(value);
        return acc;
    }, {});
};
const de_ContainerServiceMetadataEntryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ContainerServiceMetadataEntry(entry, context);
    });
    return retVal;
};
const de_ContainerServicePower = (output, context) => {
    return {
        cpuCount: (0, smithy_client_1.limitedParseFloat32)(output.cpuCount),
        isActive: (0, smithy_client_1.expectBoolean)(output.isActive),
        name: (0, smithy_client_1.expectString)(output.name),
        powerId: (0, smithy_client_1.expectString)(output.powerId),
        price: (0, smithy_client_1.limitedParseFloat32)(output.price),
        ramSizeInGb: (0, smithy_client_1.limitedParseFloat32)(output.ramSizeInGb),
    };
};
const de_ContainerServicePowerList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ContainerServicePower(entry, context);
    });
    return retVal;
};
const de_ContainerServicePublicDomains = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_ContainerServicePublicDomainsList(value, context);
        return acc;
    }, {});
};
const de_ContainerServicePublicDomainsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const de_ContainerServiceRegistryLogin = (output, context) => {
    return {
        expiresAt: output.expiresAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.expiresAt))) : undefined,
        password: (0, smithy_client_1.expectString)(output.password),
        registry: (0, smithy_client_1.expectString)(output.registry),
        username: (0, smithy_client_1.expectString)(output.username),
    };
};
const de_ContainerServicesListResult = (output, context) => {
    return {
        containerServices: output.containerServices != null ? de_ContainerServiceList(output.containerServices, context) : undefined,
    };
};
const de_ContainerServiceStateDetail = (output, context) => {
    return {
        code: (0, smithy_client_1.expectString)(output.code),
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_CookieObject = (output, context) => {
    return {
        cookiesAllowList: output.cookiesAllowList != null ? de_StringList(output.cookiesAllowList, context) : undefined,
        option: (0, smithy_client_1.expectString)(output.option),
    };
};
const de_CopySnapshotResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_CostEstimate = (output, context) => {
    return {
        resultsByTime: output.resultsByTime != null ? de_EstimatesByTime(output.resultsByTime, context) : undefined,
        usageType: (0, smithy_client_1.expectString)(output.usageType),
    };
};
const de_CostEstimates = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_CostEstimate(entry, context);
    });
    return retVal;
};
const de_CreateBucketAccessKeyResult = (output, context) => {
    return {
        accessKey: output.accessKey != null ? de_AccessKey(output.accessKey, context) : undefined,
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_CreateBucketResult = (output, context) => {
    return {
        bucket: output.bucket != null ? de_Bucket(output.bucket, context) : undefined,
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_CreateCertificateResult = (output, context) => {
    return {
        certificate: output.certificate != null ? de_CertificateSummary(output.certificate, context) : undefined,
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_CreateCloudFormationStackResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_CreateContactMethodResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_CreateContainerServiceDeploymentResult = (output, context) => {
    return {
        containerService: output.containerService != null ? de_ContainerService(output.containerService, context) : undefined,
    };
};
const de_CreateContainerServiceRegistryLoginResult = (output, context) => {
    return {
        registryLogin: output.registryLogin != null ? de_ContainerServiceRegistryLogin(output.registryLogin, context) : undefined,
    };
};
const de_CreateContainerServiceResult = (output, context) => {
    return {
        containerService: output.containerService != null ? de_ContainerService(output.containerService, context) : undefined,
    };
};
const de_CreateDiskFromSnapshotResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_CreateDiskResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_CreateDiskSnapshotResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_CreateDistributionResult = (output, context) => {
    return {
        distribution: output.distribution != null ? de_LightsailDistribution(output.distribution, context) : undefined,
        operation: output.operation != null ? de_Operation(output.operation, context) : undefined,
    };
};
const de_CreateDomainEntryResult = (output, context) => {
    return {
        operation: output.operation != null ? de_Operation(output.operation, context) : undefined,
    };
};
const de_CreateDomainResult = (output, context) => {
    return {
        operation: output.operation != null ? de_Operation(output.operation, context) : undefined,
    };
};
const de_CreateGUISessionAccessDetailsResult = (output, context) => {
    return {
        failureReason: (0, smithy_client_1.expectString)(output.failureReason),
        percentageComplete: (0, smithy_client_1.expectInt32)(output.percentageComplete),
        resourceName: (0, smithy_client_1.expectString)(output.resourceName),
        sessions: output.sessions != null ? de_Sessions(output.sessions, context) : undefined,
        status: (0, smithy_client_1.expectString)(output.status),
    };
};
const de_CreateInstancesFromSnapshotResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_CreateInstanceSnapshotResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_CreateInstancesResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_CreateKeyPairResult = (output, context) => {
    return {
        keyPair: output.keyPair != null ? de_KeyPair(output.keyPair, context) : undefined,
        operation: output.operation != null ? de_Operation(output.operation, context) : undefined,
        privateKeyBase64: (0, smithy_client_1.expectString)(output.privateKeyBase64),
        publicKeyBase64: (0, smithy_client_1.expectString)(output.publicKeyBase64),
    };
};
const de_CreateLoadBalancerResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_CreateLoadBalancerTlsCertificateResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_CreateRelationalDatabaseFromSnapshotResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_CreateRelationalDatabaseResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_CreateRelationalDatabaseSnapshotResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_DeleteAlarmResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_DeleteAutoSnapshotResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_DeleteBucketAccessKeyResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_DeleteBucketResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_DeleteCertificateResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_DeleteContactMethodResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_DeleteContainerImageResult = (output, context) => {
    return {};
};
const de_DeleteContainerServiceResult = (output, context) => {
    return {};
};
const de_DeleteDiskResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_DeleteDiskSnapshotResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_DeleteDistributionResult = (output, context) => {
    return {
        operation: output.operation != null ? de_Operation(output.operation, context) : undefined,
    };
};
const de_DeleteDomainEntryResult = (output, context) => {
    return {
        operation: output.operation != null ? de_Operation(output.operation, context) : undefined,
    };
};
const de_DeleteDomainResult = (output, context) => {
    return {
        operation: output.operation != null ? de_Operation(output.operation, context) : undefined,
    };
};
const de_DeleteInstanceResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_DeleteInstanceSnapshotResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_DeleteKeyPairResult = (output, context) => {
    return {
        operation: output.operation != null ? de_Operation(output.operation, context) : undefined,
    };
};
const de_DeleteKnownHostKeysResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_DeleteLoadBalancerResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_DeleteLoadBalancerTlsCertificateResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_DeleteRelationalDatabaseResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_DeleteRelationalDatabaseSnapshotResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_DestinationInfo = (output, context) => {
    return {
        id: (0, smithy_client_1.expectString)(output.id),
        service: (0, smithy_client_1.expectString)(output.service),
    };
};
const de_DetachCertificateFromDistributionResult = (output, context) => {
    return {
        operation: output.operation != null ? de_Operation(output.operation, context) : undefined,
    };
};
const de_DetachDiskResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_DetachInstancesFromLoadBalancerResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_DetachStaticIpResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_DisableAddOnResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_Disk = (output, context) => {
    return {
        addOns: output.addOns != null ? de_AddOnList(output.addOns, context) : undefined,
        arn: (0, smithy_client_1.expectString)(output.arn),
        attachedTo: (0, smithy_client_1.expectString)(output.attachedTo),
        attachmentState: (0, smithy_client_1.expectString)(output.attachmentState),
        autoMountStatus: (0, smithy_client_1.expectString)(output.autoMountStatus),
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        gbInUse: (0, smithy_client_1.expectInt32)(output.gbInUse),
        iops: (0, smithy_client_1.expectInt32)(output.iops),
        isAttached: (0, smithy_client_1.expectBoolean)(output.isAttached),
        isSystemDisk: (0, smithy_client_1.expectBoolean)(output.isSystemDisk),
        location: output.location != null ? de_ResourceLocation(output.location, context) : undefined,
        name: (0, smithy_client_1.expectString)(output.name),
        path: (0, smithy_client_1.expectString)(output.path),
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
        sizeInGb: (0, smithy_client_1.expectInt32)(output.sizeInGb),
        state: (0, smithy_client_1.expectString)(output.state),
        supportCode: (0, smithy_client_1.expectString)(output.supportCode),
        tags: output.tags != null ? de_TagList(output.tags, context) : undefined,
    };
};
const de_DiskInfo = (output, context) => {
    return {
        isSystemDisk: (0, smithy_client_1.expectBoolean)(output.isSystemDisk),
        name: (0, smithy_client_1.expectString)(output.name),
        path: (0, smithy_client_1.expectString)(output.path),
        sizeInGb: (0, smithy_client_1.expectInt32)(output.sizeInGb),
    };
};
const de_DiskInfoList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_DiskInfo(entry, context);
    });
    return retVal;
};
const de_DiskList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Disk(entry, context);
    });
    return retVal;
};
const de_DiskSnapshot = (output, context) => {
    return {
        arn: (0, smithy_client_1.expectString)(output.arn),
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        fromDiskArn: (0, smithy_client_1.expectString)(output.fromDiskArn),
        fromDiskName: (0, smithy_client_1.expectString)(output.fromDiskName),
        fromInstanceArn: (0, smithy_client_1.expectString)(output.fromInstanceArn),
        fromInstanceName: (0, smithy_client_1.expectString)(output.fromInstanceName),
        isFromAutoSnapshot: (0, smithy_client_1.expectBoolean)(output.isFromAutoSnapshot),
        location: output.location != null ? de_ResourceLocation(output.location, context) : undefined,
        name: (0, smithy_client_1.expectString)(output.name),
        progress: (0, smithy_client_1.expectString)(output.progress),
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
        sizeInGb: (0, smithy_client_1.expectInt32)(output.sizeInGb),
        state: (0, smithy_client_1.expectString)(output.state),
        supportCode: (0, smithy_client_1.expectString)(output.supportCode),
        tags: output.tags != null ? de_TagList(output.tags, context) : undefined,
    };
};
const de_DiskSnapshotInfo = (output, context) => {
    return {
        sizeInGb: (0, smithy_client_1.expectInt32)(output.sizeInGb),
    };
};
const de_DiskSnapshotList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_DiskSnapshot(entry, context);
    });
    return retVal;
};
const de_DistributionBundle = (output, context) => {
    return {
        bundleId: (0, smithy_client_1.expectString)(output.bundleId),
        isActive: (0, smithy_client_1.expectBoolean)(output.isActive),
        name: (0, smithy_client_1.expectString)(output.name),
        price: (0, smithy_client_1.limitedParseFloat32)(output.price),
        transferPerMonthInGb: (0, smithy_client_1.expectInt32)(output.transferPerMonthInGb),
    };
};
const de_DistributionBundleList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_DistributionBundle(entry, context);
    });
    return retVal;
};
const de_DistributionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_LightsailDistribution(entry, context);
    });
    return retVal;
};
const de_DnsRecordCreationState = (output, context) => {
    return {
        code: (0, smithy_client_1.expectString)(output.code),
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_Domain = (output, context) => {
    return {
        arn: (0, smithy_client_1.expectString)(output.arn),
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        domainEntries: output.domainEntries != null ? de_DomainEntryList(output.domainEntries, context) : undefined,
        location: output.location != null ? de_ResourceLocation(output.location, context) : undefined,
        name: (0, smithy_client_1.expectString)(output.name),
        registeredDomainDelegationInfo: output.registeredDomainDelegationInfo != null
            ? de_RegisteredDomainDelegationInfo(output.registeredDomainDelegationInfo, context)
            : undefined,
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
        supportCode: (0, smithy_client_1.expectString)(output.supportCode),
        tags: output.tags != null ? de_TagList(output.tags, context) : undefined,
    };
};
const de_DomainEntry = (output, context) => {
    return {
        id: (0, smithy_client_1.expectString)(output.id),
        isAlias: (0, smithy_client_1.expectBoolean)(output.isAlias),
        name: (0, smithy_client_1.expectString)(output.name),
        options: output.options != null ? de_DomainEntryOptions(output.options, context) : undefined,
        target: (0, smithy_client_1.expectString)(output.target),
        type: (0, smithy_client_1.expectString)(output.type),
    };
};
const de_DomainEntryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_DomainEntry(entry, context);
    });
    return retVal;
};
const de_DomainEntryOptions = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = (0, smithy_client_1.expectString)(value);
        return acc;
    }, {});
};
const de_DomainList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Domain(entry, context);
    });
    return retVal;
};
const de_DomainValidationRecord = (output, context) => {
    return {
        dnsRecordCreationState: output.dnsRecordCreationState != null
            ? de_DnsRecordCreationState(output.dnsRecordCreationState, context)
            : undefined,
        domainName: (0, smithy_client_1.expectString)(output.domainName),
        resourceRecord: output.resourceRecord != null ? de_ResourceRecord(output.resourceRecord, context) : undefined,
        validationStatus: (0, smithy_client_1.expectString)(output.validationStatus),
    };
};
const de_DomainValidationRecordList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_DomainValidationRecord(entry, context);
    });
    return retVal;
};
const de_DownloadDefaultKeyPairResult = (output, context) => {
    return {
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        privateKeyBase64: (0, smithy_client_1.expectString)(output.privateKeyBase64),
        publicKeyBase64: (0, smithy_client_1.expectString)(output.publicKeyBase64),
    };
};
const de_EnableAddOnResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_Environment = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = (0, smithy_client_1.expectString)(value);
        return acc;
    }, {});
};
const de_EstimateByTime = (output, context) => {
    return {
        currency: (0, smithy_client_1.expectString)(output.currency),
        pricingUnit: (0, smithy_client_1.expectString)(output.pricingUnit),
        timePeriod: output.timePeriod != null ? de_TimePeriod(output.timePeriod, context) : undefined,
        unit: (0, smithy_client_1.limitedParseDouble)(output.unit),
        usageCost: (0, smithy_client_1.limitedParseDouble)(output.usageCost),
    };
};
const de_EstimatesByTime = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_EstimateByTime(entry, context);
    });
    return retVal;
};
const de_ExportSnapshotRecord = (output, context) => {
    return {
        arn: (0, smithy_client_1.expectString)(output.arn),
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        destinationInfo: output.destinationInfo != null ? de_DestinationInfo(output.destinationInfo, context) : undefined,
        location: output.location != null ? de_ResourceLocation(output.location, context) : undefined,
        name: (0, smithy_client_1.expectString)(output.name),
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
        sourceInfo: output.sourceInfo != null ? de_ExportSnapshotRecordSourceInfo(output.sourceInfo, context) : undefined,
        state: (0, smithy_client_1.expectString)(output.state),
    };
};
const de_ExportSnapshotRecordList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ExportSnapshotRecord(entry, context);
    });
    return retVal;
};
const de_ExportSnapshotRecordSourceInfo = (output, context) => {
    return {
        arn: (0, smithy_client_1.expectString)(output.arn),
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        diskSnapshotInfo: output.diskSnapshotInfo != null ? de_DiskSnapshotInfo(output.diskSnapshotInfo, context) : undefined,
        fromResourceArn: (0, smithy_client_1.expectString)(output.fromResourceArn),
        fromResourceName: (0, smithy_client_1.expectString)(output.fromResourceName),
        instanceSnapshotInfo: output.instanceSnapshotInfo != null ? de_InstanceSnapshotInfo(output.instanceSnapshotInfo, context) : undefined,
        name: (0, smithy_client_1.expectString)(output.name),
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
    };
};
const de_ExportSnapshotResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_GetActiveNamesResult = (output, context) => {
    return {
        activeNames: output.activeNames != null ? de_StringList(output.activeNames, context) : undefined,
        nextPageToken: (0, smithy_client_1.expectString)(output.nextPageToken),
    };
};
const de_GetAlarmsResult = (output, context) => {
    return {
        alarms: output.alarms != null ? de_AlarmsList(output.alarms, context) : undefined,
        nextPageToken: (0, smithy_client_1.expectString)(output.nextPageToken),
    };
};
const de_GetAutoSnapshotsResult = (output, context) => {
    return {
        autoSnapshots: output.autoSnapshots != null ? de_AutoSnapshotDetailsList(output.autoSnapshots, context) : undefined,
        resourceName: (0, smithy_client_1.expectString)(output.resourceName),
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
    };
};
const de_GetBlueprintsResult = (output, context) => {
    return {
        blueprints: output.blueprints != null ? de_BlueprintList(output.blueprints, context) : undefined,
        nextPageToken: (0, smithy_client_1.expectString)(output.nextPageToken),
    };
};
const de_GetBucketAccessKeysResult = (output, context) => {
    return {
        accessKeys: output.accessKeys != null ? de_AccessKeyList(output.accessKeys, context) : undefined,
    };
};
const de_GetBucketBundlesResult = (output, context) => {
    return {
        bundles: output.bundles != null ? de_BucketBundleList(output.bundles, context) : undefined,
    };
};
const de_GetBucketMetricDataResult = (output, context) => {
    return {
        metricData: output.metricData != null ? de_MetricDatapointList(output.metricData, context) : undefined,
        metricName: (0, smithy_client_1.expectString)(output.metricName),
    };
};
const de_GetBucketsResult = (output, context) => {
    return {
        accountLevelBpaSync: output.accountLevelBpaSync != null ? de_AccountLevelBpaSync(output.accountLevelBpaSync, context) : undefined,
        buckets: output.buckets != null ? de_BucketList(output.buckets, context) : undefined,
        nextPageToken: (0, smithy_client_1.expectString)(output.nextPageToken),
    };
};
const de_GetBundlesResult = (output, context) => {
    return {
        bundles: output.bundles != null ? de_BundleList(output.bundles, context) : undefined,
        nextPageToken: (0, smithy_client_1.expectString)(output.nextPageToken),
    };
};
const de_GetCertificatesResult = (output, context) => {
    return {
        certificates: output.certificates != null ? de_CertificateSummaryList(output.certificates, context) : undefined,
    };
};
const de_GetCloudFormationStackRecordsResult = (output, context) => {
    return {
        cloudFormationStackRecords: output.cloudFormationStackRecords != null
            ? de_CloudFormationStackRecordList(output.cloudFormationStackRecords, context)
            : undefined,
        nextPageToken: (0, smithy_client_1.expectString)(output.nextPageToken),
    };
};
const de_GetContactMethodsResult = (output, context) => {
    return {
        contactMethods: output.contactMethods != null ? de_ContactMethodsList(output.contactMethods, context) : undefined,
    };
};
const de_GetContainerAPIMetadataResult = (output, context) => {
    return {
        metadata: output.metadata != null ? de_ContainerServiceMetadataEntryList(output.metadata, context) : undefined,
    };
};
const de_GetContainerImagesResult = (output, context) => {
    return {
        containerImages: output.containerImages != null ? de_ContainerImageList(output.containerImages, context) : undefined,
    };
};
const de_GetContainerLogResult = (output, context) => {
    return {
        logEvents: output.logEvents != null ? de_ContainerServiceLogEventList(output.logEvents, context) : undefined,
        nextPageToken: (0, smithy_client_1.expectString)(output.nextPageToken),
    };
};
const de_GetContainerServiceDeploymentsResult = (output, context) => {
    return {
        deployments: output.deployments != null ? de_ContainerServiceDeploymentList(output.deployments, context) : undefined,
    };
};
const de_GetContainerServiceMetricDataResult = (output, context) => {
    return {
        metricData: output.metricData != null ? de_MetricDatapointList(output.metricData, context) : undefined,
        metricName: (0, smithy_client_1.expectString)(output.metricName),
    };
};
const de_GetContainerServicePowersResult = (output, context) => {
    return {
        powers: output.powers != null ? de_ContainerServicePowerList(output.powers, context) : undefined,
    };
};
const de_GetCostEstimateResult = (output, context) => {
    return {
        resourcesBudgetEstimate: output.resourcesBudgetEstimate != null
            ? de_ResourcesBudgetEstimate(output.resourcesBudgetEstimate, context)
            : undefined,
    };
};
const de_GetDiskResult = (output, context) => {
    return {
        disk: output.disk != null ? de_Disk(output.disk, context) : undefined,
    };
};
const de_GetDiskSnapshotResult = (output, context) => {
    return {
        diskSnapshot: output.diskSnapshot != null ? de_DiskSnapshot(output.diskSnapshot, context) : undefined,
    };
};
const de_GetDiskSnapshotsResult = (output, context) => {
    return {
        diskSnapshots: output.diskSnapshots != null ? de_DiskSnapshotList(output.diskSnapshots, context) : undefined,
        nextPageToken: (0, smithy_client_1.expectString)(output.nextPageToken),
    };
};
const de_GetDisksResult = (output, context) => {
    return {
        disks: output.disks != null ? de_DiskList(output.disks, context) : undefined,
        nextPageToken: (0, smithy_client_1.expectString)(output.nextPageToken),
    };
};
const de_GetDistributionBundlesResult = (output, context) => {
    return {
        bundles: output.bundles != null ? de_DistributionBundleList(output.bundles, context) : undefined,
    };
};
const de_GetDistributionLatestCacheResetResult = (output, context) => {
    return {
        createTime: output.createTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createTime))) : undefined,
        status: (0, smithy_client_1.expectString)(output.status),
    };
};
const de_GetDistributionMetricDataResult = (output, context) => {
    return {
        metricData: output.metricData != null ? de_MetricDatapointList(output.metricData, context) : undefined,
        metricName: (0, smithy_client_1.expectString)(output.metricName),
    };
};
const de_GetDistributionsResult = (output, context) => {
    return {
        distributions: output.distributions != null ? de_DistributionList(output.distributions, context) : undefined,
        nextPageToken: (0, smithy_client_1.expectString)(output.nextPageToken),
    };
};
const de_GetDomainResult = (output, context) => {
    return {
        domain: output.domain != null ? de_Domain(output.domain, context) : undefined,
    };
};
const de_GetDomainsResult = (output, context) => {
    return {
        domains: output.domains != null ? de_DomainList(output.domains, context) : undefined,
        nextPageToken: (0, smithy_client_1.expectString)(output.nextPageToken),
    };
};
const de_GetExportSnapshotRecordsResult = (output, context) => {
    return {
        exportSnapshotRecords: output.exportSnapshotRecords != null
            ? de_ExportSnapshotRecordList(output.exportSnapshotRecords, context)
            : undefined,
        nextPageToken: (0, smithy_client_1.expectString)(output.nextPageToken),
    };
};
const de_GetInstanceAccessDetailsResult = (output, context) => {
    return {
        accessDetails: output.accessDetails != null ? de_InstanceAccessDetails(output.accessDetails, context) : undefined,
    };
};
const de_GetInstanceMetricDataResult = (output, context) => {
    return {
        metricData: output.metricData != null ? de_MetricDatapointList(output.metricData, context) : undefined,
        metricName: (0, smithy_client_1.expectString)(output.metricName),
    };
};
const de_GetInstancePortStatesResult = (output, context) => {
    return {
        portStates: output.portStates != null ? de_InstancePortStateList(output.portStates, context) : undefined,
    };
};
const de_GetInstanceResult = (output, context) => {
    return {
        instance: output.instance != null ? de_Instance(output.instance, context) : undefined,
    };
};
const de_GetInstanceSnapshotResult = (output, context) => {
    return {
        instanceSnapshot: output.instanceSnapshot != null ? de_InstanceSnapshot(output.instanceSnapshot, context) : undefined,
    };
};
const de_GetInstanceSnapshotsResult = (output, context) => {
    return {
        instanceSnapshots: output.instanceSnapshots != null ? de_InstanceSnapshotList(output.instanceSnapshots, context) : undefined,
        nextPageToken: (0, smithy_client_1.expectString)(output.nextPageToken),
    };
};
const de_GetInstancesResult = (output, context) => {
    return {
        instances: output.instances != null ? de_InstanceList(output.instances, context) : undefined,
        nextPageToken: (0, smithy_client_1.expectString)(output.nextPageToken),
    };
};
const de_GetInstanceStateResult = (output, context) => {
    return {
        state: output.state != null ? de_InstanceState(output.state, context) : undefined,
    };
};
const de_GetKeyPairResult = (output, context) => {
    return {
        keyPair: output.keyPair != null ? de_KeyPair(output.keyPair, context) : undefined,
    };
};
const de_GetKeyPairsResult = (output, context) => {
    return {
        keyPairs: output.keyPairs != null ? de_KeyPairList(output.keyPairs, context) : undefined,
        nextPageToken: (0, smithy_client_1.expectString)(output.nextPageToken),
    };
};
const de_GetLoadBalancerMetricDataResult = (output, context) => {
    return {
        metricData: output.metricData != null ? de_MetricDatapointList(output.metricData, context) : undefined,
        metricName: (0, smithy_client_1.expectString)(output.metricName),
    };
};
const de_GetLoadBalancerResult = (output, context) => {
    return {
        loadBalancer: output.loadBalancer != null ? de_LoadBalancer(output.loadBalancer, context) : undefined,
    };
};
const de_GetLoadBalancersResult = (output, context) => {
    return {
        loadBalancers: output.loadBalancers != null ? de_LoadBalancerList(output.loadBalancers, context) : undefined,
        nextPageToken: (0, smithy_client_1.expectString)(output.nextPageToken),
    };
};
const de_GetLoadBalancerTlsCertificatesResult = (output, context) => {
    return {
        tlsCertificates: output.tlsCertificates != null ? de_LoadBalancerTlsCertificateList(output.tlsCertificates, context) : undefined,
    };
};
const de_GetLoadBalancerTlsPoliciesResult = (output, context) => {
    return {
        nextPageToken: (0, smithy_client_1.expectString)(output.nextPageToken),
        tlsPolicies: output.tlsPolicies != null ? de_LoadBalancerTlsPolicyList(output.tlsPolicies, context) : undefined,
    };
};
const de_GetOperationResult = (output, context) => {
    return {
        operation: output.operation != null ? de_Operation(output.operation, context) : undefined,
    };
};
const de_GetOperationsForResourceResult = (output, context) => {
    return {
        nextPageCount: (0, smithy_client_1.expectString)(output.nextPageCount),
        nextPageToken: (0, smithy_client_1.expectString)(output.nextPageToken),
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_GetOperationsResult = (output, context) => {
    return {
        nextPageToken: (0, smithy_client_1.expectString)(output.nextPageToken),
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_GetRegionsResult = (output, context) => {
    return {
        regions: output.regions != null ? de_RegionList(output.regions, context) : undefined,
    };
};
const de_GetRelationalDatabaseBlueprintsResult = (output, context) => {
    return {
        blueprints: output.blueprints != null ? de_RelationalDatabaseBlueprintList(output.blueprints, context) : undefined,
        nextPageToken: (0, smithy_client_1.expectString)(output.nextPageToken),
    };
};
const de_GetRelationalDatabaseBundlesResult = (output, context) => {
    return {
        bundles: output.bundles != null ? de_RelationalDatabaseBundleList(output.bundles, context) : undefined,
        nextPageToken: (0, smithy_client_1.expectString)(output.nextPageToken),
    };
};
const de_GetRelationalDatabaseEventsResult = (output, context) => {
    return {
        nextPageToken: (0, smithy_client_1.expectString)(output.nextPageToken),
        relationalDatabaseEvents: output.relationalDatabaseEvents != null
            ? de_RelationalDatabaseEventList(output.relationalDatabaseEvents, context)
            : undefined,
    };
};
const de_GetRelationalDatabaseLogEventsResult = (output, context) => {
    return {
        nextBackwardToken: (0, smithy_client_1.expectString)(output.nextBackwardToken),
        nextForwardToken: (0, smithy_client_1.expectString)(output.nextForwardToken),
        resourceLogEvents: output.resourceLogEvents != null ? de_LogEventList(output.resourceLogEvents, context) : undefined,
    };
};
const de_GetRelationalDatabaseLogStreamsResult = (output, context) => {
    return {
        logStreams: output.logStreams != null ? de_StringList(output.logStreams, context) : undefined,
    };
};
const de_GetRelationalDatabaseMasterUserPasswordResult = (output, context) => {
    return {
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        masterUserPassword: (0, smithy_client_1.expectString)(output.masterUserPassword),
    };
};
const de_GetRelationalDatabaseMetricDataResult = (output, context) => {
    return {
        metricData: output.metricData != null ? de_MetricDatapointList(output.metricData, context) : undefined,
        metricName: (0, smithy_client_1.expectString)(output.metricName),
    };
};
const de_GetRelationalDatabaseParametersResult = (output, context) => {
    return {
        nextPageToken: (0, smithy_client_1.expectString)(output.nextPageToken),
        parameters: output.parameters != null ? de_RelationalDatabaseParameterList(output.parameters, context) : undefined,
    };
};
const de_GetRelationalDatabaseResult = (output, context) => {
    return {
        relationalDatabase: output.relationalDatabase != null ? de_RelationalDatabase(output.relationalDatabase, context) : undefined,
    };
};
const de_GetRelationalDatabaseSnapshotResult = (output, context) => {
    return {
        relationalDatabaseSnapshot: output.relationalDatabaseSnapshot != null
            ? de_RelationalDatabaseSnapshot(output.relationalDatabaseSnapshot, context)
            : undefined,
    };
};
const de_GetRelationalDatabaseSnapshotsResult = (output, context) => {
    return {
        nextPageToken: (0, smithy_client_1.expectString)(output.nextPageToken),
        relationalDatabaseSnapshots: output.relationalDatabaseSnapshots != null
            ? de_RelationalDatabaseSnapshotList(output.relationalDatabaseSnapshots, context)
            : undefined,
    };
};
const de_GetRelationalDatabasesResult = (output, context) => {
    return {
        nextPageToken: (0, smithy_client_1.expectString)(output.nextPageToken),
        relationalDatabases: output.relationalDatabases != null ? de_RelationalDatabaseList(output.relationalDatabases, context) : undefined,
    };
};
const de_GetStaticIpResult = (output, context) => {
    return {
        staticIp: output.staticIp != null ? de_StaticIp(output.staticIp, context) : undefined,
    };
};
const de_GetStaticIpsResult = (output, context) => {
    return {
        nextPageToken: (0, smithy_client_1.expectString)(output.nextPageToken),
        staticIps: output.staticIps != null ? de_StaticIpList(output.staticIps, context) : undefined,
    };
};
const de_HeaderForwardList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const de_HeaderObject = (output, context) => {
    return {
        headersAllowList: output.headersAllowList != null ? de_HeaderForwardList(output.headersAllowList, context) : undefined,
        option: (0, smithy_client_1.expectString)(output.option),
    };
};
const de_HostKeyAttributes = (output, context) => {
    return {
        algorithm: (0, smithy_client_1.expectString)(output.algorithm),
        fingerprintSHA1: (0, smithy_client_1.expectString)(output.fingerprintSHA1),
        fingerprintSHA256: (0, smithy_client_1.expectString)(output.fingerprintSHA256),
        notValidAfter: output.notValidAfter != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.notValidAfter)))
            : undefined,
        notValidBefore: output.notValidBefore != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.notValidBefore)))
            : undefined,
        publicKey: (0, smithy_client_1.expectString)(output.publicKey),
        witnessedAt: output.witnessedAt != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.witnessedAt)))
            : undefined,
    };
};
const de_HostKeysList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_HostKeyAttributes(entry, context);
    });
    return retVal;
};
const de_ImportKeyPairResult = (output, context) => {
    return {
        operation: output.operation != null ? de_Operation(output.operation, context) : undefined,
    };
};
const de_Instance = (output, context) => {
    return {
        addOns: output.addOns != null ? de_AddOnList(output.addOns, context) : undefined,
        arn: (0, smithy_client_1.expectString)(output.arn),
        blueprintId: (0, smithy_client_1.expectString)(output.blueprintId),
        blueprintName: (0, smithy_client_1.expectString)(output.blueprintName),
        bundleId: (0, smithy_client_1.expectString)(output.bundleId),
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        hardware: output.hardware != null ? de_InstanceHardware(output.hardware, context) : undefined,
        ipAddressType: (0, smithy_client_1.expectString)(output.ipAddressType),
        ipv6Addresses: output.ipv6Addresses != null ? de_Ipv6AddressList(output.ipv6Addresses, context) : undefined,
        isStaticIp: (0, smithy_client_1.expectBoolean)(output.isStaticIp),
        location: output.location != null ? de_ResourceLocation(output.location, context) : undefined,
        metadataOptions: output.metadataOptions != null ? de_InstanceMetadataOptions(output.metadataOptions, context) : undefined,
        name: (0, smithy_client_1.expectString)(output.name),
        networking: output.networking != null ? de_InstanceNetworking(output.networking, context) : undefined,
        privateIpAddress: (0, smithy_client_1.expectString)(output.privateIpAddress),
        publicIpAddress: (0, smithy_client_1.expectString)(output.publicIpAddress),
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
        sshKeyName: (0, smithy_client_1.expectString)(output.sshKeyName),
        state: output.state != null ? de_InstanceState(output.state, context) : undefined,
        supportCode: (0, smithy_client_1.expectString)(output.supportCode),
        tags: output.tags != null ? de_TagList(output.tags, context) : undefined,
        username: (0, smithy_client_1.expectString)(output.username),
    };
};
const de_InstanceAccessDetails = (output, context) => {
    return {
        certKey: (0, smithy_client_1.expectString)(output.certKey),
        expiresAt: output.expiresAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.expiresAt))) : undefined,
        hostKeys: output.hostKeys != null ? de_HostKeysList(output.hostKeys, context) : undefined,
        instanceName: (0, smithy_client_1.expectString)(output.instanceName),
        ipAddress: (0, smithy_client_1.expectString)(output.ipAddress),
        password: (0, smithy_client_1.expectString)(output.password),
        passwordData: output.passwordData != null ? de_PasswordData(output.passwordData, context) : undefined,
        privateKey: (0, smithy_client_1.expectString)(output.privateKey),
        protocol: (0, smithy_client_1.expectString)(output.protocol),
        username: (0, smithy_client_1.expectString)(output.username),
    };
};
const de_InstanceHardware = (output, context) => {
    return {
        cpuCount: (0, smithy_client_1.expectInt32)(output.cpuCount),
        disks: output.disks != null ? de_DiskList(output.disks, context) : undefined,
        ramSizeInGb: (0, smithy_client_1.limitedParseFloat32)(output.ramSizeInGb),
    };
};
const de_InstanceHealthSummary = (output, context) => {
    return {
        instanceHealth: (0, smithy_client_1.expectString)(output.instanceHealth),
        instanceHealthReason: (0, smithy_client_1.expectString)(output.instanceHealthReason),
        instanceName: (0, smithy_client_1.expectString)(output.instanceName),
    };
};
const de_InstanceHealthSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_InstanceHealthSummary(entry, context);
    });
    return retVal;
};
const de_InstanceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Instance(entry, context);
    });
    return retVal;
};
const de_InstanceMetadataOptions = (output, context) => {
    return {
        httpEndpoint: (0, smithy_client_1.expectString)(output.httpEndpoint),
        httpProtocolIpv6: (0, smithy_client_1.expectString)(output.httpProtocolIpv6),
        httpPutResponseHopLimit: (0, smithy_client_1.expectInt32)(output.httpPutResponseHopLimit),
        httpTokens: (0, smithy_client_1.expectString)(output.httpTokens),
        state: (0, smithy_client_1.expectString)(output.state),
    };
};
const de_InstanceNetworking = (output, context) => {
    return {
        monthlyTransfer: output.monthlyTransfer != null ? de_MonthlyTransfer(output.monthlyTransfer, context) : undefined,
        ports: output.ports != null ? de_InstancePortInfoList(output.ports, context) : undefined,
    };
};
const de_InstancePlatformList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const de_InstancePortInfo = (output, context) => {
    return {
        accessDirection: (0, smithy_client_1.expectString)(output.accessDirection),
        accessFrom: (0, smithy_client_1.expectString)(output.accessFrom),
        accessType: (0, smithy_client_1.expectString)(output.accessType),
        cidrListAliases: output.cidrListAliases != null ? de_StringList(output.cidrListAliases, context) : undefined,
        cidrs: output.cidrs != null ? de_StringList(output.cidrs, context) : undefined,
        commonName: (0, smithy_client_1.expectString)(output.commonName),
        fromPort: (0, smithy_client_1.expectInt32)(output.fromPort),
        ipv6Cidrs: output.ipv6Cidrs != null ? de_StringList(output.ipv6Cidrs, context) : undefined,
        protocol: (0, smithy_client_1.expectString)(output.protocol),
        toPort: (0, smithy_client_1.expectInt32)(output.toPort),
    };
};
const de_InstancePortInfoList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_InstancePortInfo(entry, context);
    });
    return retVal;
};
const de_InstancePortState = (output, context) => {
    return {
        cidrListAliases: output.cidrListAliases != null ? de_StringList(output.cidrListAliases, context) : undefined,
        cidrs: output.cidrs != null ? de_StringList(output.cidrs, context) : undefined,
        fromPort: (0, smithy_client_1.expectInt32)(output.fromPort),
        ipv6Cidrs: output.ipv6Cidrs != null ? de_StringList(output.ipv6Cidrs, context) : undefined,
        protocol: (0, smithy_client_1.expectString)(output.protocol),
        state: (0, smithy_client_1.expectString)(output.state),
        toPort: (0, smithy_client_1.expectInt32)(output.toPort),
    };
};
const de_InstancePortStateList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_InstancePortState(entry, context);
    });
    return retVal;
};
const de_InstanceSnapshot = (output, context) => {
    return {
        arn: (0, smithy_client_1.expectString)(output.arn),
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        fromAttachedDisks: output.fromAttachedDisks != null ? de_DiskList(output.fromAttachedDisks, context) : undefined,
        fromBlueprintId: (0, smithy_client_1.expectString)(output.fromBlueprintId),
        fromBundleId: (0, smithy_client_1.expectString)(output.fromBundleId),
        fromInstanceArn: (0, smithy_client_1.expectString)(output.fromInstanceArn),
        fromInstanceName: (0, smithy_client_1.expectString)(output.fromInstanceName),
        isFromAutoSnapshot: (0, smithy_client_1.expectBoolean)(output.isFromAutoSnapshot),
        location: output.location != null ? de_ResourceLocation(output.location, context) : undefined,
        name: (0, smithy_client_1.expectString)(output.name),
        progress: (0, smithy_client_1.expectString)(output.progress),
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
        sizeInGb: (0, smithy_client_1.expectInt32)(output.sizeInGb),
        state: (0, smithy_client_1.expectString)(output.state),
        supportCode: (0, smithy_client_1.expectString)(output.supportCode),
        tags: output.tags != null ? de_TagList(output.tags, context) : undefined,
    };
};
const de_InstanceSnapshotInfo = (output, context) => {
    return {
        fromBlueprintId: (0, smithy_client_1.expectString)(output.fromBlueprintId),
        fromBundleId: (0, smithy_client_1.expectString)(output.fromBundleId),
        fromDiskInfo: output.fromDiskInfo != null ? de_DiskInfoList(output.fromDiskInfo, context) : undefined,
    };
};
const de_InstanceSnapshotList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_InstanceSnapshot(entry, context);
    });
    return retVal;
};
const de_InstanceState = (output, context) => {
    return {
        code: (0, smithy_client_1.expectInt32)(output.code),
        name: (0, smithy_client_1.expectString)(output.name),
    };
};
const de_InvalidInputException = (output, context) => {
    return {
        code: (0, smithy_client_1.expectString)(output.code),
        docs: (0, smithy_client_1.expectString)(output.docs),
        message: (0, smithy_client_1.expectString)(output.message),
        tip: (0, smithy_client_1.expectString)(output.tip),
    };
};
const de_Ipv6AddressList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const de_IsVpcPeeredResult = (output, context) => {
    return {
        isPeered: (0, smithy_client_1.expectBoolean)(output.isPeered),
    };
};
const de_KeyPair = (output, context) => {
    return {
        arn: (0, smithy_client_1.expectString)(output.arn),
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        fingerprint: (0, smithy_client_1.expectString)(output.fingerprint),
        location: output.location != null ? de_ResourceLocation(output.location, context) : undefined,
        name: (0, smithy_client_1.expectString)(output.name),
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
        supportCode: (0, smithy_client_1.expectString)(output.supportCode),
        tags: output.tags != null ? de_TagList(output.tags, context) : undefined,
    };
};
const de_KeyPairList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_KeyPair(entry, context);
    });
    return retVal;
};
const de_LightsailDistribution = (output, context) => {
    return {
        ableToUpdateBundle: (0, smithy_client_1.expectBoolean)(output.ableToUpdateBundle),
        alternativeDomainNames: output.alternativeDomainNames != null ? de_StringList(output.alternativeDomainNames, context) : undefined,
        arn: (0, smithy_client_1.expectString)(output.arn),
        bundleId: (0, smithy_client_1.expectString)(output.bundleId),
        cacheBehaviorSettings: output.cacheBehaviorSettings != null ? de_CacheSettings(output.cacheBehaviorSettings, context) : undefined,
        cacheBehaviors: output.cacheBehaviors != null ? de_CacheBehaviorList(output.cacheBehaviors, context) : undefined,
        certificateName: (0, smithy_client_1.expectString)(output.certificateName),
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        defaultCacheBehavior: output.defaultCacheBehavior != null ? de_CacheBehavior(output.defaultCacheBehavior, context) : undefined,
        domainName: (0, smithy_client_1.expectString)(output.domainName),
        ipAddressType: (0, smithy_client_1.expectString)(output.ipAddressType),
        isEnabled: (0, smithy_client_1.expectBoolean)(output.isEnabled),
        location: output.location != null ? de_ResourceLocation(output.location, context) : undefined,
        name: (0, smithy_client_1.expectString)(output.name),
        origin: output.origin != null ? de_Origin(output.origin, context) : undefined,
        originPublicDNS: (0, smithy_client_1.expectString)(output.originPublicDNS),
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
        status: (0, smithy_client_1.expectString)(output.status),
        supportCode: (0, smithy_client_1.expectString)(output.supportCode),
        tags: output.tags != null ? de_TagList(output.tags, context) : undefined,
    };
};
const de_LoadBalancer = (output, context) => {
    return {
        arn: (0, smithy_client_1.expectString)(output.arn),
        configurationOptions: output.configurationOptions != null
            ? de_LoadBalancerConfigurationOptions(output.configurationOptions, context)
            : undefined,
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        dnsName: (0, smithy_client_1.expectString)(output.dnsName),
        healthCheckPath: (0, smithy_client_1.expectString)(output.healthCheckPath),
        httpsRedirectionEnabled: (0, smithy_client_1.expectBoolean)(output.httpsRedirectionEnabled),
        instanceHealthSummary: output.instanceHealthSummary != null
            ? de_InstanceHealthSummaryList(output.instanceHealthSummary, context)
            : undefined,
        instancePort: (0, smithy_client_1.expectInt32)(output.instancePort),
        ipAddressType: (0, smithy_client_1.expectString)(output.ipAddressType),
        location: output.location != null ? de_ResourceLocation(output.location, context) : undefined,
        name: (0, smithy_client_1.expectString)(output.name),
        protocol: (0, smithy_client_1.expectString)(output.protocol),
        publicPorts: output.publicPorts != null ? de_PortList(output.publicPorts, context) : undefined,
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
        state: (0, smithy_client_1.expectString)(output.state),
        supportCode: (0, smithy_client_1.expectString)(output.supportCode),
        tags: output.tags != null ? de_TagList(output.tags, context) : undefined,
        tlsCertificateSummaries: output.tlsCertificateSummaries != null
            ? de_LoadBalancerTlsCertificateSummaryList(output.tlsCertificateSummaries, context)
            : undefined,
        tlsPolicyName: (0, smithy_client_1.expectString)(output.tlsPolicyName),
    };
};
const de_LoadBalancerConfigurationOptions = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = (0, smithy_client_1.expectString)(value);
        return acc;
    }, {});
};
const de_LoadBalancerList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_LoadBalancer(entry, context);
    });
    return retVal;
};
const de_LoadBalancerTlsCertificate = (output, context) => {
    return {
        arn: (0, smithy_client_1.expectString)(output.arn),
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        domainName: (0, smithy_client_1.expectString)(output.domainName),
        domainValidationRecords: output.domainValidationRecords != null
            ? de_LoadBalancerTlsCertificateDomainValidationRecordList(output.domainValidationRecords, context)
            : undefined,
        failureReason: (0, smithy_client_1.expectString)(output.failureReason),
        isAttached: (0, smithy_client_1.expectBoolean)(output.isAttached),
        issuedAt: output.issuedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.issuedAt))) : undefined,
        issuer: (0, smithy_client_1.expectString)(output.issuer),
        keyAlgorithm: (0, smithy_client_1.expectString)(output.keyAlgorithm),
        loadBalancerName: (0, smithy_client_1.expectString)(output.loadBalancerName),
        location: output.location != null ? de_ResourceLocation(output.location, context) : undefined,
        name: (0, smithy_client_1.expectString)(output.name),
        notAfter: output.notAfter != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.notAfter))) : undefined,
        notBefore: output.notBefore != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.notBefore))) : undefined,
        renewalSummary: output.renewalSummary != null
            ? de_LoadBalancerTlsCertificateRenewalSummary(output.renewalSummary, context)
            : undefined,
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
        revocationReason: (0, smithy_client_1.expectString)(output.revocationReason),
        revokedAt: output.revokedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.revokedAt))) : undefined,
        serial: (0, smithy_client_1.expectString)(output.serial),
        signatureAlgorithm: (0, smithy_client_1.expectString)(output.signatureAlgorithm),
        status: (0, smithy_client_1.expectString)(output.status),
        subject: (0, smithy_client_1.expectString)(output.subject),
        subjectAlternativeNames: output.subjectAlternativeNames != null ? de_StringList(output.subjectAlternativeNames, context) : undefined,
        supportCode: (0, smithy_client_1.expectString)(output.supportCode),
        tags: output.tags != null ? de_TagList(output.tags, context) : undefined,
    };
};
const de_LoadBalancerTlsCertificateDnsRecordCreationState = (output, context) => {
    return {
        code: (0, smithy_client_1.expectString)(output.code),
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_LoadBalancerTlsCertificateDomainValidationOption = (output, context) => {
    return {
        domainName: (0, smithy_client_1.expectString)(output.domainName),
        validationStatus: (0, smithy_client_1.expectString)(output.validationStatus),
    };
};
const de_LoadBalancerTlsCertificateDomainValidationOptionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_LoadBalancerTlsCertificateDomainValidationOption(entry, context);
    });
    return retVal;
};
const de_LoadBalancerTlsCertificateDomainValidationRecord = (output, context) => {
    return {
        dnsRecordCreationState: output.dnsRecordCreationState != null
            ? de_LoadBalancerTlsCertificateDnsRecordCreationState(output.dnsRecordCreationState, context)
            : undefined,
        domainName: (0, smithy_client_1.expectString)(output.domainName),
        name: (0, smithy_client_1.expectString)(output.name),
        type: (0, smithy_client_1.expectString)(output.type),
        validationStatus: (0, smithy_client_1.expectString)(output.validationStatus),
        value: (0, smithy_client_1.expectString)(output.value),
    };
};
const de_LoadBalancerTlsCertificateDomainValidationRecordList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_LoadBalancerTlsCertificateDomainValidationRecord(entry, context);
    });
    return retVal;
};
const de_LoadBalancerTlsCertificateList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_LoadBalancerTlsCertificate(entry, context);
    });
    return retVal;
};
const de_LoadBalancerTlsCertificateRenewalSummary = (output, context) => {
    return {
        domainValidationOptions: output.domainValidationOptions != null
            ? de_LoadBalancerTlsCertificateDomainValidationOptionList(output.domainValidationOptions, context)
            : undefined,
        renewalStatus: (0, smithy_client_1.expectString)(output.renewalStatus),
    };
};
const de_LoadBalancerTlsCertificateSummary = (output, context) => {
    return {
        isAttached: (0, smithy_client_1.expectBoolean)(output.isAttached),
        name: (0, smithy_client_1.expectString)(output.name),
    };
};
const de_LoadBalancerTlsCertificateSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_LoadBalancerTlsCertificateSummary(entry, context);
    });
    return retVal;
};
const de_LoadBalancerTlsPolicy = (output, context) => {
    return {
        ciphers: output.ciphers != null ? de_StringList(output.ciphers, context) : undefined,
        description: (0, smithy_client_1.expectString)(output.description),
        isDefault: (0, smithy_client_1.expectBoolean)(output.isDefault),
        name: (0, smithy_client_1.expectString)(output.name),
        protocols: output.protocols != null ? de_StringList(output.protocols, context) : undefined,
    };
};
const de_LoadBalancerTlsPolicyList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_LoadBalancerTlsPolicy(entry, context);
    });
    return retVal;
};
const de_LogEvent = (output, context) => {
    return {
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_LogEventList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_LogEvent(entry, context);
    });
    return retVal;
};
const de_MetricDatapoint = (output, context) => {
    return {
        average: (0, smithy_client_1.limitedParseDouble)(output.average),
        maximum: (0, smithy_client_1.limitedParseDouble)(output.maximum),
        minimum: (0, smithy_client_1.limitedParseDouble)(output.minimum),
        sampleCount: (0, smithy_client_1.limitedParseDouble)(output.sampleCount),
        sum: (0, smithy_client_1.limitedParseDouble)(output.sum),
        timestamp: output.timestamp != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.timestamp))) : undefined,
        unit: (0, smithy_client_1.expectString)(output.unit),
    };
};
const de_MetricDatapointList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_MetricDatapoint(entry, context);
    });
    return retVal;
};
const de_MonitoredResourceInfo = (output, context) => {
    return {
        arn: (0, smithy_client_1.expectString)(output.arn),
        name: (0, smithy_client_1.expectString)(output.name),
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
    };
};
const de_MonthlyTransfer = (output, context) => {
    return {
        gbPerMonthAllocated: (0, smithy_client_1.expectInt32)(output.gbPerMonthAllocated),
    };
};
const de_NameServersUpdateState = (output, context) => {
    return {
        code: (0, smithy_client_1.expectString)(output.code),
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_NotFoundException = (output, context) => {
    return {
        code: (0, smithy_client_1.expectString)(output.code),
        docs: (0, smithy_client_1.expectString)(output.docs),
        message: (0, smithy_client_1.expectString)(output.message),
        tip: (0, smithy_client_1.expectString)(output.tip),
    };
};
const de_NotificationTriggerList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const de_OpenInstancePublicPortsResult = (output, context) => {
    return {
        operation: output.operation != null ? de_Operation(output.operation, context) : undefined,
    };
};
const de_Operation = (output, context) => {
    return {
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        errorCode: (0, smithy_client_1.expectString)(output.errorCode),
        errorDetails: (0, smithy_client_1.expectString)(output.errorDetails),
        id: (0, smithy_client_1.expectString)(output.id),
        isTerminal: (0, smithy_client_1.expectBoolean)(output.isTerminal),
        location: output.location != null ? de_ResourceLocation(output.location, context) : undefined,
        operationDetails: (0, smithy_client_1.expectString)(output.operationDetails),
        operationType: (0, smithy_client_1.expectString)(output.operationType),
        resourceName: (0, smithy_client_1.expectString)(output.resourceName),
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
        status: (0, smithy_client_1.expectString)(output.status),
        statusChangedAt: output.statusChangedAt != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.statusChangedAt)))
            : undefined,
    };
};
const de_OperationFailureException = (output, context) => {
    return {
        code: (0, smithy_client_1.expectString)(output.code),
        docs: (0, smithy_client_1.expectString)(output.docs),
        message: (0, smithy_client_1.expectString)(output.message),
        tip: (0, smithy_client_1.expectString)(output.tip),
    };
};
const de_OperationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Operation(entry, context);
    });
    return retVal;
};
const de_Origin = (output, context) => {
    return {
        name: (0, smithy_client_1.expectString)(output.name),
        protocolPolicy: (0, smithy_client_1.expectString)(output.protocolPolicy),
        regionName: (0, smithy_client_1.expectString)(output.regionName),
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
    };
};
const de_PartnerIdList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const de_PasswordData = (output, context) => {
    return {
        ciphertext: (0, smithy_client_1.expectString)(output.ciphertext),
        keyPairName: (0, smithy_client_1.expectString)(output.keyPairName),
    };
};
const de_PeerVpcResult = (output, context) => {
    return {
        operation: output.operation != null ? de_Operation(output.operation, context) : undefined,
    };
};
const de_PendingMaintenanceAction = (output, context) => {
    return {
        action: (0, smithy_client_1.expectString)(output.action),
        currentApplyDate: output.currentApplyDate != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.currentApplyDate)))
            : undefined,
        description: (0, smithy_client_1.expectString)(output.description),
    };
};
const de_PendingMaintenanceActionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_PendingMaintenanceAction(entry, context);
    });
    return retVal;
};
const de_PendingModifiedRelationalDatabaseValues = (output, context) => {
    return {
        backupRetentionEnabled: (0, smithy_client_1.expectBoolean)(output.backupRetentionEnabled),
        engineVersion: (0, smithy_client_1.expectString)(output.engineVersion),
        masterUserPassword: (0, smithy_client_1.expectString)(output.masterUserPassword),
    };
};
const de_PortList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectInt32)(entry);
    });
    return retVal;
};
const de_PortMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = (0, smithy_client_1.expectString)(value);
        return acc;
    }, {});
};
const de_PrivateRegistryAccess = (output, context) => {
    return {
        ecrImagePullerRole: output.ecrImagePullerRole != null
            ? de_ContainerServiceECRImagePullerRole(output.ecrImagePullerRole, context)
            : undefined,
    };
};
const de_PutAlarmResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_PutInstancePublicPortsResult = (output, context) => {
    return {
        operation: output.operation != null ? de_Operation(output.operation, context) : undefined,
    };
};
const de_QueryStringObject = (output, context) => {
    return {
        option: (0, smithy_client_1.expectBoolean)(output.option),
        queryStringsAllowList: output.queryStringsAllowList != null ? de_StringList(output.queryStringsAllowList, context) : undefined,
    };
};
const de_R53HostedZoneDeletionState = (output, context) => {
    return {
        code: (0, smithy_client_1.expectString)(output.code),
        message: (0, smithy_client_1.expectString)(output.message),
    };
};
const de_RebootInstanceResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_RebootRelationalDatabaseResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_Region = (output, context) => {
    return {
        availabilityZones: output.availabilityZones != null ? de_AvailabilityZoneList(output.availabilityZones, context) : undefined,
        continentCode: (0, smithy_client_1.expectString)(output.continentCode),
        description: (0, smithy_client_1.expectString)(output.description),
        displayName: (0, smithy_client_1.expectString)(output.displayName),
        name: (0, smithy_client_1.expectString)(output.name),
        relationalDatabaseAvailabilityZones: output.relationalDatabaseAvailabilityZones != null
            ? de_AvailabilityZoneList(output.relationalDatabaseAvailabilityZones, context)
            : undefined,
    };
};
const de_RegionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Region(entry, context);
    });
    return retVal;
};
const de_RegisterContainerImageResult = (output, context) => {
    return {
        containerImage: output.containerImage != null ? de_ContainerImage(output.containerImage, context) : undefined,
    };
};
const de_RegisteredDomainDelegationInfo = (output, context) => {
    return {
        nameServersUpdateState: output.nameServersUpdateState != null
            ? de_NameServersUpdateState(output.nameServersUpdateState, context)
            : undefined,
        r53HostedZoneDeletionState: output.r53HostedZoneDeletionState != null
            ? de_R53HostedZoneDeletionState(output.r53HostedZoneDeletionState, context)
            : undefined,
    };
};
const de_RelationalDatabase = (output, context) => {
    return {
        arn: (0, smithy_client_1.expectString)(output.arn),
        backupRetentionEnabled: (0, smithy_client_1.expectBoolean)(output.backupRetentionEnabled),
        caCertificateIdentifier: (0, smithy_client_1.expectString)(output.caCertificateIdentifier),
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        engine: (0, smithy_client_1.expectString)(output.engine),
        engineVersion: (0, smithy_client_1.expectString)(output.engineVersion),
        hardware: output.hardware != null ? de_RelationalDatabaseHardware(output.hardware, context) : undefined,
        latestRestorableTime: output.latestRestorableTime != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.latestRestorableTime)))
            : undefined,
        location: output.location != null ? de_ResourceLocation(output.location, context) : undefined,
        masterDatabaseName: (0, smithy_client_1.expectString)(output.masterDatabaseName),
        masterEndpoint: output.masterEndpoint != null ? de_RelationalDatabaseEndpoint(output.masterEndpoint, context) : undefined,
        masterUsername: (0, smithy_client_1.expectString)(output.masterUsername),
        name: (0, smithy_client_1.expectString)(output.name),
        parameterApplyStatus: (0, smithy_client_1.expectString)(output.parameterApplyStatus),
        pendingMaintenanceActions: output.pendingMaintenanceActions != null
            ? de_PendingMaintenanceActionList(output.pendingMaintenanceActions, context)
            : undefined,
        pendingModifiedValues: output.pendingModifiedValues != null
            ? de_PendingModifiedRelationalDatabaseValues(output.pendingModifiedValues, context)
            : undefined,
        preferredBackupWindow: (0, smithy_client_1.expectString)(output.preferredBackupWindow),
        preferredMaintenanceWindow: (0, smithy_client_1.expectString)(output.preferredMaintenanceWindow),
        publiclyAccessible: (0, smithy_client_1.expectBoolean)(output.publiclyAccessible),
        relationalDatabaseBlueprintId: (0, smithy_client_1.expectString)(output.relationalDatabaseBlueprintId),
        relationalDatabaseBundleId: (0, smithy_client_1.expectString)(output.relationalDatabaseBundleId),
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
        secondaryAvailabilityZone: (0, smithy_client_1.expectString)(output.secondaryAvailabilityZone),
        state: (0, smithy_client_1.expectString)(output.state),
        supportCode: (0, smithy_client_1.expectString)(output.supportCode),
        tags: output.tags != null ? de_TagList(output.tags, context) : undefined,
    };
};
const de_RelationalDatabaseBlueprint = (output, context) => {
    return {
        blueprintId: (0, smithy_client_1.expectString)(output.blueprintId),
        engine: (0, smithy_client_1.expectString)(output.engine),
        engineDescription: (0, smithy_client_1.expectString)(output.engineDescription),
        engineVersion: (0, smithy_client_1.expectString)(output.engineVersion),
        engineVersionDescription: (0, smithy_client_1.expectString)(output.engineVersionDescription),
        isEngineDefault: (0, smithy_client_1.expectBoolean)(output.isEngineDefault),
    };
};
const de_RelationalDatabaseBlueprintList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_RelationalDatabaseBlueprint(entry, context);
    });
    return retVal;
};
const de_RelationalDatabaseBundle = (output, context) => {
    return {
        bundleId: (0, smithy_client_1.expectString)(output.bundleId),
        cpuCount: (0, smithy_client_1.expectInt32)(output.cpuCount),
        diskSizeInGb: (0, smithy_client_1.expectInt32)(output.diskSizeInGb),
        isActive: (0, smithy_client_1.expectBoolean)(output.isActive),
        isEncrypted: (0, smithy_client_1.expectBoolean)(output.isEncrypted),
        name: (0, smithy_client_1.expectString)(output.name),
        price: (0, smithy_client_1.limitedParseFloat32)(output.price),
        ramSizeInGb: (0, smithy_client_1.limitedParseFloat32)(output.ramSizeInGb),
        transferPerMonthInGb: (0, smithy_client_1.expectInt32)(output.transferPerMonthInGb),
    };
};
const de_RelationalDatabaseBundleList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_RelationalDatabaseBundle(entry, context);
    });
    return retVal;
};
const de_RelationalDatabaseEndpoint = (output, context) => {
    return {
        address: (0, smithy_client_1.expectString)(output.address),
        port: (0, smithy_client_1.expectInt32)(output.port),
    };
};
const de_RelationalDatabaseEvent = (output, context) => {
    return {
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        eventCategories: output.eventCategories != null ? de_StringList(output.eventCategories, context) : undefined,
        message: (0, smithy_client_1.expectString)(output.message),
        resource: (0, smithy_client_1.expectString)(output.resource),
    };
};
const de_RelationalDatabaseEventList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_RelationalDatabaseEvent(entry, context);
    });
    return retVal;
};
const de_RelationalDatabaseHardware = (output, context) => {
    return {
        cpuCount: (0, smithy_client_1.expectInt32)(output.cpuCount),
        diskSizeInGb: (0, smithy_client_1.expectInt32)(output.diskSizeInGb),
        ramSizeInGb: (0, smithy_client_1.limitedParseFloat32)(output.ramSizeInGb),
    };
};
const de_RelationalDatabaseList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_RelationalDatabase(entry, context);
    });
    return retVal;
};
const de_RelationalDatabaseParameter = (output, context) => {
    return {
        allowedValues: (0, smithy_client_1.expectString)(output.allowedValues),
        applyMethod: (0, smithy_client_1.expectString)(output.applyMethod),
        applyType: (0, smithy_client_1.expectString)(output.applyType),
        dataType: (0, smithy_client_1.expectString)(output.dataType),
        description: (0, smithy_client_1.expectString)(output.description),
        isModifiable: (0, smithy_client_1.expectBoolean)(output.isModifiable),
        parameterName: (0, smithy_client_1.expectString)(output.parameterName),
        parameterValue: (0, smithy_client_1.expectString)(output.parameterValue),
    };
};
const de_RelationalDatabaseParameterList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_RelationalDatabaseParameter(entry, context);
    });
    return retVal;
};
const de_RelationalDatabaseSnapshot = (output, context) => {
    return {
        arn: (0, smithy_client_1.expectString)(output.arn),
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        engine: (0, smithy_client_1.expectString)(output.engine),
        engineVersion: (0, smithy_client_1.expectString)(output.engineVersion),
        fromRelationalDatabaseArn: (0, smithy_client_1.expectString)(output.fromRelationalDatabaseArn),
        fromRelationalDatabaseBlueprintId: (0, smithy_client_1.expectString)(output.fromRelationalDatabaseBlueprintId),
        fromRelationalDatabaseBundleId: (0, smithy_client_1.expectString)(output.fromRelationalDatabaseBundleId),
        fromRelationalDatabaseName: (0, smithy_client_1.expectString)(output.fromRelationalDatabaseName),
        location: output.location != null ? de_ResourceLocation(output.location, context) : undefined,
        name: (0, smithy_client_1.expectString)(output.name),
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
        sizeInGb: (0, smithy_client_1.expectInt32)(output.sizeInGb),
        state: (0, smithy_client_1.expectString)(output.state),
        supportCode: (0, smithy_client_1.expectString)(output.supportCode),
        tags: output.tags != null ? de_TagList(output.tags, context) : undefined,
    };
};
const de_RelationalDatabaseSnapshotList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_RelationalDatabaseSnapshot(entry, context);
    });
    return retVal;
};
const de_ReleaseStaticIpResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_RenewalSummary = (output, context) => {
    return {
        domainValidationRecords: output.domainValidationRecords != null
            ? de_DomainValidationRecordList(output.domainValidationRecords, context)
            : undefined,
        renewalStatus: (0, smithy_client_1.expectString)(output.renewalStatus),
        renewalStatusReason: (0, smithy_client_1.expectString)(output.renewalStatusReason),
        updatedAt: output.updatedAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.updatedAt))) : undefined,
    };
};
const de_ResetDistributionCacheResult = (output, context) => {
    return {
        createTime: output.createTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createTime))) : undefined,
        operation: output.operation != null ? de_Operation(output.operation, context) : undefined,
        status: (0, smithy_client_1.expectString)(output.status),
    };
};
const de_ResourceBudgetEstimate = (output, context) => {
    return {
        costEstimates: output.costEstimates != null ? de_CostEstimates(output.costEstimates, context) : undefined,
        endTime: output.endTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.endTime))) : undefined,
        resourceName: (0, smithy_client_1.expectString)(output.resourceName),
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
        startTime: output.startTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.startTime))) : undefined,
    };
};
const de_ResourceLocation = (output, context) => {
    return {
        availabilityZone: (0, smithy_client_1.expectString)(output.availabilityZone),
        regionName: (0, smithy_client_1.expectString)(output.regionName),
    };
};
const de_ResourceReceivingAccess = (output, context) => {
    return {
        name: (0, smithy_client_1.expectString)(output.name),
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
    };
};
const de_ResourceRecord = (output, context) => {
    return {
        name: (0, smithy_client_1.expectString)(output.name),
        type: (0, smithy_client_1.expectString)(output.type),
        value: (0, smithy_client_1.expectString)(output.value),
    };
};
const de_ResourcesBudgetEstimate = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_ResourceBudgetEstimate(entry, context);
    });
    return retVal;
};
const de_SendContactMethodVerificationResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_ServiceException = (output, context) => {
    return {
        code: (0, smithy_client_1.expectString)(output.code),
        docs: (0, smithy_client_1.expectString)(output.docs),
        message: (0, smithy_client_1.expectString)(output.message),
        tip: (0, smithy_client_1.expectString)(output.tip),
    };
};
const de_Session = (output, context) => {
    return {
        isPrimary: (0, smithy_client_1.expectBoolean)(output.isPrimary),
        name: (0, smithy_client_1.expectString)(output.name),
        url: (0, smithy_client_1.expectString)(output.url),
    };
};
const de_Sessions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Session(entry, context);
    });
    return retVal;
};
const de_SetIpAddressTypeResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_SetResourceAccessForBucketResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_StartGUISessionResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_StartInstanceResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_StartRelationalDatabaseResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_StaticIp = (output, context) => {
    return {
        arn: (0, smithy_client_1.expectString)(output.arn),
        attachedTo: (0, smithy_client_1.expectString)(output.attachedTo),
        createdAt: output.createdAt != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdAt))) : undefined,
        ipAddress: (0, smithy_client_1.expectString)(output.ipAddress),
        isAttached: (0, smithy_client_1.expectBoolean)(output.isAttached),
        location: output.location != null ? de_ResourceLocation(output.location, context) : undefined,
        name: (0, smithy_client_1.expectString)(output.name),
        resourceType: (0, smithy_client_1.expectString)(output.resourceType),
        supportCode: (0, smithy_client_1.expectString)(output.supportCode),
    };
};
const de_StaticIpList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_StaticIp(entry, context);
    });
    return retVal;
};
const de_StopGUISessionResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_StopInstanceResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_StopRelationalDatabaseResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_StringList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const de_SubjectAlternativeNameList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const de_Tag = (output, context) => {
    return {
        key: (0, smithy_client_1.expectString)(output.key),
        value: (0, smithy_client_1.expectString)(output.value),
    };
};
const de_TagList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return de_Tag(entry, context);
    });
    return retVal;
};
const de_TagResourceResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_TestAlarmResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_TimePeriod = (output, context) => {
    return {
        end: output.end != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.end))) : undefined,
        start: output.start != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.start))) : undefined,
    };
};
const de_UnauthenticatedException = (output, context) => {
    return {
        code: (0, smithy_client_1.expectString)(output.code),
        docs: (0, smithy_client_1.expectString)(output.docs),
        message: (0, smithy_client_1.expectString)(output.message),
        tip: (0, smithy_client_1.expectString)(output.tip),
    };
};
const de_UnpeerVpcResult = (output, context) => {
    return {
        operation: output.operation != null ? de_Operation(output.operation, context) : undefined,
    };
};
const de_UntagResourceResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_UpdateBucketBundleResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_UpdateBucketResult = (output, context) => {
    return {
        bucket: output.bucket != null ? de_Bucket(output.bucket, context) : undefined,
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_UpdateContainerServiceResult = (output, context) => {
    return {
        containerService: output.containerService != null ? de_ContainerService(output.containerService, context) : undefined,
    };
};
const de_UpdateDistributionBundleResult = (output, context) => {
    return {
        operation: output.operation != null ? de_Operation(output.operation, context) : undefined,
    };
};
const de_UpdateDistributionResult = (output, context) => {
    return {
        operation: output.operation != null ? de_Operation(output.operation, context) : undefined,
    };
};
const de_UpdateDomainEntryResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_UpdateInstanceMetadataOptionsResult = (output, context) => {
    return {
        operation: output.operation != null ? de_Operation(output.operation, context) : undefined,
    };
};
const de_UpdateLoadBalancerAttributeResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_UpdateRelationalDatabaseParametersResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const de_UpdateRelationalDatabaseResult = (output, context) => {
    return {
        operations: output.operations != null ? de_OperationList(output.operations, context) : undefined,
    };
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
};
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
