import { SENSITIVE_STRING } from "@aws-sdk/smithy-client";
import { LightsailServiceException as __BaseException } from "./LightsailServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.code = opts.code;
        this.docs = opts.docs;
        this.tip = opts.tip;
    }
}
export const AccessDirection = {
    inbound: "inbound",
    outbound: "outbound",
};
export const StatusType = {
    Active: "Active",
    Inactive: "Inactive",
};
export const AccessType = {
    Private: "private",
    Public: "public",
};
export const BPAStatusMessage = {
    DEFAULTED_FOR_SLR_MISSING: "DEFAULTED_FOR_SLR_MISSING",
    DEFAULTED_FOR_SLR_MISSING_ON_HOLD: "DEFAULTED_FOR_SLR_MISSING_ON_HOLD",
    SYNC_ON_HOLD: "SYNC_ON_HOLD",
    Unknown: "Unknown",
};
export const AccountLevelBpaSyncStatus = {
    Defaulted: "Defaulted",
    Failed: "Failed",
    InSync: "InSync",
    NeverSynced: "NeverSynced",
};
export class AccountSetupInProgressException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccountSetupInProgressException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccountSetupInProgressException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccountSetupInProgressException.prototype);
        this.code = opts.code;
        this.docs = opts.docs;
        this.tip = opts.tip;
    }
}
export const AddOnType = {
    AutoSnapshot: "AutoSnapshot",
    StopInstanceOnIdle: "StopInstanceOnIdle",
};
export const ComparisonOperator = {
    GreaterThanOrEqualToThreshold: "GreaterThanOrEqualToThreshold",
    GreaterThanThreshold: "GreaterThanThreshold",
    LessThanOrEqualToThreshold: "LessThanOrEqualToThreshold",
    LessThanThreshold: "LessThanThreshold",
};
export const ContactProtocol = {
    Email: "Email",
    SMS: "SMS",
};
export const RegionName = {
    AP_NORTHEAST_1: "ap-northeast-1",
    AP_NORTHEAST_2: "ap-northeast-2",
    AP_SOUTHEAST_1: "ap-southeast-1",
    AP_SOUTHEAST_2: "ap-southeast-2",
    AP_SOUTH_1: "ap-south-1",
    CA_CENTRAL_1: "ca-central-1",
    EU_CENTRAL_1: "eu-central-1",
    EU_NORTH_1: "eu-north-1",
    EU_WEST_1: "eu-west-1",
    EU_WEST_2: "eu-west-2",
    EU_WEST_3: "eu-west-3",
    US_EAST_1: "us-east-1",
    US_EAST_2: "us-east-2",
    US_WEST_1: "us-west-1",
    US_WEST_2: "us-west-2",
};
export const MetricName = {
    BurstCapacityPercentage: "BurstCapacityPercentage",
    BurstCapacityTime: "BurstCapacityTime",
    CPUUtilization: "CPUUtilization",
    ClientTLSNegotiationErrorCount: "ClientTLSNegotiationErrorCount",
    DatabaseConnections: "DatabaseConnections",
    DiskQueueDepth: "DiskQueueDepth",
    FreeStorageSpace: "FreeStorageSpace",
    HTTPCode_Instance_2XX_Count: "HTTPCode_Instance_2XX_Count",
    HTTPCode_Instance_3XX_Count: "HTTPCode_Instance_3XX_Count",
    HTTPCode_Instance_4XX_Count: "HTTPCode_Instance_4XX_Count",
    HTTPCode_Instance_5XX_Count: "HTTPCode_Instance_5XX_Count",
    HTTPCode_LB_4XX_Count: "HTTPCode_LB_4XX_Count",
    HTTPCode_LB_5XX_Count: "HTTPCode_LB_5XX_Count",
    HealthyHostCount: "HealthyHostCount",
    InstanceResponseTime: "InstanceResponseTime",
    NetworkIn: "NetworkIn",
    NetworkOut: "NetworkOut",
    NetworkReceiveThroughput: "NetworkReceiveThroughput",
    NetworkTransmitThroughput: "NetworkTransmitThroughput",
    RejectedConnectionCount: "RejectedConnectionCount",
    RequestCount: "RequestCount",
    StatusCheckFailed: "StatusCheckFailed",
    StatusCheckFailed_Instance: "StatusCheckFailed_Instance",
    StatusCheckFailed_System: "StatusCheckFailed_System",
    UnhealthyHostCount: "UnhealthyHostCount",
};
export const ResourceType = {
    Alarm: "Alarm",
    Bucket: "Bucket",
    Certificate: "Certificate",
    CloudFormationStackRecord: "CloudFormationStackRecord",
    ContactMethod: "ContactMethod",
    ContainerService: "ContainerService",
    Disk: "Disk",
    DiskSnapshot: "DiskSnapshot",
    Distribution: "Distribution",
    Domain: "Domain",
    ExportSnapshotRecord: "ExportSnapshotRecord",
    Instance: "Instance",
    InstanceSnapshot: "InstanceSnapshot",
    KeyPair: "KeyPair",
    LoadBalancer: "LoadBalancer",
    LoadBalancerTlsCertificate: "LoadBalancerTlsCertificate",
    PeeredVpc: "PeeredVpc",
    RelationalDatabase: "RelationalDatabase",
    RelationalDatabaseSnapshot: "RelationalDatabaseSnapshot",
    StaticIp: "StaticIp",
};
export const AlarmState = {
    ALARM: "ALARM",
    INSUFFICIENT_DATA: "INSUFFICIENT_DATA",
    OK: "OK",
};
export const MetricStatistic = {
    Average: "Average",
    Maximum: "Maximum",
    Minimum: "Minimum",
    SampleCount: "SampleCount",
    Sum: "Sum",
};
export const TreatMissingData = {
    Breaching: "breaching",
    Ignore: "ignore",
    Missing: "missing",
    NotBreaching: "notBreaching",
};
export const MetricUnit = {
    Bits: "Bits",
    BitsSecond: "Bits/Second",
    Bytes: "Bytes",
    BytesSecond: "Bytes/Second",
    Count: "Count",
    CountSecond: "Count/Second",
    Gigabits: "Gigabits",
    GigabitsSecond: "Gigabits/Second",
    Gigabytes: "Gigabytes",
    GigabytesSecond: "Gigabytes/Second",
    Kilobits: "Kilobits",
    KilobitsSecond: "Kilobits/Second",
    Kilobytes: "Kilobytes",
    KilobytesSecond: "Kilobytes/Second",
    Megabits: "Megabits",
    MegabitsSecond: "Megabits/Second",
    Megabytes: "Megabytes",
    MegabytesSecond: "Megabytes/Second",
    Microseconds: "Microseconds",
    Milliseconds: "Milliseconds",
    None: "None",
    Percent: "Percent",
    Seconds: "Seconds",
    Terabits: "Terabits",
    TerabitsSecond: "Terabits/Second",
    Terabytes: "Terabytes",
    TerabytesSecond: "Terabytes/Second",
};
export const OperationType = {
    AllocateStaticIp: "AllocateStaticIp",
    AttachCertificateToDistribution: "AttachCertificateToDistribution",
    AttachDisk: "AttachDisk",
    AttachInstancesToLoadBalancer: "AttachInstancesToLoadBalancer",
    AttachLoadBalancerTlsCertificate: "AttachLoadBalancerTlsCertificate",
    AttachStaticIp: "AttachStaticIp",
    CloseInstancePublicPorts: "CloseInstancePublicPorts",
    CreateBucket: "CreateBucket",
    CreateBucketAccessKey: "CreateBucketAccessKey",
    CreateCertificate: "CreateCertificate",
    CreateContactMethod: "CreateContactMethod",
    CreateContainerService: "CreateContainerService",
    CreateContainerServiceDeployment: "CreateContainerServiceDeployment",
    CreateContainerServiceRegistryLogin: "CreateContainerServiceRegistryLogin",
    CreateDisk: "CreateDisk",
    CreateDiskFromSnapshot: "CreateDiskFromSnapshot",
    CreateDiskSnapshot: "CreateDiskSnapshot",
    CreateDistribution: "CreateDistribution",
    CreateDomain: "CreateDomain",
    CreateInstance: "CreateInstance",
    CreateInstanceSnapshot: "CreateInstanceSnapshot",
    CreateInstancesFromSnapshot: "CreateInstancesFromSnapshot",
    CreateLoadBalancer: "CreateLoadBalancer",
    CreateLoadBalancerTlsCertificate: "CreateLoadBalancerTlsCertificate",
    CreateRelationalDatabase: "CreateRelationalDatabase",
    CreateRelationalDatabaseFromSnapshot: "CreateRelationalDatabaseFromSnapshot",
    CreateRelationalDatabaseSnapshot: "CreateRelationalDatabaseSnapshot",
    DeleteAlarm: "DeleteAlarm",
    DeleteBucket: "DeleteBucket",
    DeleteBucketAccessKey: "DeleteBucketAccessKey",
    DeleteCertificate: "DeleteCertificate",
    DeleteContactMethod: "DeleteContactMethod",
    DeleteContainerImage: "DeleteContainerImage",
    DeleteContainerService: "DeleteContainerService",
    DeleteDisk: "DeleteDisk",
    DeleteDiskSnapshot: "DeleteDiskSnapshot",
    DeleteDistribution: "DeleteDistribution",
    DeleteDomain: "DeleteDomain",
    DeleteDomainEntry: "DeleteDomainEntry",
    DeleteInstance: "DeleteInstance",
    DeleteInstanceSnapshot: "DeleteInstanceSnapshot",
    DeleteKnownHostKeys: "DeleteKnownHostKeys",
    DeleteLoadBalancer: "DeleteLoadBalancer",
    DeleteLoadBalancerTlsCertificate: "DeleteLoadBalancerTlsCertificate",
    DeleteRelationalDatabase: "DeleteRelationalDatabase",
    DeleteRelationalDatabaseSnapshot: "DeleteRelationalDatabaseSnapshot",
    DetachCertificateFromDistribution: "DetachCertificateFromDistribution",
    DetachDisk: "DetachDisk",
    DetachInstancesFromLoadBalancer: "DetachInstancesFromLoadBalancer",
    DetachStaticIp: "DetachStaticIp",
    DisableAddOn: "DisableAddOn",
    EnableAddOn: "EnableAddOn",
    GetAlarms: "GetAlarms",
    GetContactMethods: "GetContactMethods",
    OpenInstancePublicPorts: "OpenInstancePublicPorts",
    PutAlarm: "PutAlarm",
    PutInstancePublicPorts: "PutInstancePublicPorts",
    RebootInstance: "RebootInstance",
    RebootRelationalDatabase: "RebootRelationalDatabase",
    RegisterContainerImage: "RegisterContainerImage",
    ReleaseStaticIp: "ReleaseStaticIp",
    ResetDistributionCache: "ResetDistributionCache",
    SendContactMethodVerification: "SendContactMethodVerification",
    SetIpAddressType: "SetIpAddressType",
    SetResourceAccessForBucket: "SetResourceAccessForBucket",
    StartGUISession: "StartGUISession",
    StartInstance: "StartInstance",
    StartRelationalDatabase: "StartRelationalDatabase",
    StopGUISession: "StopGUISession",
    StopInstance: "StopInstance",
    StopRelationalDatabase: "StopRelationalDatabase",
    TestAlarm: "TestAlarm",
    UpdateBucket: "UpdateBucket",
    UpdateBucketBundle: "UpdateBucketBundle",
    UpdateContainerService: "UpdateContainerService",
    UpdateDistribution: "UpdateDistribution",
    UpdateDistributionBundle: "UpdateDistributionBundle",
    UpdateDomainEntry: "UpdateDomainEntry",
    UpdateInstanceMetadataOptions: "UpdateInstanceMetadataOptions",
    UpdateLoadBalancerAttribute: "UpdateLoadBalancerAttribute",
    UpdateRelationalDatabase: "UpdateRelationalDatabase",
    UpdateRelationalDatabaseParameters: "UpdateRelationalDatabaseParameters",
};
export const OperationStatus = {
    Completed: "Completed",
    Failed: "Failed",
    NotStarted: "NotStarted",
    Started: "Started",
    Succeeded: "Succeeded",
};
export class InvalidInputException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidInputException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidInputException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidInputException.prototype);
        this.code = opts.code;
        this.docs = opts.docs;
        this.tip = opts.tip;
    }
}
export class NotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotFoundException.prototype);
        this.code = opts.code;
        this.docs = opts.docs;
        this.tip = opts.tip;
    }
}
export class OperationFailureException extends __BaseException {
    constructor(opts) {
        super({
            name: "OperationFailureException",
            $fault: "client",
            ...opts,
        });
        this.name = "OperationFailureException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OperationFailureException.prototype);
        this.code = opts.code;
        this.docs = opts.docs;
        this.tip = opts.tip;
    }
}
export class ServiceException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceException.prototype);
        this.code = opts.code;
        this.docs = opts.docs;
        this.tip = opts.tip;
    }
}
export class UnauthenticatedException extends __BaseException {
    constructor(opts) {
        super({
            name: "UnauthenticatedException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnauthenticatedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnauthenticatedException.prototype);
        this.code = opts.code;
        this.docs = opts.docs;
        this.tip = opts.tip;
    }
}
export const AppCategory = {
    LfR: "LfR",
};
export const AutoMountStatus = {
    Failed: "Failed",
    Mounted: "Mounted",
    NotMounted: "NotMounted",
    Pending: "Pending",
};
export const AutoSnapshotStatus = {
    FAILED: "Failed",
    IN_PROGRESS: "InProgress",
    NOT_FOUND: "NotFound",
    SUCCESS: "Success",
};
export const BehaviorEnum = {
    CacheSetting: "cache",
    DontCacheSetting: "dont-cache",
};
export const InstancePlatform = {
    LinuxUnix: "LINUX_UNIX",
    Windows: "WINDOWS",
};
export const BlueprintType = {
    app: "app",
    os: "os",
};
export const BucketMetricName = {
    BucketSizeBytes: "BucketSizeBytes",
    NumberOfObjects: "NumberOfObjects",
};
export const ForwardValues = {
    all: "all",
    allowList: "allow-list",
    none: "none",
};
export const HeaderEnum = {
    accept: "Accept",
    acceptCharset: "Accept-Charset",
    acceptDatetime: "Accept-Datetime",
    acceptEncoding: "Accept-Encoding",
    acceptLanguage: "Accept-Language",
    authorization: "Authorization",
    cloudFrontForwardedProto: "CloudFront-Forwarded-Proto",
    cloudFrontIsDesktopViewer: "CloudFront-Is-Desktop-Viewer",
    cloudFrontIsMobileViewer: "CloudFront-Is-Mobile-Viewer",
    cloudFrontIsSmartTVViewer: "CloudFront-Is-SmartTV-Viewer",
    cloudFrontIsTabletViewer: "CloudFront-Is-Tablet-Viewer",
    cloudFrontViewerCountry: "CloudFront-Viewer-Country",
    host: "Host",
    origin: "Origin",
    referer: "Referer",
};
export const DnsRecordCreationStateCode = {
    Failed: "FAILED",
    Started: "STARTED",
    Succeeded: "SUCCEEDED",
};
export const CertificateDomainValidationStatus = {
    Failed: "FAILED",
    PendingValidation: "PENDING_VALIDATION",
    Success: "SUCCESS",
};
export const RenewalStatus = {
    Failed: "Failed",
    PendingAutoRenewal: "PendingAutoRenewal",
    PendingValidation: "PendingValidation",
    Success: "Success",
};
export const CertificateStatus = {
    Expired: "EXPIRED",
    Failed: "FAILED",
    Inactive: "INACTIVE",
    Issued: "ISSUED",
    PendingValidation: "PENDING_VALIDATION",
    Revoked: "REVOKED",
    ValidationTimedOut: "VALIDATION_TIMED_OUT",
};
export const NetworkProtocol = {
    ALL: "all",
    ICMP: "icmp",
    TCP: "tcp",
    UDP: "udp",
};
export const CloudFormationStackRecordSourceType = {
    ExportSnapshotRecord: "ExportSnapshotRecord",
};
export const RecordState = {
    Failed: "Failed",
    Started: "Started",
    Succeeded: "Succeeded",
};
export const ContactMethodStatus = {
    Invalid: "Invalid",
    PendingVerification: "PendingVerification",
    Valid: "Valid",
};
export const ContactMethodVerificationProtocol = {
    Email: "Email",
};
export const ContainerServiceProtocol = {
    HTTP: "HTTP",
    HTTPS: "HTTPS",
    TCP: "TCP",
    UDP: "UDP",
};
export const ContainerServiceDeploymentState = {
    ACTIVATING: "ACTIVATING",
    ACTIVE: "ACTIVE",
    FAILED: "FAILED",
    INACTIVE: "INACTIVE",
};
export const ContainerServicePowerName = {
    large: "large",
    medium: "medium",
    micro: "micro",
    nano: "nano",
    small: "small",
    xlarge: "xlarge",
};
export const ContainerServiceState = {
    DELETING: "DELETING",
    DEPLOYING: "DEPLOYING",
    DISABLED: "DISABLED",
    PENDING: "PENDING",
    READY: "READY",
    RUNNING: "RUNNING",
    UPDATING: "UPDATING",
};
export const ContainerServiceStateDetailCode = {
    ACTIVATING_DEPLOYMENT: "ACTIVATING_DEPLOYMENT",
    CERTIFICATE_LIMIT_EXCEEDED: "CERTIFICATE_LIMIT_EXCEEDED",
    CREATING_DEPLOYMENT: "CREATING_DEPLOYMENT",
    CREATING_NETWORK_INFRASTRUCTURE: "CREATING_NETWORK_INFRASTRUCTURE",
    CREATING_SYSTEM_RESOURCES: "CREATING_SYSTEM_RESOURCES",
    EVALUATING_HEALTH_CHECK: "EVALUATING_HEALTH_CHECK",
    PROVISIONING_CERTIFICATE: "PROVISIONING_CERTIFICATE",
    PROVISIONING_SERVICE: "PROVISIONING_SERVICE",
    UNKNOWN_ERROR: "UNKNOWN_ERROR",
};
export const ContainerServiceMetricName = {
    CPUUtilization: "CPUUtilization",
    MemoryUtilization: "MemoryUtilization",
};
export const Currency = {
    USD: "USD",
};
export const PricingUnit = {
    Bundles: "Bundles",
    GB: "GB",
    GBMo: "GB-Mo",
    Hrs: "Hrs",
    Queries: "Queries",
};
export const PortInfoSourceType = {
    Closed: "CLOSED",
    Default: "DEFAULT",
    Instance: "INSTANCE",
    None: "NONE",
};
export const IpAddressType = {
    DUALSTACK: "dualstack",
    IPV4: "ipv4",
};
export const OriginProtocolPolicyEnum = {
    HTTPOnly: "http-only",
    HTTPSOnly: "https-only",
};
export const Status = {
    FailedInstanceCreation: "failedInstanceCreation",
    FailedStartingGUISession: "failedStartingGUISession",
    FailedStoppingGUISession: "failedStoppingGUISession",
    NotStarted: "notStarted",
    SettingUpInstance: "settingUpInstance",
    StartExpired: "startExpired",
    Started: "started",
    Starting: "starting",
    Stopped: "stopped",
    Stopping: "stopping",
};
export const DiskState = {
    Available: "available",
    Error: "error",
    InUse: "in-use",
    Pending: "pending",
    Unknown: "unknown",
};
export const DiskSnapshotState = {
    Completed: "completed",
    Error: "error",
    Pending: "pending",
    Unknown: "unknown",
};
export const DistributionMetricName = {
    BytesDownloaded: "BytesDownloaded",
    BytesUploaded: "BytesUploaded",
    Http4xxErrorRate: "Http4xxErrorRate",
    Http5xxErrorRate: "Http5xxErrorRate",
    Requests: "Requests",
    TotalErrorRate: "TotalErrorRate",
};
export const NameServersUpdateStateCode = {
    Failed: "FAILED",
    Pending: "PENDING",
    Started: "STARTED",
    Succeeded: "SUCCEEDED",
};
export const R53HostedZoneDeletionStateCode = {
    Failed: "FAILED",
    Pending: "PENDING",
    Started: "STARTED",
    Succeeded: "SUCCEEDED",
};
export const ExportSnapshotRecordSourceType = {
    DiskSnapshot: "DiskSnapshot",
    InstanceSnapshot: "InstanceSnapshot",
};
export const AccessKeyFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.accessKeyId && { accessKeyId: SENSITIVE_STRING }),
});
export const CreateBucketAccessKeyResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.accessKey && { accessKey: AccessKeyFilterSensitiveLog(obj.accessKey) }),
});
export const SessionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.url && { url: SENSITIVE_STRING }),
});
export const CreateGUISessionAccessDetailsResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.sessions && { sessions: obj.sessions.map((item) => SessionFilterSensitiveLog(item)) }),
});
export const CreateRelationalDatabaseRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.masterUserPassword && { masterUserPassword: SENSITIVE_STRING }),
});
export const GetBucketAccessKeysResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.accessKeys && { accessKeys: obj.accessKeys.map((item) => AccessKeyFilterSensitiveLog(item)) }),
});
